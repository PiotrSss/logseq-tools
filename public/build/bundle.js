
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }
    class HtmlTag {
        constructor(anchor = null) {
            this.a = anchor;
            this.e = this.n = null;
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.h(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.32.3' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    function d(e,r=!1){return e=e.slice(e.startsWith("/#")?2:0,e.endsWith("/*")?-2:void 0),e.startsWith("/")||(e="/"+e),e==="/"&&(e=""),r&&!e.endsWith("/")&&(e+="/"),e}function b(e,r){e=d(e,!0),r=d(r,!0);let a=[],n={},t=!0,o=e.split("/").map(c=>c.startsWith(":")?(a.push(c.slice(1)),"([^\\/]+)"):c).join("\\/"),i=r.match(new RegExp(`^${o}$`));return i||(t=!1,i=r.match(new RegExp(`^${o}`))),i?(a.forEach((c,w)=>n[c]=i[w+1]),{exact:t,params:n,part:i[0].slice(0,-1)}):null}function x(e,r,a){if(a==="")return e;if(a[0]==="/")return a;let n=i=>i.split("/").filter(c=>c!==""),t=n(e),o=r?n(r):[];return "/"+o.map((i,c)=>t[c]).join("/")+"/"+a}function h(e,r,a,n){let t=[r,"data-"+r].reduce((o,i)=>{let c=e.getAttribute(i);return a&&e.removeAttribute(i),c===null?o:c},!1);return !n&&t===""?!0:t||n||!1}function v(e){let r=e.split("&").map(a=>a.split("=")).reduce((a,n)=>{let t=n[0];if(!t)return a;let o=n.length>1?n[n.length-1]:!0;return typeof o=="string"&&o.includes(",")&&(o=o.split(",")),a[t]===void 0?a[t]=[o]:a[t].push(o),a},{});return Object.entries(r).reduce((a,n)=>(a[n[0]]=n[1].length>1?n[1]:n[1][0],a),{})}function y(e){throw new Error("[Tinro] "+e)}var k=1,S=2,M=3,H=4;function j(e,r,a,n){return e===k?r&&r():e===S?a&&a():n&&n()}function C(){return !window||window.location.pathname==="srcdoc"?M:k}var s={HISTORY:k,HASH:S,MEMORY:M,OFF:H,run:j,getDeafault:C};var O,R,l=W();function W(){let e=s.getDeafault(),r,a=o=>window.onhashchange=window.onpopstate=R=null,n=o=>r&&r(_(e));function t(o){o&&(e=o),a(),e!==s.OFF&&s.run(e,i=>window.onpopstate=n,i=>window.onhashchange=n)&&n();}return {mode:o=>t(o),get:o=>_(e),go(o){z(e,o),n();},start(o){r=o,t();},stop(){r=null,t(s.OFF);}}}function z(e,r){s.run(e,a=>history.pushState({},"",r),a=>window.location.hash=r,a=>R=r);}function _(e){let r=O,a=O=s.run(e,t=>window.location.pathname+window.location.search,t=>String(window.location.hash.slice(1)||"/"),t=>R||"/"),n=a.match(/^([^?#]+)(?:\?([^#]+))?(?:\#(.+))?$/);return {url:a,from:r,path:n[1]||"",query:v(n[2]||""),hash:n[3]||""}}function $(e){let r=getContext("tinro");r&&(r.exact||r.fallback)&&y(`${e.fallback?"<Route fallback>":`<Route path="${e.path}">`}  can't be inside ${r.fallback?"<Route fallback>":`<Route path="${r.path||"/"}"> with exact path`}`);let a=e.fallback?"fallbacks":"childs",n=writable({}),t={router:{},exact:!1,pattern:null,meta:{},parent:r,fallback:e.fallback,redirect:!1,firstmatch:!1,breadcrumb:null,matched:!1,childs:new Set,activeChilds:new Set,fallbacks:new Set,update(o){t.exact=!o.path.endsWith("/*"),t.pattern=d(`${t.parent&&t.parent.pattern||""}${o.path}`),t.redirect=o.redirect,t.firstmatch=o.firstmatch,t.breadcrumb=o.breadcrumb,t.match();},register:()=>{if(!!t.parent)return t.parent[a].add(t),()=>{t.parent[a].delete(t),t.router.un&&t.router.un();}},show:()=>{e.onShow(),!t.fallback&&t.parent&&t.parent.activeChilds.add(t);},hide:()=>{e.onHide(),!t.fallback&&t.parent&&t.parent.activeChilds.delete(t);},match:async()=>{t.matched=!1;let{path:o,url:i,from:c,query:w}=t.router,u=b(t.pattern,o);if(!t.fallback&&u&&t.redirect&&(!t.exact||t.exact&&u.exact))return await tick(),m.goto(x(o,t.parent&&t.parent.pattern,t.redirect));if(t.meta=u&&{from:c,url:i,query:w,match:u.part,pattern:t.pattern,breadcrumbs:t.parent&&t.parent.meta&&t.parent.meta.breadcrumbs.slice()||[],params:u.params,subscribe:n.subscribe},t.breadcrumb&&t.meta&&t.meta.breadcrumbs.push({name:t.breadcrumb,path:u.part}),n.set(t.meta),u&&!t.fallback&&(!t.exact||t.exact&&u.exact)&&(!t.parent||!t.parent.firstmatch||!t.parent.matched)?(e.onMeta(t.meta),t.parent&&(t.parent.matched=!0),t.show()):t.hide(),await tick(),u&&!t.fallback&&(t.childs.size>0&&t.activeChilds.size==0||t.childs.size==0&&t.fallbacks.size>0)){let f=t;for(;f.fallbacks.size==0;)if(f=f.parent,!f)return;f&&f.fallbacks.forEach(p=>{p.redirect?m.goto(x("/",p.parent&&p.parent.pattern,p.redirect)):p.show();});}}};return setContext("tinro",t),onMount(()=>t.register()),t.router.un=m.subscribe(o=>{t.router.path=o.path,t.router.url=o.url,t.router.query=o.query,t.router.from=o.from,t.pattern!==null&&t.match();}),t}function g(){return getContext("tinro").meta}var m=K();function K(){let{subscribe:e}=writable(l.get(),r=>{l.start(r);let a=T(l.go);return ()=>{l.stop(),a();}});return {subscribe:e,goto:r=>l.go(r),params:I,meta:g,useHashNavigation:r=>l.mode(r?s.HASH:s.HISTORY),mode:{hash:()=>l.mode(s.HASH),history:()=>l.mode(s.HISTORY),memory:()=>l.mode(s.MEMORY)}}}function A(e){let r=h(e,"href"),a=h(e,"exact",!0),n=h(e,"active-class",!0,"active");return {destroy:m.subscribe(t=>{let o=b(r,t.path);o&&(o.exact&&a||!a)?e.classList.add(n):e.classList.remove(n);})}}function T(e){let r=a=>{let n=a.target.closest("a[href]"),t=n&&h(n,"target",!1,"_self"),o=n&&h(n,"tinro-ignore"),i=a.ctrlKey||a.metaKey||a.altKey||a.shiftKey;if(t=="_self"&&!o&&!i&&n){let c=n.getAttribute("href").replace(/^\/#/,"");/^\/\/|^[a-zA-Z]+:/.test(c)||(a.preventDefault(),e(c.startsWith("/")?c:n.href.replace(window.location.origin,"")));}};return addEventListener("click",r),()=>removeEventListener("click",r)}function I(){return getContext("tinro").meta.params}

    /* node_modules/tinro/cmp/Route.svelte generated by Svelte v3.32.3 */

    const get_default_slot_changes = dirty => ({
    	params: dirty & /*params*/ 2,
    	meta: dirty & /*meta*/ 4
    });

    const get_default_slot_context = ctx => ({
    	params: /*params*/ ctx[1],
    	meta: /*meta*/ ctx[2]
    });

    // (32:0) {#if showContent}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, params, meta*/ 262) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(32:0) {#if showContent}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*showContent*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*showContent*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showContent*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Route", slots, ['default']);
    	let { path = "/*" } = $$props;
    	let { fallback = false } = $$props;
    	let { redirect = false } = $$props;
    	let { firstmatch = false } = $$props;
    	let { breadcrumb = null } = $$props;
    	let showContent = false;
    	let params = {}; /* DEPRECATED */
    	let meta = {};

    	const route = $({
    		fallback,
    		onShow() {
    			$$invalidate(0, showContent = true);
    		},
    		onHide() {
    			$$invalidate(0, showContent = false);
    		},
    		onMeta(newmeta) {
    			$$invalidate(2, meta = newmeta);
    			$$invalidate(1, params = meta.params); /* DEPRECATED */
    		}
    	});

    	const writable_props = ["path", "fallback", "redirect", "firstmatch", "breadcrumb"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Route> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("path" in $$props) $$invalidate(3, path = $$props.path);
    		if ("fallback" in $$props) $$invalidate(4, fallback = $$props.fallback);
    		if ("redirect" in $$props) $$invalidate(5, redirect = $$props.redirect);
    		if ("firstmatch" in $$props) $$invalidate(6, firstmatch = $$props.firstmatch);
    		if ("breadcrumb" in $$props) $$invalidate(7, breadcrumb = $$props.breadcrumb);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createRouteObject: $,
    		path,
    		fallback,
    		redirect,
    		firstmatch,
    		breadcrumb,
    		showContent,
    		params,
    		meta,
    		route
    	});

    	$$self.$inject_state = $$props => {
    		if ("path" in $$props) $$invalidate(3, path = $$props.path);
    		if ("fallback" in $$props) $$invalidate(4, fallback = $$props.fallback);
    		if ("redirect" in $$props) $$invalidate(5, redirect = $$props.redirect);
    		if ("firstmatch" in $$props) $$invalidate(6, firstmatch = $$props.firstmatch);
    		if ("breadcrumb" in $$props) $$invalidate(7, breadcrumb = $$props.breadcrumb);
    		if ("showContent" in $$props) $$invalidate(0, showContent = $$props.showContent);
    		if ("params" in $$props) $$invalidate(1, params = $$props.params);
    		if ("meta" in $$props) $$invalidate(2, meta = $$props.meta);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*path, redirect, firstmatch, breadcrumb*/ 232) {
    			route.update({ path, redirect, firstmatch, breadcrumb });
    		}
    	};

    	return [
    		showContent,
    		params,
    		meta,
    		path,
    		fallback,
    		redirect,
    		firstmatch,
    		breadcrumb,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			path: 3,
    			fallback: 4,
    			redirect: 5,
    			firstmatch: 6,
    			breadcrumb: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fallback() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fallback(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get redirect() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set redirect(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get firstmatch() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstmatch(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get breadcrumb() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set breadcrumb(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /* src/Transition.svelte generated by Svelte v3.32.3 */
    const file = "src/Transition.svelte";

    // (5:0) {#key $router.path}
    function create_key_block(ctx) {
    	let div;
    	let div_intro;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			add_location(div, file, 5, 4, 127);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			if (!div_intro) {
    				add_render_callback(() => {
    					div_intro = create_in_transition(div, fade, { duration: 700 });
    					div_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(5:0) {#key $router.path}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let previous_key = /*$router*/ ctx[0].path;
    	let key_block_anchor;
    	let current;
    	let key_block = create_key_block(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$router*/ 1 && safe_not_equal(previous_key, previous_key = /*$router*/ ctx[0].path)) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $router;
    	validate_store(m, "router");
    	component_subscribe($$self, m, $$value => $$invalidate(0, $router = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Transition", slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Transition> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ router: m, fade, $router });
    	return [$router, $$scope, slots];
    }

    class Transition extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Transition",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }

      var number = Number(dirtyNumber);

      if (isNaN(number)) {
        return number;
      }

      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */

    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument); // Clone the date

      if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

          console.warn(new Error().stack);
        }

        return new Date(NaN);
      }
    }

    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the days added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */

    function addDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);

      if (isNaN(amount)) {
        return new Date(NaN);
      }

      if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
      }

      date.setDate(date.getDate() + amount);
      return date;
    }

    /**
     * @name addMonths
     * @category Month Helpers
     * @summary Add the specified number of months to the given date.
     *
     * @description
     * Add the specified number of months to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the months added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 months to 1 September 2014:
     * const result = addMonths(new Date(2014, 8, 1), 5)
     * //=> Sun Feb 01 2015 00:00:00
     */

    function addMonths(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);

      if (isNaN(amount)) {
        return new Date(NaN);
      }

      if (!amount) {
        // If 0 months, no-op to avoid changing times in the hour before end of DST
        return date;
      }

      var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
      // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and
      // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
      // want except that dates will wrap around the end of a month, meaning that
      // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
      // we'll default to the end of the desired month by adding 1 to the desired
      // month and using a date of 0 to back up one day to the end of the desired
      // month.

      var endOfDesiredMonth = new Date(date.getTime());
      endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
      var daysInMonth = endOfDesiredMonth.getDate();

      if (dayOfMonth >= daysInMonth) {
        // If we're already at the end of the month, then this is the correct date
        // and we're done.
        return endOfDesiredMonth;
      } else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
      }
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */

    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    /**
     * @name startOfWeek
     * @category Week Helpers
     * @summary Return the start of a week for the given date.
     *
     * @description
     * Return the start of a week for the given date.
     * The result will be in the local timezone.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Date} the start of a week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // The start of a week for 2 September 2014 11:55:00:
     * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Sun Aug 31 2014 00:00:00
     *
     * @example
     * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
     * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
     * //=> Mon Sep 01 2014 00:00:00
     */

    function startOfWeek(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = toDate(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setDate(date.getDate() - diff);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    var MILLISECONDS_IN_MINUTE = 60000;

    function getDateMillisecondsPart(date) {
      return date.getTime() % MILLISECONDS_IN_MINUTE;
    }
    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */


    function getTimezoneOffsetInMilliseconds(dirtyDate) {
      var date = new Date(dirtyDate.getTime());
      var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
      date.setSeconds(0, 0);
      var hasNegativeUTCOffset = baseTimezoneOffset > 0;
      var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
      return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - Now `isValid` doesn't throw an exception
     *   if the first argument is not an instance of Date.
     *   Instead, argument is converted beforehand using `toDate`.
     *
     *   Examples:
     *
     *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
     *   |---------------------------|---------------|---------------|
     *   | `new Date()`              | `true`        | `true`        |
     *   | `new Date('2016-01-01')`  | `true`        | `true`        |
     *   | `new Date('')`            | `false`       | `false`       |
     *   | `new Date(1488370835081)` | `true`        | `true`        |
     *   | `new Date(NaN)`           | `false`       | `false`       |
     *   | `'2016-01-01'`            | `TypeError`   | `false`       |
     *   | `''`                      | `TypeError`   | `false`       |
     *   | `1488370835081`           | `TypeError`   | `true`        |
     *   | `NaN`                     | `TypeError`   | `false`       |
     *
     *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
     *   that try to coerce arguments to the expected type
     *   (which is also the case with other *date-fns* functions).
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * var result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * var result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * var result = isValid(new Date(''))
     * //=> false
     */

    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      return !isNaN(date);
    }

    var MILLISECONDS_IN_WEEK = 604800000;
    /**
     * @name differenceInCalendarWeeks
     * @category Week Helpers
     * @summary Get the number of calendar weeks between the given dates.
     *
     * @description
     * Get the number of calendar weeks between the given dates.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Number} the number of calendar weeks
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
     * var result = differenceInCalendarWeeks(
     *   new Date(2014, 6, 20),
     *   new Date(2014, 6, 5)
     * )
     * //=> 3
     *
     * @example
     * // If the week starts on Monday,
     * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
     * var result = differenceInCalendarWeeks(
     *   new Date(2014, 6, 20),
     *   new Date(2014, 6, 5),
     *   { weekStartsOn: 1 }
     * )
     * //=> 2
     */

    function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
      requiredArgs(2, arguments);
      var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);
      var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);
      var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);
      var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
    }

    /**
     * @name startOfMonth
     * @category Month Helpers
     * @summary Return the start of a month for the given date.
     *
     * @description
     * Return the start of a month for the given date.
     * The result will be in the local timezone.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a month for 2 September 2014 11:55:00:
     * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Mon Sep 01 2014 00:00:00
     */

    function startOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    }

    function buildFormatLongFn(args) {
      return function (dirtyOptions) {
        var options = dirtyOptions || {};
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    function buildLocalizeFn(args) {
      return function (dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {};
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;

        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;

          var _width = options.width ? String(options.width) : args.defaultWidth;

          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }

        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';

          case 2:
            return number + 'nd';

          case 3:
            return number + 'rd';
        }
      }

      return number + 'th';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };

    function buildMatchPatternFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var matchResult = string.match(args.matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);

        if (!parseResult) {
          return null;
        }

        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    function buildMatchFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var value;

        if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
          value = findIndex(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        } else {
          value = findKey(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        }

        value = args.valueCallback ? args.valueCallback(value) : value;
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
    }

    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */

    var locale = {
      code: 'en-US',
      formatDistance: formatDistance,
      formatLong: formatLong,
      formatRelative: formatRelative,
      localize: localize,
      match: match,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */

    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();

      while (output.length < targetLength) {
        output = '0' + output;
      }

      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */

    var formatters = {
      // Year
      y: function (date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function (date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function (date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function (date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();

          case 'aaa':
            return dayPeriodEnumValue;

          case 'aaaaa':
            return dayPeriodEnumValue[0];

          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function (date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function (date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function (date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function (date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function (date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };

    var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate, dirtyOptions);
      var year = date.getUTCFullYear();
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
      var year = getUTCWeekYear(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, dirtyOptions);
      return date;
    }

    var MILLISECONDS_IN_WEEK$2 = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
    }

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
      /*
       * |     | Unit                           |     | Unit                           |
       * |-----|--------------------------------|-----|--------------------------------|
       * |  a  | AM, PM                         |  A* | Milliseconds in day            |
       * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
       * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
       * |  d  | Day of month                   |  D  | Day of year                    |
       * |  e  | Local day of week              |  E  | Day of week                    |
       * |  f  |                                |  F* | Day of week in month           |
       * |  g* | Modified Julian day            |  G  | Era                            |
       * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
       * |  i! | ISO day of week                |  I! | ISO week of year               |
       * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
       * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
       * |  l* | (deprecated)                   |  L  | Stand-alone month              |
       * |  m  | Minute                         |  M  | Month                          |
       * |  n  |                                |  N  |                                |
       * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
       * |  p! | Long localized time            |  P! | Long localized date            |
       * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
       * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
       * |  s  | Second                         |  S  | Fraction of second             |
       * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
       * |  u  | Extended year                  |  U* | Cyclic year                    |
       * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
       * |  w  | Local week of year             |  W* | Week of month                  |
       * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
       * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
       * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
       *
       * Letters marked by * are not implemented but reserved by Unicode standard.
       *
       * Letters marked by ! are non-standard, but implemented by date-fns:
       * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
       * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
       *   i.e. 7 for Sunday, 1 for Monday, etc.
       * - `I` is ISO week of year, as opposed to `w` which is local week of year.
       * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
       *   `R` is supposed to be used in conjunction with `I` and `i`
       *   for universal ISO week-numbering date, whereas
       *   `Y` is supposed to be used in conjunction with `w` and `e`
       *   for week-numbering date specific to the locale.
       * - `P` is long localized date format
       * - `p` is long localized time format
       */

    };
    var formatters$1 = {
      // Era
      G: function (date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;

        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B

          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ

          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function (date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }

        return formatters.y(date, token);
      },
      // Local week-numbering year
      Y: function (date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        } // Ordinal number


        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        } // Padding


        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function (date, token) {
        var isoWeekYear = getUTCISOWeekYear(date); // Padding

        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function (date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...

          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...

          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          case 'M':
          case 'MM':
            return formatters.M(date, token);
          // 1st, 2nd, ..., 12th

          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D

          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December

          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12

          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th

          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D

          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December

          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function (date, token, localize, options) {
        var week = getUTCWeek(date, options);

        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }

        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function (date, token, localize) {
        var isoWeek = getUTCISOWeek(date);

        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }

        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function (date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }

        return formatters.d(date, token);
      },
      // Day of year
      D: function (date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);

        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }

        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();

        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th

          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th

          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T

          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu

          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday

          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02

          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd

          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue

          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }

        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }

        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function (date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return formatters.h(date, token);
      },
      // Hour [0-23]
      H: function (date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }

        return formatters.H(date, token);
      },
      // Hour [0-11]
      K: function (date, token, localize) {
        var hours = date.getUTCHours() % 12;

        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function (date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;

        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function (date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }

        return formatters.m(date, token);
      },
      // Second
      s: function (date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }

        return formatters.s(date, token);
      },
      // Fraction of second
      S: function (date, token) {
        return formatters.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        if (timezoneOffset === 0) {
          return 'Z';
        }

        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`

          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`

          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`

          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`

          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };

    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;

      if (minutes === 0) {
        return sign + String(hours);
      }

      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }

    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }

      return formatTimezone(offset, dirtyDelimiter);
    }

    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }

    function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });

        case 'PP':
          return formatLong.date({
            width: 'medium'
          });

        case 'PPP':
          return formatLong.date({
            width: 'long'
          });

        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    }

    function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });

        case 'pp':
          return formatLong.time({
            width: 'medium'
          });

        case 'ppp':
          return formatLong.time({
            width: 'long'
          });

        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    }

    function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/);
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];

      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }

      var dateTimeFormat;

      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;

        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;

        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;

        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }

      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    }

    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      }
    }

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://git.io/fxCyr
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 0001, ..., 999               |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
     *
     * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The second argument is now required for the sake of explicitness.
     *
     *   ```javascript
     *   // Before v2.0.0
     *   format(new Date(2016, 0, 1))
     *
     *   // v2.0.0 onward
     *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
     *   ```
     *
     * - New format string API for `format` function
     *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
     *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
     *
     * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://git.io/fxCyr
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://git.io/fxCyr
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var options = dirtyOptions || {};
      var locale$1 = options.locale || locale;
      var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      if (!locale$1.localize) {
        throw new RangeError('locale must contain localize property');
      }

      if (!locale$1.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }

      var originalDate = toDate(dirtyDate);

      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale$1,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];

        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale$1.formatLong, formatterOptions);
        }

        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }

        var firstCharacter = substring[0];

        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }

        var formatter = formatters$1[firstCharacter];

        if (formatter) {
          if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          return formatter(utcDate, substring, locale$1.localize, formatterOptions);
        }

        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        return substring;
      }).join('');
      return result;
    }

    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    /**
     * @name lastDayOfMonth
     * @category Month Helpers
     * @summary Return the last day of a month for the given date.
     *
     * @description
     * Return the last day of a month for the given date.
     * The result will be in the local timezone.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the last day of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The last day of a month for 2 September 2014 11:55:00:
     * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 00:00:00
     */

    function lastDayOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    /**
     * @name getWeeksInMonth
     * @category Week Helpers
     * @summary Get the number of calendar weeks a month spans.
     *
     * @description
     * Get the number of calendar weeks the month in the given date spans.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the given date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Number} the number of calendar weeks
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // How many calendar weeks does February 2015 span?
     * var result = getWeeksInMonth(new Date(2015, 1, 8))
     * //=> 4
     *
     * @example
     * // If the week starts on Monday,
     * // how many calendar weeks does July 2017 span?
     * var result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
     * //=> 6
     */

    function getWeeksInMonth(date, options) {
      requiredArgs(1, arguments);
      return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;
    }

    /**
     * @name isBefore
     * @category Common Helpers
     * @summary Is the first date before the second one?
     *
     * @description
     * Is the first date before the second one?
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date that should be before the other one to return true
     * @param {Date|Number} dateToCompare - the date to compare with
     * @returns {Boolean} the first date is before the second date
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Is 10 July 1989 before 11 February 1987?
     * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
     * //=> false
     */

    function isBefore(dirtyDate, dirtyDateToCompare) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var dateToCompare = toDate(dirtyDateToCompare);
      return date.getTime() < dateToCompare.getTime();
    }

    /**
     * @name isSameMonth
     * @category Month Helpers
     * @summary Are the given dates in the same month?
     *
     * @description
     * Are the given dates in the same month?
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the first date to check
     * @param {Date|Number} dateRight - the second date to check
     * @returns {Boolean} the dates are in the same month
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 2 September 2014 and 25 September 2014 in the same month?
     * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
     * //=> true
     */

    function isSameMonth(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
    }

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var formatDistance_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder as 'n sekonde",
        other: 'minder as {{count}} sekondes'
      },
      xSeconds: {
        one: '1 sekonde',
        other: '{{count}} sekondes'
      },
      halfAMinute: "'n halwe minuut",
      lessThanXMinutes: {
        one: "minder as 'n minuut",
        other: 'minder as {{count}} minute'
      },
      xMinutes: {
        one: "'n minuut",
        other: '{{count}} minute'
      },
      aboutXHours: {
        one: 'ongeveer 1 uur',
        other: 'ongeveer {{count}} ure'
      },
      xHours: {
        one: '1 uur',
        other: '{{count}} ure'
      },
      xDays: {
        one: '1 dag',
        other: '{{count}} dae'
      },
      aboutXWeeks: {
        one: 'ongeveer 1 week',
        other: 'ongeveer {{count}} weke'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weke'
      },
      aboutXMonths: {
        one: 'ongeveer 1 maand',
        other: 'ongeveer {{count}} maande'
      },
      xMonths: {
        one: '1 maand',
        other: '{{count}} maande'
      },
      aboutXYears: {
        one: 'ongeveer 1 jaar',
        other: 'ongeveer {{count}} jaar'
      },
      xYears: {
        one: '1 jaar',
        other: '{{count}} jaar'
      },
      overXYears: {
        one: 'meer as 1 jaar',
        other: 'meer as {{count}} jaar'
      },
      almostXYears: {
        one: 'byna 1 jaar',
        other: 'byna {{count}} jaar'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'oor ' + result;
        } else {
          return result + ' gelede';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var buildFormatLongFn_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildFormatLongFn;

    function buildFormatLongFn(args) {
      return function (dirtyOptions) {
        var options = dirtyOptions || {};
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    module.exports = exports.default;
    });

    var formatLong_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'yyyy/MM/dd'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'verlede' eeee 'om' p",
      yesterday: "'gister om' p",
      today: "'vandag om' p",
      tomorrow: "'môre om' p",
      nextWeek: "eeee 'om' p",
      other: 'P'
    };

    function formatRelative(token) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var buildLocalizeFn_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildLocalizeFn;

    function buildLocalizeFn(args) {
      return function (dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {};
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;

        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;

          var _width = options.width ? String(options.width) : args.defaultWidth;

          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }

        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index];
      };
    }

    module.exports = exports.default;
    });

    var localize_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['vC', 'nC'],
      abbreviated: ['vC', 'nC'],
      wide: ['voor Christus', 'na Christus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1ste kwartaal', '2de kwartaal', '3de kwartaal', '4de kwartaal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mrt', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
      wide: ['Januarie', 'Februarie', 'Maart', 'April', 'Mei', 'Junie', 'Julie', 'Augustus', 'September', 'Oktober', 'November', 'Desember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'D', 'W', 'D', 'V', 'S'],
      short: ['So', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Sa'],
      abbreviated: ['Son', 'Maa', 'Din', 'Woe', 'Don', 'Vry', 'Sat'],
      wide: ['Sondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrydag', 'Saterdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'middaguur',
        morning: 'oggend',
        afternoon: 'middag',
        evening: 'laat middag',
        night: 'aand'
      },
      abbreviated: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'middaguur',
        morning: 'oggend',
        afternoon: 'middag',
        evening: 'laat middag',
        night: 'aand'
      },
      wide: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'middaguur',
        morning: 'oggend',
        afternoon: 'middag',
        evening: 'laat middag',
        night: 'aand'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'uur die middag',
        morning: 'uur die oggend',
        afternoon: 'uur die middag',
        evening: 'uur die aand',
        night: 'uur die aand'
      },
      abbreviated: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'uur die middag',
        morning: 'uur die oggend',
        afternoon: 'uur die middag',
        evening: 'uur die aand',
        night: 'uur die aand'
      },
      wide: {
        am: 'vm',
        pm: 'nm',
        midnight: 'middernag',
        noon: 'uur die middag',
        morning: 'uur die oggend',
        afternoon: 'uur die middag',
        evening: 'uur die aand',
        night: 'uur die aand'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;

      if (rem100 < 20) {
        switch (rem100) {
          case 1:
          case 8:
            return number + 'ste';

          default:
            return number + 'de';
        }
      }

      return number + 'ste';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var buildMatchPatternFn_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildMatchPatternFn;

    function buildMatchPatternFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var matchResult = string.match(args.matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);

        if (!parseResult) {
          return null;
        }

        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    module.exports = exports.default;
    });

    var buildMatchFn_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildMatchFn;

    function buildMatchFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var value;

        if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
          value = findIndex(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        } else {
          value = findKey(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        }

        value = args.valueCallback ? args.valueCallback(value) : value;
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
    }

    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
    }

    module.exports = exports.default;
    });

    var match_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?C\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](st|d)e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
      wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^J/i, /^F/i, /^M/i, /^A/i, /^M/i, /^J/i, /^J/i, /^A/i, /^S/i, /^O/i, /^N/i, /^D/i],
      any: [/^Jan/i, /^Feb/i, /^Mrt/i, /^Apr/i, /^Mei/i, /^Jun/i, /^Jul/i, /^Aug/i, /^Sep/i, /^Okt/i, /^Nov/i, /^Dec/i]
    };
    var matchDayPatterns = {
      narrow: /^[smdwv]/i,
      short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
      abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
      wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
      any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^vm/i,
        pm: /^nm/i,
        midnight: /^middernag/i,
        noon: /^middaguur/i,
        morning: /oggend/i,
        afternoon: /middag/i,
        evening: /laat middag/i,
        night: /aand/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var af = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1);

    var _index2 = _interopRequireDefault(formatLong_1);

    var _index3 = _interopRequireDefault(formatRelative_1);

    var _index4 = _interopRequireDefault(localize_1);

    var _index5 = _interopRequireDefault(match_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Afrikaans locale.
     * @language Afrikaans
     * @iso-639-2 afr
     * @author Marnus Weststrate [@marnusw]{@link https://github.com/marnusw}
     */
    var locale = {
      code: 'af',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'أقل من ثانية واحدة',
        two: 'أقل من ثانتين',
        threeToTen: 'أقل من {{count}} ثواني',
        other: 'أقل من {{count}} ثانية'
      },
      xSeconds: {
        one: 'ثانية واحدة',
        two: 'ثانتين',
        threeToTen: '{{count}} ثواني',
        other: '{{count}} ثانية'
      },
      halfAMinute: 'نصف دقيقة',
      lessThanXMinutes: {
        one: 'أقل من دقيقة',
        two: 'أقل من دقيقتين',
        threeToTen: 'أقل من {{count}} دقائق',
        other: 'أقل من {{count}} دقيقة'
      },
      xMinutes: {
        one: 'دقيقة واحدة',
        two: 'دقيقتين',
        threeToTen: '{{count}} دقائق',
        other: '{{count}} دقيقة'
      },
      aboutXHours: {
        one: 'ساعة واحدة تقريباً',
        two: 'ساعتين تقريباً',
        threeToTen: '{{count}} ساعات تقريباً',
        other: '{{count}} ساعة تقريباً'
      },
      xHours: {
        one: 'ساعة واحدة',
        two: 'ساعتين',
        threeToTen: '{{count}} ساعات',
        other: '{{count}} ساعة'
      },
      xDays: {
        one: 'يوم واحد',
        two: 'يومين',
        threeToTen: '{{count}} أيام',
        other: '{{count}} يوم'
      },
      aboutXWeeks: {
        one: 'أسبوع واحد تقريباً',
        two: 'أسبوعين تقريباً',
        threeToTen: '{{count}} أسابيع تقريباً',
        other: '{{count}} أسبوع تقريباً'
      },
      xWeeks: {
        one: 'أسبوع واحد',
        two: 'أسبوعين',
        threeToTen: '{{count}} أسابيع',
        other: '{{count}} أسبوع'
      },
      aboutXMonths: {
        one: 'شهر واحد تقريباً',
        two: 'شهرين تقريباً',
        threeToTen: '{{count}} أشهر تقريباً',
        other: '{{count}} شهر تقريباً'
      },
      xMonths: {
        one: 'شهر واحد',
        two: 'شهرين',
        threeToTen: '{{count}} أشهر',
        other: '{{count}} شهر'
      },
      aboutXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      },
      xYears: {
        one: 'عام واحد',
        two: 'عامين',
        threeToTen: '{{count}} أعوام',
        other: '{{count}} عام'
      },
      overXYears: {
        one: 'أكثر من عام',
        two: 'أكثر من عامين',
        threeToTen: 'أكثر من {{count}} أعوام',
        other: 'أكثر من {{count}} عام'
      },
      almostXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2) {
        result = formatDistanceLocale[token].two;
      } else if (count <= 10) {
        result = formatDistanceLocale[token].threeToTen.replace('{{count}}', count);
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'في خلال ' + result;
        } else {
          return 'منذ ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ق', 'ب'],
      abbreviated: ['ق.م.', 'ب.م.'],
      wide: ['قبل الميلاد', 'بعد الميلاد']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
      wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
    };
    var monthValues = {
      narrow: ['ج', 'ف', 'م', 'أ', 'م', 'ج', 'ج', 'أ', 'س', 'أ', 'ن', 'د'],
      abbreviated: ['جانـ', 'فيفـ', 'مارس', 'أفريل', 'مايـ', 'جوانـ', 'جويـ', 'أوت', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
      wide: ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
    };
    var dayValues = {
      narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
      short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
      abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
      wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'في الصباح',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'في الصباح',
        evening: 'في المساء',
        night: 'في الليل'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      }
    };

    function ordinalNumber(dirtyNumber) {
      return String(dirtyNumber);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[جفمأسند]/i,
      abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,
      wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ج/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ج/i, /^ج/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
      any: [/^جان/i, /^فيف/i, /^مار/i, /^أفر/i, /^ماي/i, /^جوا/i, /^جوي/i, /^أوت/i, /^سبت/i, /^أكت/i, /^نوف/i, /^ديس/i]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var arDZ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$1);

    var _index2 = _interopRequireDefault(formatLong_1$1);

    var _index3 = _interopRequireDefault(formatRelative_1$1);

    var _index4 = _interopRequireDefault(localize_1$1);

    var _index5 = _interopRequireDefault(match_1$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Arabic locale (Algerian Arabic).
     * @language Algerian Arabic
     * @iso-639-2 ara
     * @author Badreddine Boumaza [@badre429]{@link https://github.com/badre429}
     * @author Ahmed ElShahat [@elshahat]{@link https://github.com/elshahat}
     */
    var locale = {
      code: 'ar-DZ',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'أقل من ثانية واحدة',
        two: 'أقل من ثانتين',
        threeToTen: 'أقل من {{count}} ثواني',
        other: 'أقل من {{count}} ثانية'
      },
      xSeconds: {
        one: 'ثانية واحدة',
        two: 'ثانتين',
        threeToTen: '{{count}} ثواني',
        other: '{{count}} ثانية'
      },
      halfAMinute: 'نصف دقيقة',
      lessThanXMinutes: {
        one: 'أقل من دقيقة',
        two: 'أقل من دقيقتين',
        threeToTen: 'أقل من {{count}} دقائق',
        other: 'أقل من {{count}} دقيقة'
      },
      xMinutes: {
        one: 'دقيقة واحدة',
        two: 'دقيقتين',
        threeToTen: '{{count}} دقائق',
        other: '{{count}} دقيقة'
      },
      aboutXHours: {
        one: 'ساعة واحدة تقريباً',
        two: 'ساعتين تقريباً',
        threeToTen: '{{count}} ساعات تقريباً',
        other: '{{count}} ساعة تقريباً'
      },
      xHours: {
        one: 'ساعة واحدة',
        two: 'ساعتين',
        threeToTen: '{{count}} ساعات',
        other: '{{count}} ساعة'
      },
      xDays: {
        one: 'يوم واحد',
        two: 'يومين',
        threeToTen: '{{count}} أيام',
        other: '{{count}} يوم'
      },
      aboutXWeeks: {
        one: 'أسبوع واحد تقريباً',
        two: 'أسبوعين تقريباً',
        threeToTen: '{{count}} أسابيع تقريباً',
        other: '{{count}} أسبوع تقريباً'
      },
      xWeeks: {
        one: 'أسبوع واحد',
        two: 'أسبوعين',
        threeToTen: '{{count}} أسابيع',
        other: '{{count}} أسبوع'
      },
      aboutXMonths: {
        one: 'شهر واحد تقريباً',
        two: 'شهرين تقريباً',
        threeToTen: '{{count}} أشهر تقريباً',
        other: '{{count}} شهر تقريباً'
      },
      xMonths: {
        one: 'شهر واحد',
        two: 'شهرين',
        threeToTen: '{{count}} أشهر',
        other: '{{count}} شهر'
      },
      aboutXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      },
      xYears: {
        one: 'عام واحد',
        two: 'عامين',
        threeToTen: '{{count}} أعوام',
        other: '{{count}} عام'
      },
      overXYears: {
        one: 'أكثر من عام',
        two: 'أكثر من عامين',
        threeToTen: 'أكثر من {{count}} أعوام',
        other: 'أكثر من {{count}} عام'
      },
      almostXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2) {
        result = formatDistanceLocale[token].two;
      } else if (count <= 10) {
        result = formatDistanceLocale[token].threeToTen.replace('{{count}}', count);
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'في خلال ' + result;
        } else {
          return 'منذ ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ق', 'ب'],
      abbreviated: ['ق.م.', 'ب.م.'],
      wide: ['قبل الميلاد', 'بعد الميلاد']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
      wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
    };
    var monthValues = {
      narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'غ', 'ش', 'أ', 'ن', 'د'],
      abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'ماي', 'يونـ', 'يولـ', 'غشت', 'شتنـ', 'أكتـ', 'نونـ', 'دجنـ'],
      wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'ماي', 'يونيو', 'يوليوز', 'غشت', 'شتنبر', 'أكتوبر', 'نونبر', 'دجنبر']
    };
    var dayValues = {
      narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
      short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
      abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
      wide: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'في الصباح',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'في الصباح',
        evening: 'في المساء',
        night: 'في الليل'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      }
    };

    function ordinalNumber(dirtyNumber) {
      return String(dirtyNumber);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[يفمأمسند]/i,
      abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,
      wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^غ/i, /^ش/i, /^أ/i, /^ن/i, /^د/i],
      any: [/^ين/i, /^فب/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^غشت/i, /^ش/i, /^أك/i, /^ن/i, /^د/i]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [/^الأحد/i, /^الإثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
      any: [/^أح/i, /^إث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var arMA = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$2);

    var _index2 = _interopRequireDefault(formatLong_1$2);

    var _index3 = _interopRequireDefault(formatRelative_1$2);

    var _index4 = _interopRequireDefault(localize_1$2);

    var _index5 = _interopRequireDefault(match_1$2);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Arabic locale (Moroccan Arabic).
     * @language Moroccan Arabic
     * @iso-639-2 ara
     * @author Achraf Rrami [@rramiachraf]{@link https://github.com/rramiachraf}
     */
    var locale = {
      code: 'ar-MA',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        // Monday is 1
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'أقل من ثانية واحدة',
        two: 'أقل من ثانتين',
        threeToTen: 'أقل من {{count}} ثواني',
        other: 'أقل من {{count}} ثانية'
      },
      xSeconds: {
        one: 'ثانية واحدة',
        two: 'ثانتين',
        threeToTen: '{{count}} ثواني',
        other: '{{count}} ثانية'
      },
      halfAMinute: 'نصف دقيقة',
      lessThanXMinutes: {
        one: 'أقل من دقيقة',
        two: 'أقل من دقيقتين',
        threeToTen: 'أقل من {{count}} دقائق',
        other: 'أقل من {{count}} دقيقة'
      },
      xMinutes: {
        one: 'دقيقة واحدة',
        two: 'دقيقتين',
        threeToTen: '{{count}} دقائق',
        other: '{{count}} دقيقة'
      },
      aboutXHours: {
        one: 'ساعة واحدة تقريباً',
        two: 'ساعتين تقريباً',
        threeToTen: '{{count}} ساعات تقريباً',
        other: '{{count}} ساعة تقريباً'
      },
      xHours: {
        one: 'ساعة واحدة',
        two: 'ساعتين',
        threeToTen: '{{count}} ساعات',
        other: '{{count}} ساعة'
      },
      xDays: {
        one: 'يوم واحد',
        two: 'يومين',
        threeToTen: '{{count}} أيام',
        other: '{{count}} يوم'
      },
      aboutXWeeks: {
        one: 'أسبوع واحد تقريباً',
        two: 'أسبوعين تقريباً',
        threeToTen: '{{count}} أسابيع تقريباً',
        other: '{{count}} أسبوع تقريباً'
      },
      xWeeks: {
        one: 'أسبوع واحد',
        two: 'أسبوعين',
        threeToTen: '{{count}} أسابيع',
        other: '{{count}} أسبوع'
      },
      aboutXMonths: {
        one: 'شهر واحد تقريباً',
        two: 'شهرين تقريباً',
        threeToTen: '{{count}} أشهر تقريباً',
        other: '{{count}} شهر تقريباً'
      },
      xMonths: {
        one: 'شهر واحد',
        two: 'شهرين',
        threeToTen: '{{count}} أشهر',
        other: '{{count}} شهر'
      },
      aboutXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      },
      xYears: {
        one: 'عام واحد',
        two: 'عامين',
        threeToTen: '{{count}} أعوام',
        other: '{{count}} عام'
      },
      overXYears: {
        one: 'أكثر من عام',
        two: 'أكثر من عامين',
        threeToTen: 'أكثر من {{count}} أعوام',
        other: 'أكثر من {{count}} عام'
      },
      almostXYears: {
        one: 'عام واحد تقريباً',
        two: 'عامين تقريباً',
        threeToTen: '{{count}} أعوام تقريباً',
        other: '{{count}} عام تقريباً'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2) {
        result = formatDistanceLocale[token].two;
      } else if (count <= 10) {
        result = formatDistanceLocale[token].threeToTen.replace('{{count}}', count);
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'في خلال ' + result;
        } else {
          return 'منذ ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ق', 'ب'],
      abbreviated: ['ق.م.', 'ب.م.'],
      wide: ['قبل الميلاد', 'بعد الميلاد']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
      wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
    };
    var monthValues = {
      narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'أ', 'س', 'أ', 'ن', 'د'],
      abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'مايو', 'يونـ', 'يولـ', 'أغسـ', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
      wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
    };
    var dayValues = {
      narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
      short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
      abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
      wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'صباحاً',
        afternoon: 'بعد الظهر',
        evening: 'مساءاً',
        night: 'ليلاً'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ص',
        pm: 'م',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'في الصباح',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      },
      abbreviated: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        morning: 'في الصباح',
        evening: 'في المساء',
        night: 'في الليل'
      },
      wide: {
        am: 'ص',
        pm: 'م',
        midnight: 'نصف الليل',
        noon: 'ظهر',
        afternoon: 'بعد الظـهر',
        evening: 'في المساء',
        night: 'في الليل'
      }
    };

    function ordinalNumber(dirtyNumber) {
      return String(dirtyNumber);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[يفمأمسند]/i,
      abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
      wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
      any: [/^ين/i, /^ف/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^أغ/i, /^س/i, /^أك/i, /^ن/i, /^د/i]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var arSA = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$3);

    var _index2 = _interopRequireDefault(formatLong_1$3);

    var _index3 = _interopRequireDefault(formatRelative_1$3);

    var _index4 = _interopRequireDefault(localize_1$3);

    var _index5 = _interopRequireDefault(match_1$3);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Arabic locale (Sauid Arabic).
     * @language Arabic
     * @iso-639-2 ara
     * @author Dhaifallah Alwadani [@dalwadani]{@link https://github.com/dalwadani}
     */
    var locale = {
      code: 'ar-SA',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'bir saniyədən az',
        other: '{{count}} bir saniyədən az'
      },
      xSeconds: {
        one: '1 saniyə',
        other: '{{count}} saniyə'
      },
      halfAMinute: 'yarım dəqiqə',
      lessThanXMinutes: {
        one: 'bir dəqiqədən az',
        other: '{{count}} bir dəqiqədən az'
      },
      xMinutes: {
        one: 'bir dəqiqə',
        other: '{{count}} dəqiqə'
      },
      aboutXHours: {
        one: 'təxminən 1 saat',
        other: 'təxminən {{count}} saat'
      },
      xHours: {
        one: '1 saat',
        other: '{{count}} saat'
      },
      xDays: {
        one: '1 gün',
        other: '{{count}} gün'
      },
      aboutXWeeks: {
        one: 'təxminən 1 həftə',
        other: 'təxminən {{count}} həftə'
      },
      xWeeks: {
        one: '1 həftə',
        other: '{{count}} həftə'
      },
      aboutXMonths: {
        one: 'təxminən 1 ay',
        other: 'təxminən {{count}} ay'
      },
      xMonths: {
        one: '1 ay',
        other: '{{count}} ay'
      },
      aboutXYears: {
        one: 'təxminən 1 il',
        other: 'təxminən {{count}} il'
      },
      xYears: {
        one: '1 il',
        other: '{{count}} il'
      },
      overXYears: {
        one: '1 ildən çox',
        other: '{{count}} ildən çox'
      },
      almostXYears: {
        one: 'demək olar ki 1 il',
        other: 'demək olar ki {{count}} il'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' əvvəl';
        } else {
          return result + ' sonra';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, do MMMM y 'il'",
      long: "do MMMM y 'il'",
      medium: "d MMM y 'il'",
      short: 'dd.MM.yyyy'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}} - 'də'",
      long: "{{date}} {{time}} - 'də'",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'sonuncu' eeee p -'də'",
      yesterday: "'dünən' p -'də'",
      today: "'bugün' p -'də'",
      tomorrow: "'sabah' p -'də'",
      nextWeek: "eeee p -'də'",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ["Hz. İsa'dan öncə", 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1ci kvartal', '2ci kvartal', '3cü kvartal', '4cü kvartal'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['Y', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'İyun', 'İyul', 'Avq', 'Sen', 'Okt', 'Noy', 'Dek'],
      wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'İyun', 'İyul', 'Avqust', 'Sentyabr', 'Oktyabr', 'Noyabr', 'Dekabr']
    };
    var dayValues = {
      narrow: ['B.', 'B.e', 'Ç.a', 'Ç.', 'C.a', 'C.', 'Ş.'],
      short: ['B.', 'B.e', 'Ç.a', 'Ç.', 'C.a', 'C.', 'Ş.'],
      abbreviated: ['Baz', 'Baz.e', 'Çər.a', 'Çər', 'Cüm.a', 'Cüm', 'Şə'],
      wide: ['Bazar', 'Bazar ertəsi', 'Çərşənbə axşamı', 'Çərşənbə', 'Cümə axşamı', 'Cümə', 'Şənbə']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'gecəyarı',
        noon: 'gün',
        morning: 'səhər',
        afternoon: 'gündüz',
        evening: 'axşam',
        night: 'gecə'
      }
    };
    var suffixes = {
      1: '-inci',
      5: '-inci',
      8: '-inci',
      70: '-inci',
      80: '-inci',
      2: '-nci',
      7: '-nci',
      20: '-nci',
      50: '-nci',
      3: '-üncü',
      4: '-üncü',
      100: '-üncü',
      6: '-ncı',
      9: '-uncu',
      10: '-uncu',
      30: '-uncu',
      60: '-ıncı',
      90: '-ıncı'
    };

    function getSuffix(number) {
      if (number === 0) {
        // special case for zero
        return number + '-ıncı';
      }

      var a = number % 10,
          b = number % 100 - a,
          c = number >= 100 ? 100 : null;
      return suffixes[a] || suffixes[b] || suffixes[c];
    }

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      var suffix = getSuffix(number);
      return number + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)$/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
      wide: /^(Hz. İsa'dan öncə|ümumi eradan əvvəl|anno domini|ümumi dövr)$/i
    };
    var parseEraPatterns = {
      any: [/^b$/i, /^(a|c)$/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]$/i,
      abbreviated: /^K[1234]$/i,
      wide: /^[1234](ci)? kvartal$/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[(?-i)yfmaisond]$/i,
      abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
      wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
    };
    var parseMonthPatterns = {
      narrow: [/^[(?-i)y]$/i, /^[(?-i)f]$/i, /^[(?-i)m]$/i, /^[(?-i)a]$/i, /^[(?-i)m]$/i, /^[(?-i)i]$/i, /^[(?-i)i]$/i, /^[(?-i)a]$/i, /^[(?-i)s]$/i, /^[(?-i)o]$/i, /^[(?-i)n]$/i, /^[(?-i)d]$/i],
      abbreviated: [/^Yan$/i, /^Fev$/i, /^Mar$/i, /^Apr$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avg$/i, /^Sen$/i, /^Okt$/i, /^Noy$/i, /^Dek$/i],
      wide: [/^Yanvar$/i, /^Fevral$/i, /^Mart$/i, /^Aprel$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avgust$/i, /^Sentyabr$/i, /^Oktyabr$/i, /^Noyabr$/i, /^Dekabr$/i]
    };
    var matchDayPatterns = {
      narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
      short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
      abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
      wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i
    };
    var parseDayPatterns = {
      narrow: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i],
      abbreviated: [/^Baz\.e$/i, /^Çər$/i, /^Çər\.a$/i, /^Cüm$/i, /^Cüm\.a$/i, /^Şə$/i],
      wide: [/^Bazar$/i, /^Bazar ertəsi$/i, /^Çərşənbə axşamı$/i, /^Çərşənbə$/i, /^Cümə axşamı$/i, /^Cümə$/i, /^Şənbə$/i],
      any: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
      any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /^gecəyarı$/i,
        noon: /^gün$/i,
        morning: /səhər$/i,
        afternoon: /gündüz$/i,
        evening: /axşam$/i,
        night: /gecə$/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var az = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$4);

    var _index2 = _interopRequireDefault(formatLong_1$4);

    var _index3 = _interopRequireDefault(formatRelative_1$4);

    var _index4 = _interopRequireDefault(localize_1$4);

    var _index5 = _interopRequireDefault(match_1$4);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Azerbaijani locale.
     * @language Azerbaijani
     * @iso-639-2 aze
     */
    var locale = {
      code: 'az',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$5 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function declension(scheme, count) {
      // scheme for count=1 exists
      if (scheme.one !== undefined && count === 1) {
        return scheme.one;
      }

      var rem10 = count % 10;
      var rem100 = count % 100; // 1, 21, 31, ...

      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
      } else {
        return scheme.pluralGenitive.replace('{{count}}', count);
      }
    }

    function buildLocalizeTokenFn(scheme) {
      return function (count, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return 'праз ' + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + ' таму';
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }

    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: 'менш за секунду',
          singularNominative: 'менш за {{count}} секунду',
          singularGenitive: 'менш за {{count}} секунды',
          pluralGenitive: 'менш за {{count}} секунд'
        },
        future: {
          one: 'менш, чым праз секунду',
          singularNominative: 'менш, чым праз {{count}} секунду',
          singularGenitive: 'менш, чым праз {{count}} секунды',
          pluralGenitive: 'менш, чым праз {{count}} секунд'
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} секунда',
          singularGenitive: '{{count}} секунды',
          pluralGenitive: '{{count}} секунд'
        },
        past: {
          singularNominative: '{{count}} секунду таму',
          singularGenitive: '{{count}} секунды таму',
          pluralGenitive: '{{count}} секунд таму'
        },
        future: {
          singularNominative: 'праз {{count}} секунду',
          singularGenitive: 'праз {{count}} секунды',
          pluralGenitive: 'праз {{count}} секунд'
        }
      }),
      halfAMinute: function (_, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            return 'праз паўхвіліны';
          } else {
            return 'паўхвіліны таму';
          }
        }

        return 'паўхвіліны';
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: 'менш за хвіліну',
          singularNominative: 'менш за {{count}} хвіліну',
          singularGenitive: 'менш за {{count}} хвіліны',
          pluralGenitive: 'менш за {{count}} хвілін'
        },
        future: {
          one: 'менш, чым праз хвіліну',
          singularNominative: 'менш, чым праз {{count}} хвіліну',
          singularGenitive: 'менш, чым праз {{count}} хвіліны',
          pluralGenitive: 'менш, чым праз {{count}} хвілін'
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} хвіліна',
          singularGenitive: '{{count}} хвіліны',
          pluralGenitive: '{{count}} хвілін'
        },
        past: {
          singularNominative: '{{count}} хвіліну таму',
          singularGenitive: '{{count}} хвіліны таму',
          pluralGenitive: '{{count}} хвілін таму'
        },
        future: {
          singularNominative: 'праз {{count}} хвіліну',
          singularGenitive: 'праз {{count}} хвіліны',
          pluralGenitive: 'праз {{count}} хвілін'
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'каля {{count}} гадзіны',
          singularGenitive: 'каля {{count}} гадзін',
          pluralGenitive: 'каля {{count}} гадзін'
        },
        future: {
          singularNominative: 'прыблізна праз {{count}} гадзіну',
          singularGenitive: 'прыблізна праз {{count}} гадзіны',
          pluralGenitive: 'прыблізна праз {{count}} гадзін'
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} гадзіна',
          singularGenitive: '{{count}} гадзіны',
          pluralGenitive: '{{count}} гадзін'
        },
        past: {
          singularNominative: '{{count}} гадзіну таму',
          singularGenitive: '{{count}} гадзіны таму',
          pluralGenitive: '{{count}} гадзін таму'
        },
        future: {
          singularNominative: 'праз {{count}} гадзіну',
          singularGenitive: 'праз {{count}} гадзіны',
          pluralGenitive: 'праз {{count}} гадзін'
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} дзень',
          singularGenitive: '{{count}} дні',
          pluralGenitive: '{{count}} дзён'
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'каля {{count}} месяца',
          // TODO
          singularGenitive: 'каля {{count}} месяцаў',
          // TODO
          pluralGenitive: 'каля {{count}} месяцаў' // TODO

        },
        future: {
          singularNominative: 'прыблізна праз {{count}} месяц',
          // TODO
          singularGenitive: 'прыблізна праз {{count}} месяцы',
          // TODO
          pluralGenitive: 'прыблізна праз {{count}} месяцаў' // TODO

        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} месяц',
          singularGenitive: '{{count}} месяцы',
          pluralGenitive: '{{count}} месяцаў'
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'каля {{count}} месяца',
          singularGenitive: 'каля {{count}} месяцаў',
          pluralGenitive: 'каля {{count}} месяцаў'
        },
        future: {
          singularNominative: 'прыблізна праз {{count}} месяц',
          singularGenitive: 'прыблізна праз {{count}} месяцы',
          pluralGenitive: 'прыблізна праз {{count}} месяцаў'
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} месяц',
          singularGenitive: '{{count}} месяцы',
          pluralGenitive: '{{count}} месяцаў'
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'каля {{count}} года',
          singularGenitive: 'каля {{count}} гадоў',
          pluralGenitive: 'каля {{count}} гадоў'
        },
        future: {
          singularNominative: 'прыблізна праз {{count}} год',
          singularGenitive: 'прыблізна праз {{count}} гады',
          pluralGenitive: 'прыблізна праз {{count}} гадоў'
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} год',
          singularGenitive: '{{count}} гады',
          pluralGenitive: '{{count}} гадоў'
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'больш за {{count}} год',
          singularGenitive: 'больш за {{count}} гады',
          pluralGenitive: 'больш за {{count}} гадоў'
        },
        future: {
          singularNominative: 'больш, чым праз {{count}} год',
          singularGenitive: 'больш, чым праз {{count}} гады',
          pluralGenitive: 'больш, чым праз {{count}} гадоў'
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'амаль {{count}} год',
          singularGenitive: 'амаль {{count}} гады',
          pluralGenitive: 'амаль {{count}} гадоў'
        },
        future: {
          singularNominative: 'амаль праз {{count}} год',
          singularGenitive: 'амаль праз {{count}} гады',
          pluralGenitive: 'амаль праз {{count}} гадоў'
        }
      })
    };

    function formatDistance(token, count, options) {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    }

    module.exports = exports.default;
    });

    var formatLong_1$5 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d MMMM y 'г.'",
      long: "d MMMM y 'г.'",
      medium: "d MMM y 'г.'",
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      any: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var toInteger_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toInteger;

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }

      var number = Number(dirtyNumber);

      if (isNaN(number)) {
        return number;
      }

      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    module.exports = exports.default;
    });

    var requiredArgs_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = requiredArgs;

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    module.exports = exports.default;
    });

    var toDate_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toDate;

    var _index = _interopRequireDefault(requiredArgs_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */
    function toDate(argument) {
      (0, _index.default)(1, arguments);
      var argStr = Object.prototype.toString.call(argument); // Clone the date

      if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

          console.warn(new Error().stack);
        }

        return new Date(NaN);
      }
    }

    module.exports = exports.default;
    });

    var startOfUTCWeek_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = startOfUTCWeek;

    var _index = _interopRequireDefault(toInteger_1);

    var _index2 = _interopRequireDefault(toDate_1);

    var _index3 = _interopRequireDefault(requiredArgs_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376
    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      (0, _index3.default)(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index.default)(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index.default)(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = (0, _index2.default)(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    module.exports = exports.default;
    });

    var isSameUTCWeek_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSameUTCWeek;

    var _index = _interopRequireDefault(startOfUTCWeek_1);

    var _index2 = _interopRequireDefault(requiredArgs_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376
    function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfWeek = (0, _index.default)(dirtyDateLeft, options);
      var dateRightStartOfWeek = (0, _index.default)(dirtyDateRight, options);
      return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
    }

    module.exports = exports.default;
    });

    var formatRelative_1$5 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var accusativeWeekdays = ['нядзелю', 'панядзелак', 'аўторак', 'сераду', 'чацвер', 'пятніцу', 'суботу'];

    function lastWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у мінулую " + weekday + " а' p";

        case 1:
        case 2:
        case 4:
          return "'у мінулы " + weekday + " а' p";
      }
    }

    function thisWeek(day) {
      var weekday = accusativeWeekdays[day];
      return "'у " + weekday + " а' p";
    }

    function nextWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у наступную " + weekday + " а' p";

        case 1:
        case 2:
        case 4:
          return "'у наступны " + weekday + " а' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'учора а' p",
      today: "'сёння а' p",
      tomorrow: "'заўтра а' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$5 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['да н.э.', 'н.э.'],
      abbreviated: ['да н. э.', 'н. э.'],
      wide: ['да нашай эры', 'нашай эры']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-ы кв.', '2-і кв.', '3-і кв.', '4-ы кв.'],
      wide: ['1-ы квартал', '2-і квартал', '3-і квартал', '4-ы квартал']
    };
    var monthValues = {
      narrow: ['С', 'Л', 'С', 'К', 'М', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
      abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'май', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'снеж.'],
      wide: ['студзень', 'люты', 'сакавік', 'красавік', 'май', 'чэрвень', 'ліпень', 'жнівень', 'верасень', 'кастрычнік', 'лістапад', 'снежань']
    };
    var formattingMonthValues = {
      narrow: ['С', 'Л', 'С', 'К', 'М', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],
      abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'мая', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'снеж.'],
      wide: ['студзеня', 'лютага', 'сакавіка', 'красавіка', 'мая', 'чэрвеня', 'ліпеня', 'жніўня', 'верасня', 'кастрычніка', 'лістапада', 'снежня']
    };
    var dayValues = {
      narrow: ['Н', 'П', 'А', 'С', 'Ч', 'П', 'С'],
      short: ['нд', 'пн', 'аў', 'ср', 'чц', 'пт', 'сб'],
      abbreviated: ['нядз', 'пан', 'аўт', 'сер', 'чац', 'пят', 'суб'],
      wide: ['нядзеля', 'панядзелак', 'аўторак', 'серада', 'чацвер', 'пятніца', 'субота']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўн.',
        noon: 'поўд.',
        morning: 'ран.',
        afternoon: 'дзень',
        evening: 'веч.',
        night: 'ноч'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўн.',
        noon: 'поўд.',
        morning: 'ран.',
        afternoon: 'дзень',
        evening: 'веч.',
        night: 'ноч'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўнач',
        noon: 'поўдзень',
        morning: 'раніца',
        afternoon: 'дзень',
        evening: 'вечар',
        night: 'ноч'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўн.',
        noon: 'поўд.',
        morning: 'ран.',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночы'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўн.',
        noon: 'поўд.',
        morning: 'ран.',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночы'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'поўнач',
        noon: 'поўдзень',
        morning: 'раніцы',
        afternoon: 'дня',
        evening: 'вечара',
        night: 'ночы'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var number = Number(dirtyNumber);
      var suffix;
      /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
       *  For date-month combinations should be used `d` formatter.
       *  Correct:   `d MMMM` (4 верасня)
       *  Incorrect: `do MMMM` (4-га верасня)
       *
       *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
       *  So for phrase "5th day of month" (`do дзень месяца`)
       *  library will produce:            `5-га дзень месяца`
       *  but correct spelling should be:  `5-ы дзень месяца`
       *
       *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
       */

      if (unit === 'date') {
        suffix = '-га';
      } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {
        suffix = '-я';
      } else {
        suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-і' : '-ы';
      }

      return number + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'any',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$5 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((да )?н\.?\s?э\.?)/i,
      abbreviated: /^((да )?н\.?\s?э\.?)/i,
      wide: /^(да нашай эры|нашай эры|наша эра)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
      wide: /^[1234](-?[ыі]?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[слкмчжв]/i,
      abbreviated: /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\.?/i,
      wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i
    };
    var parseMonthPatterns = {
      narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^м/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],
      any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^ма/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпасч]/i,
      short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
      abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,
      wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^поўн/i,
        noon: /^поўд/i,
        morning: /^р/i,
        afternoon: /^д[зн]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var be = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$5);

    var _index2 = _interopRequireDefault(formatLong_1$5);

    var _index3 = _interopRequireDefault(formatRelative_1$5);

    var _index4 = _interopRequireDefault(localize_1$5);

    var _index5 = _interopRequireDefault(match_1$5);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Belarusian locale.
     * @language Belarusian
     * @iso-639-2 bel
     * @author Kiryl Anokhin [@alyrik]{@link https://github.com/alyrik}
     * @author Martin Wind [@arvigeus]{@link https://github.com/mawi12345}
     */
    var locale = {
      code: 'be',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$6 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'по-малко от секунда',
        other: 'по-малко от {{count}} секунди'
      },
      xSeconds: {
        one: '1 секунда',
        other: '{{count}} секунди'
      },
      halfAMinute: 'половин минута',
      lessThanXMinutes: {
        one: 'по-малко от минута',
        other: 'по-малко от {{count}} минути'
      },
      xMinutes: {
        one: '1 минута',
        other: '{{count}} минути'
      },
      aboutXHours: {
        one: 'около час',
        other: 'около {{count}} часа'
      },
      xHours: {
        one: '1 час',
        other: '{{count}} часа'
      },
      xDays: {
        one: '1 ден',
        other: '{{count}} дни'
      },
      aboutXWeeks: {
        one: 'около седмица',
        other: 'около {{count}} седмици'
      },
      xWeeks: {
        one: '1 седмица',
        other: '{{count}} седмици'
      },
      aboutXMonths: {
        one: 'около месец',
        other: 'около {{count}} месеца'
      },
      xMonths: {
        one: '1 месец',
        other: '{{count}} месеца'
      },
      aboutXYears: {
        one: 'около година',
        other: 'около {{count}} години'
      },
      xYears: {
        one: '1 година',
        other: '{{count}} години'
      },
      overXYears: {
        one: 'над година',
        other: 'над {{count}} години'
      },
      almostXYears: {
        one: 'почти година',
        other: 'почти {{count}} години'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'след ' + result;
        } else {
          return 'преди ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$6 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, dd MMMM yyyy',
      long: 'dd MMMM yyyy',
      medium: 'dd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      any: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$6 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Adapted from the `ru` translation
    var weekdays = ['неделя', 'понеделник', 'вторник', 'сряда', 'четвъртък', 'петък', 'събота'];

    function lastWeek(day) {
      var weekday = weekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'миналата " + weekday + " в' p";

        case 1:
        case 2:
        case 4:
        case 5:
          return "'миналия " + weekday + " в' p";
      }
    }

    function thisWeek(day) {
      var weekday = weekdays[day];

      if (day === 2
      /* Tue */
      ) {
          return "'във " + weekday + " в' p";
        } else {
        return "'в " + weekday + " в' p";
      }
    }

    function nextWeek(day) {
      var weekday = weekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'следващата " + weekday + " в' p";

        case 1:
        case 2:
        case 4:
        case 5:
          return "'следващия " + weekday + " в' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчера в' p",
      today: "'днес в' p",
      tomorrow: "'утре в' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$6 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['пр.н.е.', 'н.е.'],
      abbreviated: ['преди н. е.', 'н. е.'],
      wide: ['преди новата ера', 'новата ера']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-во тримес.', '2-ро тримес.', '3-то тримес.', '4-то тримес.'],
      wide: ['1-во тримесечие', '2-ро тримесечие', '3-то тримесечие', '4-то тримесечие']
    };
    var monthValues = {
      abbreviated: ['яну', 'фев', 'мар', 'апр', 'май', 'юни', 'юли', 'авг', 'сеп', 'окт', 'ное', 'дек'],
      wide: ['януари', 'февруари', 'март', 'април', 'май', 'юни', 'юли', 'август', 'септември', 'октомври', 'ноември', 'декември']
    };
    var dayValues = {
      narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
      short: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
      abbreviated: ['нед', 'пон', 'вто', 'сря', 'чет', 'пет', 'съб'],
      wide: ['неделя', 'понеделник', 'вторник', 'сряда', 'четвъртък', 'петък', 'събота']
    };
    var dayPeriodValues = {
      wide: {
        am: 'преди обяд',
        pm: 'след обяд',
        midnight: 'в полунощ',
        noon: 'на обяд',
        morning: 'сутринта',
        afternoon: 'следобед',
        evening: 'вечерта',
        night: 'през нощта'
      }
    };

    function isFeminine(unit) {
      return unit === 'year' || unit === 'week' || unit === 'minute' || unit === 'second';
    }

    function isNeuter(unit) {
      return unit === 'quarter';
    }

    function numberWithSuffix(number, unit, masculine, feminine, neuter) {
      var suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
      return number + '-' + suffix;
    }

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var number = Number(dirtyNumber);

      if (number === 0) {
        return numberWithSuffix(0, unit, 'ев', 'ева', 'ево');
      } else if (number % 1000 === 0) {
        return numberWithSuffix(number, unit, 'ен', 'на', 'но');
      } else if (number % 100 === 0) {
        return numberWithSuffix(number, unit, 'тен', 'тна', 'тно');
      }

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return numberWithSuffix(number, unit, 'ви', 'ва', 'во');

          case 2:
            return numberWithSuffix(number, unit, 'ри', 'ра', 'ро');

          case 7:
          case 8:
            return numberWithSuffix(number, unit, 'ми', 'ма', 'мо');
        }
      }

      return numberWithSuffix(number, unit, 'ти', 'та', 'то');
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$6 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((пр)?н\.?\s?е\.?)/i,
      abbreviated: /^((пр)?н\.?\s?е\.?)/i,
      wide: /^(преди новата ера|новата ера|нова ера)/i
    };
    var parseEraPatterns = {
      any: [/^п/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,
      wide: /^[1234](-?[врт]?о?)? тримесечие/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(нд|пн|вт|ср|чт|пт|сб)/i,
      abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,
      wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[ъб]/i]
    };
    var matchMonthPatterns = {
      abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,
      wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i
    };
    var parseMonthPatterns = {
      any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^май/i, /^юн/i, /^юл/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^преди о/i,
        pm: /^след о/i,
        midnight: /^в пол/i,
        noon: /^на об/i,
        morning: /^сут/i,
        afternoon: /^следо/i,
        evening: /^веч/i,
        night: /^през н/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var bg = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$6);

    var _index2 = _interopRequireDefault(formatLong_1$6);

    var _index3 = _interopRequireDefault(formatRelative_1$6);

    var _index4 = _interopRequireDefault(localize_1$6);

    var _index5 = _interopRequireDefault(match_1$6);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Bulgarian locale.
     * @language Bulgarian
     * @iso-639-2 bul
     * @author Nikolay Stoynov [@arvigeus]{@link https://github.com/arvigeus}
     * @author Tsvetan Ovedenski [@fintara]{@link https://github.com/fintara}
     */
    var locale = {
      code: 'bg',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var localize_1$7 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var numberValues = {
      locale: {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
      },
      number: {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
      }
    };
    var eraValues = {
      narrow: ['খ্রিঃপূঃ', 'খ্রিঃ'],
      abbreviated: ['খ্রিঃপূর্ব', 'খ্রিঃ'],
      wide: ['খ্রিস্টপূর্ব', 'খ্রিস্টাব্দ']
    };
    var quarterValues = {
      narrow: ['১', '২', '৩', '৪'],
      abbreviated: ['১ত্রৈ', '২ত্রৈ', '৩ত্রৈ', '৪ত্রৈ'],
      wide: ['১ম ত্রৈমাসিক', '২য় ত্রৈমাসিক', '৩য় ত্রৈমাসিক', '৪র্থ ত্রৈমাসিক']
    };
    var monthValues = {
      narrow: ['জানু', 'ফেব্রু', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্ট', 'অক্টো', 'নভে', 'ডিসে'],
      abbreviated: ['জানু', 'ফেব্রু', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্ট', 'অক্টো', 'নভে', 'ডিসে'],
      wide: ['জানুয়ারি', 'ফেব্রুয়ারি', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'আগস্ট', 'সেপ্টেম্বর', 'অক্টোবর', 'নভেম্বর', 'ডিসেম্বর']
    };
    var dayValues = {
      narrow: ['র', 'সো', 'ম', 'বু', 'বৃ', 'শু', 'শ'],
      short: ['রবি', 'সোম', 'মঙ্গল', 'বুধ', 'বৃহ', 'শুক্র', 'শনি'],
      abbreviated: ['রবি', 'সোম', 'মঙ্গল', 'বুধ', 'বৃহ', 'শুক্র', 'শনি'],
      wide: ['রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার ', 'শুক্রবার', 'শনিবার']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'পূ',
        pm: 'অপ',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      },
      abbreviated: {
        am: 'পূর্বাহ্ন',
        pm: 'অপরাহ্ন',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      },
      wide: {
        am: 'পূর্বাহ্ন',
        pm: 'অপরাহ্ন',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'পূ',
        pm: 'অপ',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      },
      abbreviated: {
        am: 'পূর্বাহ্ন',
        pm: 'অপরাহ্ন',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      },
      wide: {
        am: 'পূর্বাহ্ন',
        pm: 'অপরাহ্ন',
        midnight: 'মধ্যরাত',
        noon: 'মধ্যাহ্ন',
        morning: 'সকাল',
        afternoon: 'বিকাল',
        evening: 'সন্ধ্যা',
        night: 'রাত'
      }
    };

    function dateOrdinalNumber(number, localeNumber) {
      if (number > 18 && number <= 31) {
        return localeNumber + 'শে';
      } else {
        switch (number) {
          case 1:
            return localeNumber + 'লা';

          case 2:
          case 3:
            return localeNumber + 'রা';

          case 4:
            return localeNumber + 'ঠা';

          default:
            return localeNumber + 'ই';
        }
      }
    }

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = localize.localeToNumber(dirtyNumber);
      var localeNumber = localize.numberToLocale(number);
      var unit = dirtyOptions.unit;

      if (unit === 'date') {
        return dateOrdinalNumber(number, localeNumber);
      }

      if (number > 10 || number === 0) return localeNumber + 'তম';
      var rem10 = number % 10;

      switch (rem10) {
        case 2:
        case 3:
          return localeNumber + 'য়';

        case 4:
          return localeNumber + 'র্থ';

        case 6:
          return localeNumber + 'ষ্ঠ';

        case 1:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0:
          return localeNumber + 'ম';
      }
    }

    function localeToNumber(locale) {
      var number = locale.toString().replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
        return numberValues.number[match];
      });
      return Number(number);
    }

    function numberToLocale(number) {
      return number.toString().replace(/\d/g, function (match) {
        return numberValues.locale[match];
      });
    }

    var localize = {
      localeToNumber: localeToNumber,
      numberToLocale: numberToLocale,
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$7 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    var _index = _interopRequireDefault(localize_1$7);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'প্রায় ১ সেকেন্ড',
        other: 'প্রায় {{count}} সেকেন্ড'
      },
      xSeconds: {
        one: '১ সেকেন্ড',
        other: '{{count}} সেকেন্ড'
      },
      halfAMinute: 'আধ মিনিট',
      lessThanXMinutes: {
        one: 'প্রায় ১ মিনিট',
        other: 'প্রায় {{count}} মিনিট'
      },
      xMinutes: {
        one: '১ মিনিট',
        other: '{{count}} মিনিট'
      },
      aboutXHours: {
        one: 'প্রায় ১ ঘন্টা',
        other: 'প্রায় {{count}} ঘন্টা'
      },
      xHours: {
        one: '১ ঘন্টা',
        other: '{{count}} ঘন্টা'
      },
      xDays: {
        one: '১ দিন',
        other: '{{count}} দিন'
      },
      aboutXWeeks: {
        one: 'প্রায় ১ সপ্তাহ',
        other: 'প্রায় {{count}} সপ্তাহ'
      },
      xWeeks: {
        one: '১ সপ্তাহ',
        other: '{{count}} সপ্তাহ'
      },
      aboutXMonths: {
        one: 'প্রায় ১ মাস',
        other: 'প্রায় {{count}} মাস'
      },
      xMonths: {
        one: '১ মাস',
        other: '{{count}} মাস'
      },
      aboutXYears: {
        one: 'প্রায় ১ বছর',
        other: 'প্রায় {{count}} বছর'
      },
      xYears: {
        one: '১ বছর',
        other: '{{count}} বছর'
      },
      overXYears: {
        one: '১ বছরের বেশি',
        other: '{{count}} বছরের বেশি'
      },
      almostXYears: {
        one: 'প্রায় ১ বছর',
        other: 'প্রায় {{count}} বছর'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', _index.default.numberToLocale(count));
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' এর মধ্যে';
        } else {
          return result + ' আগে';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$7 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}} 'সময়'",
      long: "{{date}} {{time}} 'সময়'",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$7 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'গত' eeee 'সময়' p",
      yesterday: "'গতকাল' 'সময়' p",
      today: "'আজ' 'সময়' p",
      tomorrow: "'আগামীকাল' 'সময়' p",
      nextWeek: "eeee 'সময়' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var match_1$7 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,
      abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,
      wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i
    };
    var parseEraPatterns = {
      narrow: [/^খ্রিঃপূঃ/i, /^খ্রিঃ/i],
      abbreviated: [/^খ্রিঃপূর্ব/i, /^খ্রিঃ/i],
      wide: [/^খ্রিস্টপূর্ব/i, /^খ্রিস্টাব্দ/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[১২৩৪]/i,
      abbreviated: /^[১২৩৪]ত্রৈ/i,
      wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i
    };
    var parseQuarterPatterns = {
      any: [/১/i, /২/i, /৩/i, /৪/i]
    };
    var matchMonthPatterns = {
      narrow: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
      abbreviated: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
      wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i
    };
    var parseMonthPatterns = {
      any: [/^জানু/i, /^ফেব্রু/i, /^মার্চ/i, /^এপ্রিল/i, /^মে/i, /^জুন/i, /^জুলাই/i, /^আগস্ট/i, /^সেপ্ট/i, /^অক্টো/i, /^নভে/i, /^ডিসে/i]
    };
    var matchDayPatterns = {
      narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,
      short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
      abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
      wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i
    };
    var parseDayPatterns = {
      narrow: [/^র/i, /^সো/i, /^ম/i, /^বু/i, /^বৃ/i, /^শু/i, /^শ/i],
      short: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
      abbreviated: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
      wide: [/^রবিবার/i, /^সোমবার/i, /^মঙ্গলবার/i, /^বুধবার/i, /^বৃহস্পতিবার /i, /^শুক্রবার/i, /^শনিবার/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
      abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
      wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^পূ/i,
        pm: /^অপ/i,
        midnight: /^মধ্যরাত/i,
        noon: /^মধ্যাহ্ন/i,
        morning: /সকাল/i,
        afternoon: /বিকাল/i,
        evening: /সন্ধ্যা/i,
        night: /রাত/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var bn = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$7);

    var _index2 = _interopRequireDefault(formatLong_1$7);

    var _index3 = _interopRequireDefault(formatRelative_1$7);

    var _index4 = _interopRequireDefault(localize_1$7);

    var _index5 = _interopRequireDefault(match_1$7);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Bengali locale.
     * @language Bengali
     * @iso-639-2 ben
     * @author Touhidur Rahman [@touhidrahman]{@link https://github.com/touhidrahman}
     * @author Farhad Yasir [@nutboltu]{@link https://github.com/nutboltu}
     */
    var locale = {
      code: 'bn',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$8 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    /**
     * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposició de igual que si estiguessin escrits amb lletres.
     *    l'1 de juliol ('l'u')
     *    l'11 de novembre ('l'onze')
     *    l'11a clàusula del contracte ('l'onzena')
     *    la contractació d'11 jugadors ('d'onze')
     *    l'aval d'11.000 socis ('d'onze mil')
     *
     * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes
     */
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menys d'un segon",
        eleven: "menys d'onze segons",
        other: 'menys de {{count}} segons'
      },
      xSeconds: {
        one: '1 segon',
        other: '{{count}} segons'
      },
      halfAMinute: 'mig minut',
      lessThanXMinutes: {
        one: "menys d'un minut",
        eleven: "menys d'onze minuts",
        other: 'menys de {{count}} minuts'
      },
      xMinutes: {
        one: '1 minut',
        other: '{{count}} minuts'
      },
      aboutXHours: {
        one: 'aproximadament una hora',
        other: 'aproximadament {{count}} hores'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} hores'
      },
      xDays: {
        one: '1 dia',
        other: '{{count}} dies'
      },
      aboutXWeeks: {
        one: 'aproximadament una setmana',
        other: 'aproximadament {{count}} setmanes'
      },
      xWeeks: {
        one: '1 setmana',
        other: '{{count}} setmanes'
      },
      aboutXMonths: {
        one: 'aproximadament un mes',
        other: 'aproximadament {{count}} mesos'
      },
      xMonths: {
        one: '1 mes',
        other: '{{count}} mesos'
      },
      aboutXYears: {
        one: 'aproximadament un any',
        other: 'aproximadament {{count}} anys'
      },
      xYears: {
        one: '1 any',
        other: '{{count}} anys'
      },
      overXYears: {
        one: "més d'un any",
        eleven: "més d'onze anys",
        other: 'més de {{count}} anys'
      },
      almostXYears: {
        one: 'gairebé un any',
        other: 'gairebé {{count}} anys'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 11 && formatDistanceLocale[token].eleven) {
        result = formatDistanceLocale[token].eleven;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'en ' + result;
        } else {
          return 'fa ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$8 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'a les' {{time}}",
      long: "{{date}} 'a les' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$8 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'el' eeee 'passat a la' LT",
      yesterday: "'ahir a la' p",
      today: "'avui a la' p",
      tomorrow: "'demà a la' p",
      nextWeek: "eeee 'a la' p",
      other: 'P'
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'passat a les' p",
      yesterday: "'ahir a les' p",
      today: "'avui a les' p",
      tomorrow: "'demà a les' p",
      nextWeek: "eeee 'a les' p",
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }

      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$8 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * General information
     * Reference: https://aplicacions.llengua.gencat.cat
     * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html
     */

    /**
     * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
     * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
     */
    var eraValues = {
      narrow: ['aC', 'dC'],
      abbreviated: ['a. de C.', 'd. de C.'],
      wide: ['abans de Crist', 'després de Crist']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1r trimestre', '2n trimestre', '3r trimestre', '4t trimestre']
      /**
       * Dins d'un text convé fer servir la forma sencera dels mesos, ja que sempre és més clar el mot sencer que l'abreviatura, encara que aquesta sigui força coneguda.
       * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els gràfics, les taules o quadres estadístics, els textos publicitaris, etc.
       *
       * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes
       */

    };
    var monthValues = {
      narrow: ['GN', 'FB', 'MÇ', 'AB', 'MG', 'JN', 'JL', 'AG', 'ST', 'OC', 'NV', 'DS'],

      /**
       * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.
       * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.
       * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.
       */
      abbreviated: ['gen.', 'febr.', 'març', 'abr.', 'maig', 'juny', 'jul.', 'ag.', 'set.', 'oct.', 'nov.', 'des.'],
      wide: ['gener', 'febrer', 'març', 'abril', 'maig', 'juny', 'juliol', 'agost', 'setembre', 'octubre', 'novembre', 'desembre']
      /**
       * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.
       * Tot seguit porten la consonant següent a la i, excepte en el cas de dimarts, dimecres i diumenge, en què aquesta consonant és la m i, per tant, hi podria haver confusió.
       * Per evitar-ho, s'ha substituït la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.
       *
       * Seguint la norma general d'ús de les abreviatures, les dels dies de la setmana sempre porten punt final.
       * Igualment, van amb la primera lletra en majúscula quan la paraula sencera també hi aniria.
       * En canvi, van amb la primera lletra en minúscula quan la inicial de la paraula sencera també hi aniria.
       *
       * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot
       */

    };
    var dayValues = {
      narrow: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
      short: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
      abbreviated: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
      wide: ['diumenge', 'dilluns', 'dimarts', 'dimecres', 'dijous', 'divendres', 'dissabte']
      /**
       * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes
       */

    };
    var dayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'mitjanit',
        noon: 'migdia',
        morning: 'matí',
        afternoon: 'tarda',
        evening: 'vespre',
        night: 'nit'
      },
      abbreviated: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'mitjanit',
        noon: 'migdia',
        morning: 'matí',
        afternoon: 'tarda',
        evening: 'vespre',
        night: 'nit'
      },
      wide: {
        am: 'ante meridiem',
        pm: 'post meridiem',
        midnight: 'mitjanit',
        noon: 'migdia',
        morning: 'matí',
        afternoon: 'tarda',
        evening: 'vespre',
        night: 'nit'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'de la mitjanit',
        noon: 'del migdia',
        morning: 'del matí',
        afternoon: 'de la tarda',
        evening: 'del vespre',
        night: 'de la nit'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'de la mitjanit',
        noon: 'del migdia',
        morning: 'del matí',
        afternoon: 'de la tarda',
        evening: 'del vespre',
        night: 'de la nit'
      },
      wide: {
        am: 'ante meridiem',
        pm: 'post meridiem',
        midnight: 'de la mitjanit',
        noon: 'del migdia',
        morning: 'del matí',
        afternoon: 'de la tarda',
        evening: 'del vespre',
        night: 'de la nit'
      }
      /**
       * Quan van en singular, els nombres ordinals es representen, en forma d’abreviatura, amb la xifra seguida de l’última lletra del mot desplegat.
       * És optatiu posar punt després de la lletra.
       *
       * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18
       *
       * @param {Number} dirtyNumber
       * @param {Object} [_dirtyOptions]
       */

    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'r';

          case 2:
            return number + 'n';

          case 3:
            return number + 'r';

          case 4:
            return number + 't';
        }
      }

      return number + 'è';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$8 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(è|r|n|r|t)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a. de C.|d. de C.)/i,
      wide: /^(abans de Crist|despr[eé]s de Crist)/i
    };
    var parseEraPatterns = {
      narrow: [/^aC/i, /^dC/i],
      abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
      wide: [/^(abans de Crist)/i, /^(despr[eé]s de Crist)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](è|r|n|r|t)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
      abbreviated: /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
      wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^GN/i, /^FB/i, /^MÇ/i, /^AB/i, /^MG/i, /^JN/i, /^JL/i, /^AG/i, /^ST/i, /^OC/i, /^NV/i, /^DS/i],
      abbreviated: [/^gen./i, /^febr./i, /^març/i, /^abr./i, /^maig/i, /^juny/i, /^jul./i, /^ag./i, /^set./i, /^oct./i, /^nov./i, /^des./i],
      wide: [/^gener/i, /^febrer/i, /^març/i, /^abril/i, /^maig/i, /^juny/i, /^juliol/i, /^agost/i, /^setembre/i, /^octubre/i, /^novembre/i, /^desembre/i]
    };
    var matchDayPatterns = {
      narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
    };
    var parseDayPatterns = {
      narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      wide: [/^diumenge/i, /^dilluns/i, /^dimarts/i, /^dimecres/i, /^dijous/i, /^divendres/i, /^disssabte/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,
      abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,
      wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mitjanit/i,
        noon: /^migdia/i,
        morning: /matí/i,
        afternoon: /tarda/i,
        evening: /vespre/i,
        night: /nit/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ca = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$8);

    var _index2 = _interopRequireDefault(formatLong_1$8);

    var _index3 = _interopRequireDefault(formatRelative_1$8);

    var _index4 = _interopRequireDefault(localize_1$8);

    var _index5 = _interopRequireDefault(match_1$8);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Catalan locale.
     * @language Catalan
     * @iso-639-2 cat
     * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
     * @author Alex Vizcaino [@avizcaino]{@link https://github.com/avizcaino}
     */
    var locale = {
      code: 'ca',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale; // throw new Error('ca locale is currently unavailable. Please check the progress of converting this locale to v2.0.0 in this issue on Github: TBA')

    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$9 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          regular: 'méně než vteřina',
          past: 'před méně než vteřinou',
          future: 'za méně než vteřinu'
        },
        few: {
          regular: 'méně než {{count}} vteřiny',
          past: 'před méně než {{count}} vteřinami',
          future: 'za méně než {{count}} vteřiny'
        },
        many: {
          regular: 'méně než {{count}} vteřin',
          past: 'před méně než {{count}} vteřinami',
          future: 'za méně než {{count}} vteřin'
        }
      },
      xSeconds: {
        one: {
          regular: 'vteřina',
          past: 'před vteřinou',
          future: 'za vteřinu'
        },
        few: {
          regular: '{{count}} vteřiny',
          past: 'před {{count}} vteřinami',
          future: 'za {{count}} vteřiny'
        },
        many: {
          regular: '{{count}} vteřin',
          past: 'před {{count}} vteřinami',
          future: 'za {{count}} vteřin'
        }
      },
      halfAMinute: {
        other: {
          regular: 'půl minuty',
          past: 'před půl minutou',
          future: 'za půl minuty'
        }
      },
      lessThanXMinutes: {
        one: {
          regular: 'méně než minuta',
          past: 'před méně než minutou',
          future: 'za méně než minutu'
        },
        few: {
          regular: 'méně než {{count}} minuty',
          past: 'před méně než {{count}} minutami',
          future: 'za méně než {{count}} minuty'
        },
        many: {
          regular: 'méně než {{count}} minut',
          past: 'před méně než {{count}} minutami',
          future: 'za méně než {{count}} minut'
        }
      },
      xMinutes: {
        one: {
          regular: 'minuta',
          past: 'před minutou',
          future: 'za minutu'
        },
        few: {
          regular: '{{count}} minuty',
          past: 'před {{count}} minutami',
          future: 'za {{count}} minuty'
        },
        many: {
          regular: '{{count}} minut',
          past: 'před {{count}} minutami',
          future: 'za {{count}} minut'
        }
      },
      aboutXHours: {
        one: {
          regular: 'přibližně hodina',
          past: 'přibližně před hodinou',
          future: 'přibližně za hodinu'
        },
        few: {
          regular: 'přibližně {{count}} hodiny',
          past: 'přibližně před {{count}} hodinami',
          future: 'přibližně za {{count}} hodiny'
        },
        many: {
          regular: 'přibližně {{count}} hodin',
          past: 'přibližně před {{count}} hodinami',
          future: 'přibližně za {{count}} hodin'
        }
      },
      xHours: {
        one: {
          regular: 'hodina',
          past: 'před hodinou',
          future: 'za hodinu'
        },
        few: {
          regular: '{{count}} hodiny',
          past: 'před {{count}} hodinami',
          future: 'za {{count}} hodiny'
        },
        many: {
          regular: '{{count}} hodin',
          past: 'před {{count}} hodinami',
          future: 'za {{count}} hodin'
        }
      },
      xDays: {
        one: {
          regular: 'den',
          past: 'před dnem',
          future: 'za den'
        },
        few: {
          regular: '{{count}} dny',
          past: 'před {{count}} dny',
          future: 'za {{count}} dny'
        },
        many: {
          regular: '{{count}} dní',
          past: 'před {{count}} dny',
          future: 'za {{count}} dní'
        }
      },
      aboutXWeeks: {
        one: {
          regular: 'přibližně týden',
          past: 'přibližně před týdnem',
          future: 'přibližně za týden'
        },
        few: {
          regular: 'přibližně {{count}} týdny',
          past: 'přibližně před {{count}} týdny',
          future: 'přibližně za {{count}} týdny'
        },
        many: {
          regular: 'přibližně {{count}} týdnů',
          past: 'přibližně před {{count}} týdny',
          future: 'přibližně za {{count}} týdnů'
        }
      },
      xWeeks: {
        one: {
          regular: 'týden',
          past: 'před týdnem',
          future: 'za týden'
        },
        few: {
          regular: '{{count}} týdny',
          past: 'před {{count}} týdny',
          future: 'za {{count}} týdny'
        },
        many: {
          regular: '{{count}} týdnů',
          past: 'před {{count}} týdny',
          future: 'za {{count}} týdnů'
        }
      },
      aboutXMonths: {
        one: {
          regular: 'přibližně měsíc',
          past: 'přibližně před měsícem',
          future: 'přibližně za měsíc'
        },
        few: {
          regular: 'přibližně {{count}} měsíce',
          past: 'přibližně před {{count}} měsíci',
          future: 'přibližně za {{count}} měsíce'
        },
        many: {
          regular: 'přibližně {{count}} měsíců',
          past: 'přibližně před {{count}} měsíci',
          future: 'přibližně za {{count}} měsíců'
        }
      },
      xMonths: {
        one: {
          regular: 'měsíc',
          past: 'před měsícem',
          future: 'za měsíc'
        },
        few: {
          regular: '{{count}} měsíce',
          past: 'před {{count}} měsíci',
          future: 'za {{count}} měsíce'
        },
        many: {
          regular: '{{count}} měsíců',
          past: 'před {{count}} měsíci',
          future: 'za {{count}} měsíců'
        }
      },
      aboutXYears: {
        one: {
          regular: 'přibližně rok',
          past: 'přibližně před rokem',
          future: 'přibližně za rok'
        },
        few: {
          regular: 'přibližně {{count}} roky',
          past: 'přibližně před {{count}} roky',
          future: 'přibližně za {{count}} roky'
        },
        many: {
          regular: 'přibližně {{count}} roků',
          past: 'přibližně před {{count}} roky',
          future: 'přibližně za {{count}} roků'
        }
      },
      xYears: {
        one: {
          regular: 'rok',
          past: 'před rokem',
          future: 'za rok'
        },
        few: {
          regular: '{{count}} roky',
          past: 'před {{count}} roky',
          future: 'za {{count}} roky'
        },
        many: {
          regular: '{{count}} roků',
          past: 'před {{count}} roky',
          future: 'za {{count}} roků'
        }
      },
      overXYears: {
        one: {
          regular: 'více než rok',
          past: 'před více než rokem',
          future: 'za více než rok'
        },
        few: {
          regular: 'více než {{count}} roky',
          past: 'před více než {{count}} roky',
          future: 'za více než {{count}} roky'
        },
        many: {
          regular: 'více než {{count}} roků',
          past: 'před více než {{count}} roky',
          future: 'za více než {{count}} roků'
        }
      },
      almostXYears: {
        one: {
          regular: 'skoro rok',
          past: 'skoro před rokem',
          future: 'skoro za rok'
        },
        few: {
          regular: 'skoro {{count}} roky',
          past: 'skoro před {{count}} roky',
          future: 'skoro za {{count}} roky'
        },
        many: {
          regular: 'skoro {{count}} roků',
          past: 'skoro před {{count}} roky',
          future: 'skoro za {{count}} roků'
        }
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var scheme = formatDistanceLocale[token]; // cs pluralization

      var pluralToken;

      if (typeof scheme.other === 'object') {
        pluralToken = 'other';
      } else if (count === 1) {
        pluralToken = 'one';
      } else if (count > 1 && count < 5 || count === 0) {
        pluralToken = 'few';
      } else {
        pluralToken = 'many';
      } // times


      var suffixExist = options.addSuffix === true;
      var comparison = options.comparison;
      var timeToken;

      if (suffixExist && comparison === -1) {
        timeToken = 'past';
      } else if (suffixExist && comparison === 1) {
        timeToken = 'future';
      } else {
        timeToken = 'regular';
      }

      return scheme[pluralToken][timeToken].replace('{{count}}', count);
    }

    module.exports = exports.default;
    });

    var formatLong_1$9 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d. MMMM yyyy',
      long: 'd. MMMM yyyy',
      medium: 'd. M. yyyy',
      short: 'dd.MM.yyyy'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'v' {{time}}",
      long: "{{date}} 'v' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$9 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var accusativeWeekdays = ['neděli', 'pondělí', 'úterý', 'středu', 'čtvrtek', 'pátek', 'sobotu'];
    var formatRelativeLocale = {
      lastWeek: "'poslední' eeee 've' p",
      yesterday: "'včera v' p",
      today: "'dnes v' p",
      tomorrow: "'zítra v' p",
      nextWeek: function (date, _baseDate, _options) {
        var day = date.getUTCDay();
        return "'v " + accusativeWeekdays[day] + " o' p";
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$9 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['př. n. l.', 'n. l.'],
      abbreviated: ['př. n. l.', 'n. l.'],
      wide: ['před naším letopočtem', 'našeho letopočtu']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí'],
      wide: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí']
    };
    var monthValues = {
      narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
      abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
      wide: ['leden', 'únor', 'březen', 'duben', 'květen', 'červen', 'červenec', 'srpen', 'září', 'říjen', 'listopad', 'prosinec']
    };
    var formattingMonthValues = {
      narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
      abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
      wide: ['ledna', 'února', 'března', 'dubna', 'května', 'června', 'července', 'srpna', 'září', 'října', 'listopadu', 'prosince']
    };
    var dayValues = {
      narrow: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
      short: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
      abbreviated: ['ned', 'pon', 'úte', 'stř', 'čtv', 'pát', 'sob'],
      wide: ['neděle', 'pondělí', 'úterý', 'středa', 'čtvrtek', 'pátek', 'sobota']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'dop.',
        pm: 'odp.',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      },
      abbreviated: {
        am: 'dop.',
        pm: 'odp.',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      },
      wide: {
        am: 'dopoledne',
        pm: 'odpoledne',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'dop.',
        pm: 'odp.',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      },
      abbreviated: {
        am: 'dop.',
        pm: 'odp.',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      },
      wide: {
        am: 'dopoledne',
        pm: 'odpoledne',
        midnight: 'půlnoc',
        noon: 'poledne',
        morning: 'ráno',
        afternoon: 'odpoledne',
        evening: 'večer',
        night: 'noc'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$9 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p[řr]ed Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(pe[řr]ed Kr\.|pe[řr]ed n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(p[řr]ed Kristem|pred na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
    };
    var parseEraPatterns = {
      any: [/^p[řr]/i, /^(po|n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
      wide: /^[1234]\. [čc]tvrtlet[íi]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[lúubdkčcszřrlp]/i,
      abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
      wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
    };
    var parseMonthPatterns = {
      narrow: [/^l/i, /^[úu]/i, /^b/i, /^d/i, /^k/i, /^[čc]/i, /^[čc]/i, /^s/i, /^z/i, /^[řr]/i, /^l/i, /^p/i],
      any: [/^led/i, /^[úu]n/i, /^b[řr]e/i, /^dub/i, /^kv[ěe]/i, /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i, /^[čc]vc|[čc]erven(ec|ce)/i, /^srp/i, /^z[áa][řr]/i, /^[řr][íi]j/i, /^lis/i, /^pro/i]
    };
    var matchDayPatterns = {
      narrow: /^[npuúsčps]/i,
      short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
      abbreviated: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
      wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^[úu]/i, /^s/i, /^[čc]/i, /^p/i, /^s/i],
      any: [/^ne/i, /^po/i, /^ut/i, /^st/i, /^[čc]t/i, /^p/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      any: /^dopoledne|dop\.?|odpoledne|odp\.?|půlnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^dop/i,
        pm: /^odp/i,
        midnight: /^p[ůu]lnoc/i,
        noon: /^poledne/i,
        morning: /r[áa]no/i,
        afternoon: /odpoledne/i,
        evening: /ve[čc]er/i,
        night: /noc/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var cs = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$9);

    var _index2 = _interopRequireDefault(formatLong_1$9);

    var _index3 = _interopRequireDefault(formatRelative_1$9);

    var _index4 = _interopRequireDefault(localize_1$9);

    var _index5 = _interopRequireDefault(match_1$9);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Czech locale.
     * @language Czech
     * @iso-639-2 ces
     * @author David Rus [@davidrus]{@link https://github.com/davidrus}
     * @author Pavel Hrách [@SilenY]{@link https://github.com/SilenY}
     * @author Jozef Bíroš [@JozefBiros]{@link https://github.com/JozefBiros}
     */
    var locale = {
      code: 'cs',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'llai na eiliad',
        other: 'llai na {{count}} eiliad'
      },
      xSeconds: {
        one: '1 eiliad',
        other: '{{count}} eiliad'
      },
      halfAMinute: 'hanner munud',
      lessThanXMinutes: {
        one: 'llai na munud',
        two: 'llai na 2 funud',
        other: 'llai na {{count}} munud'
      },
      xMinutes: {
        one: '1 munud',
        two: '2 funud',
        other: '{{count}} munud'
      },
      aboutXHours: {
        one: 'tua 1 awr',
        other: 'tua {{count}} awr'
      },
      xHours: {
        one: '1 awr',
        other: '{{count}} awr'
      },
      xDays: {
        one: '1 diwrnod',
        two: '2 ddiwrnod',
        other: '{{count}} diwrnod'
      },
      aboutXWeeks: {
        one: 'tua 1 wythnos',
        two: 'tua pythefnos',
        other: 'tua {{count}} wythnos'
      },
      xWeeks: {
        one: '1 wythnos',
        two: 'pythefnos',
        other: '{{count}} wythnos'
      },
      aboutXMonths: {
        one: 'tua 1 mis',
        two: 'tua 2 fis',
        other: 'tua {{count}} mis'
      },
      xMonths: {
        one: '1 mis',
        two: '2 fis',
        other: '{{count}} mis'
      },
      aboutXYears: {
        one: 'tua 1 flwyddyn',
        two: 'tua 2 flynedd',
        other: 'tua {{count}} mlynedd'
      },
      xYears: {
        one: '1 flwyddyn',
        two: '2 flynedd',
        other: '{{count}} mlynedd'
      },
      overXYears: {
        one: 'dros 1 flwyddyn',
        two: 'dros 2 flynedd',
        other: 'dros {{count}} mlynedd'
      },
      almostXYears: {
        one: 'bron 1 flwyddyn',
        two: 'bron 2 flynedd',
        other: 'bron {{count}} mlynedd'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2 && !!formatDistanceLocale[token].two) {
        result = formatDistanceLocale[token].two;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'mewn ' + result;
        } else {
          return result + ' yn ôl';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'am' {{time}}",
      long: "{{date}} 'am' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'diwethaf am' p",
      yesterday: "'ddoe am' p",
      today: "'heddiw am' p",
      tomorrow: "'yfory am' p",
      nextWeek: "eeee 'am' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['C', 'O'],
      abbreviated: ['CC', 'OC'],
      wide: ['Cyn Crist', 'Ar ôl Crist']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Ch1', 'Ch2', 'Ch3', 'Ch4'],
      wide: ['Chwarter 1af', '2ail chwarter', '3ydd chwarter', '4ydd chwarter'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['I', 'Ch', 'Ma', 'E', 'Mi', 'Me', 'G', 'A', 'Md', 'H', 'T', 'Rh'],
      abbreviated: ['Ion', 'Chwe', 'Maw', 'Ebr', 'Mai', 'Meh', 'Gor', 'Aws', 'Med', 'Hyd', 'Tach', 'Rhag'],
      wide: ['Ionawr', 'Chwefror', 'Mawrth', 'Ebrill', 'Mai', 'Mehefin', 'Gorffennaf', 'Awst', 'Medi', 'Hydref', 'Tachwedd', 'Rhagfyr']
    };
    var dayValues = {
      narrow: ['S', 'Ll', 'M', 'M', 'I', 'G', 'S'],
      short: ['Su', 'Ll', 'Ma', 'Me', 'Ia', 'Gw', 'Sa'],
      abbreviated: ['Sul', 'Llun', 'Maw', 'Mer', 'Iau', 'Gwe', 'Sad'],
      wide: ['dydd Sul', 'dydd Llun', 'dydd Mawrth', 'dydd Mercher', 'dydd Iau', 'dydd Gwener', 'dydd Sadwrn']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'b',
        pm: 'h',
        midnight: 'hn',
        noon: 'hd',
        morning: 'bore',
        afternoon: 'prynhawn',
        evening: "gyda'r nos",
        night: 'nos'
      },
      abbreviated: {
        am: 'yb',
        pm: 'yh',
        midnight: 'hanner nos',
        noon: 'hanner dydd',
        morning: 'bore',
        afternoon: 'prynhawn',
        evening: "gyda'r nos",
        night: 'nos'
      },
      wide: {
        am: 'y.b.',
        pm: 'y.h.',
        midnight: 'hanner nos',
        noon: 'hanner dydd',
        morning: 'bore',
        afternoon: 'prynhawn',
        evening: "gyda'r nos",
        night: 'nos'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'b',
        pm: 'h',
        midnight: 'hn',
        noon: 'hd',
        morning: 'yn y bore',
        afternoon: 'yn y prynhawn',
        evening: "gyda'r nos",
        night: 'yn y nos'
      },
      abbreviated: {
        am: 'yb',
        pm: 'yh',
        midnight: 'hanner nos',
        noon: 'hanner dydd',
        morning: 'yn y bore',
        afternoon: 'yn y prynhawn',
        evening: "gyda'r nos",
        night: 'yn y nos'
      },
      wide: {
        am: 'y.b.',
        pm: 'y.h.',
        midnight: 'hanner nos',
        noon: 'hanner dydd',
        morning: 'yn y bore',
        afternoon: 'yn y prynhawn',
        evening: "gyda'r nos",
        night: 'yn y nos'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);

      if (number < 20) {
        switch (number) {
          case 0:
            return number + 'fed';

          case 1:
            return number + 'af';

          case 2:
            return number + 'ail';

          case 3:
          case 4:
            return number + 'ydd';

          case 5:
          case 6:
            return number + 'ed';

          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 15:
          case 18:
            return number + 'fed';

          case 11:
          case 13:
          case 14:
          case 16:
          case 17:
          case 19:
            return number + 'eg';
        }
      } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
        return number + 'fed';
      }

      return number + 'ain';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(c|o)/i,
      abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
      wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
    };
    var parseEraPatterns = {
      wide: [/^c/i, /^(ar ôl crist|ar ol crist)/i],
      any: [/^c/i, /^o/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ch[1234]/i,
      wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
      abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
      wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
    };
    var parseMonthPatterns = {
      narrow: [/^i/i, /^ch/i, /^m/i, /^e/i, /^m/i, /^m/i, /^g/i, /^a/i, /^m/i, /^h/i, /^t/i, /^rh/i],
      any: [/^io/i, /^ch/i, /^maw/i, /^e/i, /^mai/i, /^meh/i, /^g/i, /^a/i, /^med/i, /^h/i, /^t/i, /^rh/i]
    };
    var matchDayPatterns = {
      narrow: /^(s|ll|m|i|g)/i,
      short: /^(su|ll|ma|me|ia|gw|sa)/i,
      abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
      wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
      wide: [/^dydd su/i, /^dydd ll/i, /^dydd ma/i, /^dydd me/i, /^dydd i/i, /^dydd g/i, /^dydd sa/i],
      any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
      any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^b|(y\.?\s?b\.?)/i,
        pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
        midnight: /^hn|hanner nos/i,
        noon: /^hd|hanner dydd/i,
        morning: /bore/i,
        afternoon: /prynhawn/i,
        evening: /^gyda'r nos$/i,
        night: /blah/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var cy = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$a);

    var _index2 = _interopRequireDefault(formatLong_1$a);

    var _index3 = _interopRequireDefault(formatRelative_1$a);

    var _index4 = _interopRequireDefault(localize_1$a);

    var _index5 = _interopRequireDefault(match_1$a);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Welsh locale.
     * @language Welsh
     * @iso-639-2 cym
     * @author Elwyn Malethan [@elmomalmo]{@link https://github.com/elmomalmo}
     */
    var locale = {
      code: 'cy',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'mindre end ét sekund',
        other: 'mindre end {{count}} sekunder'
      },
      xSeconds: {
        one: '1 sekund',
        other: '{{count}} sekunder'
      },
      halfAMinute: 'ét halvt minut',
      lessThanXMinutes: {
        one: 'mindre end ét minut',
        other: 'mindre end {{count}} minutter'
      },
      xMinutes: {
        one: '1 minut',
        other: '{{count}} minutter'
      },
      aboutXHours: {
        one: 'cirka 1 time',
        other: 'cirka {{count}} timer'
      },
      xHours: {
        one: '1 time',
        other: '{{count}} timer'
      },
      xDays: {
        one: '1 dag',
        other: '{{count}} dage'
      },
      aboutXWeeks: {
        one: 'cirka 1 uge',
        other: 'cirka {{count}} uger'
      },
      xWeeks: {
        one: '1 uge',
        other: '{{count}} uger'
      },
      aboutXMonths: {
        one: 'cirka 1 måned',
        other: 'cirka {{count}} måneder'
      },
      xMonths: {
        one: '1 måned',
        other: '{{count}} måneder'
      },
      aboutXYears: {
        one: 'cirka 1 år',
        other: 'cirka {{count}} år'
      },
      xYears: {
        one: '1 år',
        other: '{{count}} år'
      },
      overXYears: {
        one: 'over 1 år',
        other: 'over {{count}} år'
      },
      almostXYears: {
        one: 'næsten 1 år',
        other: 'næsten {{count}} år'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'om ' + result;
        } else {
          return result + ' siden';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE 'den' d. MMMM y",
      long: 'd. MMMM y',
      medium: 'd. MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl'. {{time}}",
      long: "{{date}} 'kl'. {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'sidste' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "'på' eeee 'kl.' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['fvt', 'vt'],
      abbreviated: ['f.v.t.', 'v.t.'],
      wide: ['før vesterlandsk tidsregning', 'vesterlandsk tidsregning']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1. kvt.', '2. kvt.', '3. kvt.', '4. kvt.'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
      wide: ['januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december'] // Note that 'Days - abbreviated - Formatting' has periods at the end.
      // https://www.unicode.org/cldr/charts/32/summary/da.html#1760
      // This makes grammatical sense in danish, as most abbreviations have periods.

    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
      short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
      abbreviated: ['søn.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'lør.'],
      wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'morgen',
        afternoon: 'eftermiddag',
        evening: 'aften',
        night: 'nat'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'morgen',
        afternoon: 'eftermiddag',
        evening: 'aften',
        night: 'nat'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'morgen',
        afternoon: 'eftermiddag',
        evening: 'aften',
        night: 'nat'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'om morgenen',
        afternoon: 'om eftermiddagen',
        evening: 'om aftenen',
        night: 'om natten'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'om morgenen',
        afternoon: 'om eftermiddagen',
        evening: 'om aftenen',
        night: 'om natten'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnat',
        noon: 'middag',
        morning: 'om morgenen',
        afternoon: 'om eftermiddagen',
        evening: 'om aftenen',
        night: 'om natten'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(fKr|fvt|eKr|vt)/i,
      abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
      wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^(v|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]. kvt\./i,
      wide: /^[1234]\.? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
      abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
      wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
      any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /midnat/i,
        noon: /middag/i,
        morning: /morgen/i,
        afternoon: /eftermiddag/i,
        evening: /aften/i,
        night: /nat/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var da = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$b);

    var _index2 = _interopRequireDefault(formatLong_1$b);

    var _index3 = _interopRequireDefault(formatRelative_1$b);

    var _index4 = _interopRequireDefault(localize_1$b);

    var _index5 = _interopRequireDefault(match_1$b);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Danish locale.
     * @language Danish
     * @iso-639-2 dan
     * @author Mathias Wøbbe [@MathiasKandelborg]{@link https://github.com/MathiasKandelborg}
     * @author Anders B. Hansen [@Andersbiha]{@link https://github.com/Andersbiha}
     * @author [@kgram]{@link https://github.com/kgram}
     * @author [@stefanbugge]{@link https://github.com/stefanbugge}
     */
    var locale = {
      code: 'da',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: 'weniger als eine Sekunde',
          other: 'weniger als {{count}} Sekunden'
        },
        withPreposition: {
          one: 'weniger als einer Sekunde',
          other: 'weniger als {{count}} Sekunden'
        }
      },
      xSeconds: {
        standalone: {
          one: 'eine Sekunde',
          other: '{{count}} Sekunden'
        },
        withPreposition: {
          one: 'einer Sekunde',
          other: '{{count}} Sekunden'
        }
      },
      halfAMinute: {
        standalone: 'eine halbe Minute',
        withPreposition: 'einer halben Minute'
      },
      lessThanXMinutes: {
        standalone: {
          one: 'weniger als eine Minute',
          other: 'weniger als {{count}} Minuten'
        },
        withPreposition: {
          one: 'weniger als einer Minute',
          other: 'weniger als {{count}} Minuten'
        }
      },
      xMinutes: {
        standalone: {
          one: 'eine Minute',
          other: '{{count}} Minuten'
        },
        withPreposition: {
          one: 'einer Minute',
          other: '{{count}} Minuten'
        }
      },
      aboutXHours: {
        standalone: {
          one: 'etwa eine Stunde',
          other: 'etwa {{count}} Stunden'
        },
        withPreposition: {
          one: 'etwa einer Stunde',
          other: 'etwa {{count}} Stunden'
        }
      },
      xHours: {
        standalone: {
          one: 'eine Stunde',
          other: '{{count}} Stunden'
        },
        withPreposition: {
          one: 'einer Stunde',
          other: '{{count}} Stunden'
        }
      },
      xDays: {
        standalone: {
          one: 'ein Tag',
          other: '{{count}} Tage'
        },
        withPreposition: {
          one: 'einem Tag',
          other: '{{count}} Tagen'
        }
      },
      aboutXWeeks: {
        standalone: {
          one: 'etwa ein Woche',
          other: 'etwa {{count}} Wochen'
        },
        withPreposition: {
          one: 'etwa einem Woche',
          other: 'etwa {{count}} Wochen'
        }
      },
      xWeeks: {
        standalone: {
          one: 'ein Woche',
          other: '{{count}} Wochen'
        },
        withPreposition: {
          one: 'einem Woche',
          other: '{{count}} Wochen'
        }
      },
      aboutXMonths: {
        standalone: {
          one: 'etwa ein Monat',
          other: 'etwa {{count}} Monate'
        },
        withPreposition: {
          one: 'etwa einem Monat',
          other: 'etwa {{count}} Monaten'
        }
      },
      xMonths: {
        standalone: {
          one: 'ein Monat',
          other: '{{count}} Monate'
        },
        withPreposition: {
          one: 'einem Monat',
          other: '{{count}} Monaten'
        }
      },
      aboutXYears: {
        standalone: {
          one: 'etwa ein Jahr',
          other: 'etwa {{count}} Jahre'
        },
        withPreposition: {
          one: 'etwa einem Jahr',
          other: 'etwa {{count}} Jahren'
        }
      },
      xYears: {
        standalone: {
          one: 'ein Jahr',
          other: '{{count}} Jahre'
        },
        withPreposition: {
          one: 'einem Jahr',
          other: '{{count}} Jahren'
        }
      },
      overXYears: {
        standalone: {
          one: 'mehr als ein Jahr',
          other: 'mehr als {{count}} Jahre'
        },
        withPreposition: {
          one: 'mehr als einem Jahr',
          other: 'mehr als {{count}} Jahren'
        }
      },
      almostXYears: {
        standalone: {
          one: 'fast ein Jahr',
          other: 'fast {{count}} Jahre'
        },
        withPreposition: {
          one: 'fast einem Jahr',
          other: 'fast {{count}} Jahren'
        }
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var usageGroup = options.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      var result;

      if (typeof usageGroup === 'string') {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return 'vor ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
    var dateFormats = {
      full: 'EEEE, do MMMM y',
      // Montag, 7. Januar 2018
      long: 'do MMMM y',
      // 7. Januar 2018
      medium: 'do MMM. y',
      // 7. Jan. 2018
      short: 'dd.MM.y' // 07.01.2018

    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'um' {{time}}",
      long: "{{date}} 'um' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'letzten' eeee 'um' p",
      yesterday: "'gestern um' p",
      today: "'heute um' p",
      tomorrow: "'morgen um' p",
      nextWeek: "eeee 'um' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['v.Chr.', 'n.Chr.'],
      abbreviated: ['v.Chr.', 'n.Chr.'],
      wide: ['vor Christus', 'nach Christus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal'] // Note: in German, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
      wide: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
      short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
      abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
      wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'] // https://www.unicode.org/cldr/charts/32/summary/de.html#1881

    };
    var dayPeriodValues = {
      narrow: {
        am: 'vm.',
        pm: 'nm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachm.',
        evening: 'Abend',
        night: 'Nacht'
      },
      abbreviated: {
        am: 'vorm.',
        pm: 'nachm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachmittag',
        evening: 'Abend',
        night: 'Nacht'
      },
      wide: {
        am: 'vormittags',
        pm: 'nachmittags',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachmittag',
        evening: 'Abend',
        night: 'Nacht'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'vm.',
        pm: 'nm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachm.',
        evening: 'abends',
        night: 'nachts'
      },
      abbreviated: {
        am: 'vorm.',
        pm: 'nachm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachmittags',
        evening: 'abends',
        night: 'nachts'
      },
      wide: {
        am: 'vormittags',
        pm: 'nachmittags',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachmittags',
        evening: 'abends',
        night: 'nachts'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
    };
    var parseEraPatterns = {
      any: [/^v/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? Quartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mär|apr|mai|jun|jul|aug|sep|okt|nov|dez)/i,
      wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smdmf]/i,
      short: /^(so|mo|di|mi|do|fr|sa)/i,
      abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
      wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
    };
    var parseDayPatterns = {
      any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^v/i,
        pm: /^n/i,
        midnight: /^Mitte/i,
        noon: /^Mitta/i,
        morning: /morgens/i,
        afternoon: /nachmittags/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /abends/i,
        night: /nachts/i // will never be matched. Night is matched by `pm`

      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var de = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$c);

    var _index2 = _interopRequireDefault(formatLong_1$c);

    var _index3 = _interopRequireDefault(formatRelative_1$c);

    var _index4 = _interopRequireDefault(localize_1$c);

    var _index5 = _interopRequireDefault(match_1$c);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary German locale.
     * @language German
     * @iso-639-2 deu
     * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
     * @author Asia [@asia-t]{@link https://github.com/asia-t}
     * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
     * @author RomanErnst [@pex]{@link https://github.com/pex}
     * @author Philipp Keck [@Philipp91]{@link https://github.com/Philipp91}
     */
    var locale = {
      code: 'de',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$d = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'λιγότερο από ένα δευτερόλεπτο',
        other: 'λιγότερο από {{count}} δευτερόλεπτα'
      },
      xSeconds: {
        one: '1 δευτερόλεπτο',
        other: '{{count}} δευτερόλεπτα'
      },
      halfAMinute: 'μισό λεπτό',
      lessThanXMinutes: {
        one: 'λιγότερο από ένα λεπτό',
        other: 'λιγότερο από {{count}} λεπτά'
      },
      xMinutes: {
        one: '1 λεπτό',
        other: '{{count}} λεπτά'
      },
      aboutXHours: {
        one: 'περίπου 1 ώρα',
        other: 'περίπου {{count}} ώρες'
      },
      xHours: {
        one: '1 ώρα',
        other: '{{count}} ώρες'
      },
      xDays: {
        one: '1 ημέρα',
        other: '{{count}} ημέρες'
      },
      aboutXWeeks: {
        one: 'περίπου 1 εβδομάδα',
        other: 'περίπου {{count}} εβδομάδες'
      },
      xWeeks: {
        one: '1 εβδομάδα',
        other: '{{count}} εβδομάδες'
      },
      aboutXMonths: {
        one: 'περίπου 1 μήνας',
        other: 'περίπου {{count}} μήνες'
      },
      xMonths: {
        one: '1 μήνας',
        other: '{{count}} μήνες'
      },
      aboutXYears: {
        one: 'περίπου 1 χρόνο',
        other: 'περίπου {{count}} χρόνια'
      },
      xYears: {
        one: '1 χρόνο',
        other: '{{count}} χρόνια'
      },
      overXYears: {
        one: 'πάνω από 1 χρόνο',
        other: 'πάνω από {{count}} χρόνια'
      },
      almostXYears: {
        one: 'περίπου 1 χρόνο',
        other: 'περίπου {{count}} χρόνια'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'σε ' + result;
        } else {
          return result + ' πριν';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$d = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'd/M/yy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: '{{date}} - {{time}}',
      long: '{{date}} - {{time}}',
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$d = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        switch (date.getUTCDay()) {
          case 6:
            //Σάββατο
            return "'το προηγούμενο' eeee 'στις' p";

          default:
            return "'την προηγούμενη' eeee 'στις' p";
        }
      },
      yesterday: "'χθες στις' p",
      today: "'σήμερα στις' p",
      tomorrow: "'αύριο στις' p",
      nextWeek: "eeee 'στις' p",
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];
      if (typeof format === 'function') return format(date, baseDate, options);
      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$d = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['πΧ', 'μΧ'],
      abbreviated: ['π.Χ.', 'μ.Χ.'],
      wide: ['προ Χριστού', 'μετά Χριστόν']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Τ1', 'Τ2', 'Τ3', 'Τ4'],
      wide: ['1ο τρίμηνο', '2ο τρίμηνο', '3ο τρίμηνο', '4ο τρίμηνο']
    };
    var monthValues = {
      narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
      abbreviated: ['Ιαν', 'Φεβ', 'Μάρ', 'Απρ', 'Μάι', 'Ιούν', 'Ιούλ', 'Αύγ', 'Σεπ', 'Οκτ', 'Νοέ', 'Δεκ'],
      wide: ['Ιανουάριος', 'Φεβρουάριος', 'Μάρτιος', 'Απρίλιος', 'Μάιος', 'Ιούνιος', 'Ιούλιος', 'Αύγουστος', 'Σεπτέμβριος', 'Οκτώβριος', 'Νοέμβριος', 'Δεκέμβριος']
    };
    var formattingMonthValues = {
      narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
      abbreviated: ['Ιαν', 'Φεβ', 'Μαρ', 'Απρ', 'Μαΐ', 'Ιουν', 'Ιουλ', 'Αυγ', 'Σεπ', 'Οκτ', 'Νοε', 'Δεκ'],
      wide: ['Ιανουαρίου', 'Φεβρουαρίου', 'Μαρτίου', 'Απριλίου', 'Μαΐου', 'Ιουνίου', 'Ιουλίου', 'Αυγούστου', 'Σεπτεμβρίου', 'Οκτωβρίου', 'Νοεμβρίου', 'Δεκεμβρίου']
    };
    var dayValues = {
      narrow: ['Κ', 'Δ', 'T', 'Τ', 'Π', 'Π', 'Σ'],
      short: ['Κυ', 'Δε', 'Τρ', 'Τε', 'Πέ', 'Πα', 'Σά'],
      abbreviated: ['Κυρ', 'Δευ', 'Τρί', 'Τετ', 'Πέμ', 'Παρ', 'Σάβ'],
      wide: ['Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'πμ',
        pm: 'μμ',
        midnight: 'μεσάνυχτα',
        noon: 'μεσημέρι',
        morning: 'πρωί',
        afternoon: 'απόγευμα',
        evening: 'βράδυ',
        night: 'νύχτα'
      },
      abbreviated: {
        am: 'π.μ.',
        pm: 'μ.μ.',
        midnight: 'μεσάνυχτα',
        noon: 'μεσημέρι',
        morning: 'πρωί',
        afternoon: 'απόγευμα',
        evening: 'βράδυ',
        night: 'νύχτα'
      },
      wide: {
        am: 'π.μ.',
        pm: 'μ.μ.',
        midnight: 'μεσάνυχτα',
        noon: 'μεσημέρι',
        morning: 'πρωί',
        afternoon: 'απόγευμα',
        evening: 'βράδυ',
        night: 'νύχτα'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var suffix;

      if (unit === 'year' || unit === 'month') {
        suffix = 'ος';
      } else if (unit === 'week' || unit === 'dayOfYear' || unit === 'day' || unit === 'hour' || unit === 'date') {
        suffix = 'η';
      } else {
        suffix = 'ο';
      }

      return dirtyNumber + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$d = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ος|η|ο)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(πΧ|μΧ)/i,
      abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
      wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
    };
    var parseEraPatterns = {
      any: [/^π/i, /^(μ|κ)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^τ[1234]/i,
      wide: /^[1234]ο? τρ(ί|ι)μηνο/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[ιφμαμιιασονδ]/i,
      abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
      wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ι/i, /^φ/i, /^μ/i, /^α/i, /^μ/i, /^ι/i, /^ι/i, /^α/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i],
      any: [/^ια/i, /^φ/i, /^μ[άα]ρ/i, /^απ/i, /^μ[άα][ιΐ]/i, /^ιο[ύυ]ν/i, /^ιο[ύυ]λ/i, /^α[ύυ]/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i]
    };
    var matchDayPatterns = {
      narrow: /^[κδτπσ]/i,
      short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
      abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
      wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
    };
    var parseDayPatterns = {
      narrow: [/^κ/i, /^δ/i, /^τ/i, /^τ/i, /^π/i, /^π/i, /^σ/i],
      any: [/^κ/i, /^δ/i, /^τρ/i, /^τε/i, /^π[εέ]/i, /^π[αά]/i, /^σ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
      any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^πμ|π\.\s?μ\./i,
        pm: /^μμ|μ\.\s?μ\./i,
        midnight: /^μεσάν/i,
        noon: /^μεσημ(έ|ε)/i,
        morning: /πρω(ί|ι)/i,
        afternoon: /απ(ό|ο)γευμα/i,
        evening: /βρ(ά|α)δυ/i,
        night: /ν(ύ|υ)χτα/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var el = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$d);

    var _index2 = _interopRequireDefault(formatLong_1$d);

    var _index3 = _interopRequireDefault(formatRelative_1$d);

    var _index4 = _interopRequireDefault(localize_1$d);

    var _index5 = _interopRequireDefault(match_1$d);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Greek locale.
     * @language Greek
     * @iso-639-2 ell
     * @author Fanis Katsimpas [@fanixk]{@link https://github.com/fanixk}
     * @author Theodoros Orfanidis [@teoulas]{@link https://github.com/teoulas}
     */
    var locale = {
      code: 'el',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$e = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$e = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$e = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$e = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';

          case 2:
            return number + 'nd';

          case 3:
            return number + 'rd';
        }
      }

      return number + 'th';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$e = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enAU = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$e);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (Australia).
     * @language English
     * @iso-639-2 eng
     * @author Julien Malige [@JulienMalige]{@link https://github.com/JulienMalige}
     */
    var locale = {
      code: 'en-AU',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$f = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: 'a second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: 'a minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about an hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: 'an hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: 'a day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about a week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: 'a week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about a month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: 'a month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about a year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: 'a year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over a year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost a year',
        other: 'almost {{count}} years'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$f = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, yyyy',
      long: 'MMMM do, yyyy',
      medium: 'MMM d, yyyy',
      short: 'yyyy-MM-dd'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enCA = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$f);

    var _index2 = _interopRequireDefault(formatLong_1$f);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (Canada).
     * @language English
     * @iso-639-2 eng
     * @author Mark Owsiak [@markowsiak]{@link https://github.com/markowsiak}
     * @author Marco Imperatore [@mimperatore]{@link https://github.com/mimperatore}
     */
    var locale = {
      code: 'en-CA',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$g = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enGB = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$g);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United Kingdom).
     * @language English
     * @iso-639-2 eng
     * @author Alex [@glintik]{@link https://github.com/glintik}
     */
    var locale = {
      code: 'en-GB',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$h = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM, yyyy',
      medium: 'd MMM, yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enIN = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$h);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (India).
     * @language English
     * @iso-639-2 eng
     * @author Galeel Bhasha Satthar [@gbhasha]{@link https://github.com/gbhasha}
     */
    var locale = {
      code: 'en-IN',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1,
        // Monday is the first day of the week.
        firstWeekContainsDate: 4 // The week that contains Jan 4th is the first week of the year.

      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$i = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enNZ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$i);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (New Zealand).
     * @language English
     * @iso-639-2 eng
     * @author Murray Lucas [@muntact]{@link https://github.com/muntact}
     */
    var locale = {
      code: 'en-NZ',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$j = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enUS = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$j);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'en-US',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$k = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var enZA = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$e);

    var _index2 = _interopRequireDefault(formatLong_1$k);

    var _index3 = _interopRequireDefault(formatRelative_1$e);

    var _index4 = _interopRequireDefault(localize_1$e);

    var _index5 = _interopRequireDefault(match_1$e);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (South Africa).
     * @language English
     * @iso-639-2 eng
     * @author Shaila Kavrakova [@shaykav]{@link https://github.com/shaykav}
     */
    var locale = {
      code: 'en-ZA',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0,
        // Sunday is the first day of the week.
        firstWeekContainsDate: 1 // The week that contains Jan 1st is the first week of the year.

      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$g = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'malpli ol sekundo',
        other: 'malpli ol {{count}} sekundoj'
      },
      xSeconds: {
        one: '1 sekundo',
        other: '{{count}} sekundoj'
      },
      halfAMinute: 'duonminuto',
      lessThanXMinutes: {
        one: 'malpli ol minuto',
        other: 'malpli ol {{count}} minutoj'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutoj'
      },
      aboutXHours: {
        one: 'proksimume 1 horo',
        other: 'proksimume {{count}} horoj'
      },
      xHours: {
        one: '1 horo',
        other: '{{count}} horoj'
      },
      xDays: {
        one: '1 tago',
        other: '{{count}} tagoj'
      },
      aboutXMonths: {
        one: 'proksimume 1 monato',
        other: 'proksimume {{count}} monatoj'
      },
      xWeeks: {
        one: '1 semajno',
        other: '{{count}} semajnoj'
      },
      aboutXWeeks: {
        one: 'proksimume 1 semajno',
        other: 'proksimume {{count}} semajnoj'
      },
      xMonths: {
        one: '1 monato',
        other: '{{count}} monatoj'
      },
      aboutXYears: {
        one: 'proksimume 1 jaro',
        other: 'proksimume {{count}} jaroj'
      },
      xYears: {
        one: '1 jaro',
        other: '{{count}} jaroj'
      },
      overXYears: {
        one: 'pli ol 1 jaro',
        other: 'pli ol {{count}} jaroj'
      },
      almostXYears: {
        one: 'preskaŭ 1 jaro',
        other: 'preskaŭ {{count}} jaroj'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'post ' + result;
        } else {
          return 'antaŭ ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$l = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, do 'de' MMMM y",
      long: 'y-MMMM-dd',
      medium: 'y-MMM-dd',
      short: 'yyyy-MM-dd'
    };
    var timeFormats = {
      full: "Ho 'horo kaj' m:ss zzzz",
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      any: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$f = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'pasinta' eeee 'je' p",
      yesterday: "'hieraŭ je' p",
      today: "'hodiaŭ je' p",
      tomorrow: "'morgaŭ je' p",
      nextWeek: "eeee 'je' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$f = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['aK', 'pK'],
      abbreviated: ['a.K.E.', 'p.K.E.'],
      wide: ['antaŭ Komuna Erao', 'Komuna Erao']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1-a kvaronjaro', '2-a kvaronjaro', '3-a kvaronjaro', '4-a kvaronjaro']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aŭg', 'sep', 'okt', 'nov', 'dec'],
      wide: ['januaro', 'februaro', 'marto', 'aprilo', 'majo', 'junio', 'julio', 'aŭgusto', 'septembro', 'oktobro', 'novembro', 'decembro']
    };
    var dayValues = {
      narrow: ['D', 'L', 'M', 'M', 'Ĵ', 'V', 'S'],
      short: ['di', 'lu', 'ma', 'me', 'ĵa', 've', 'sa'],
      abbreviated: ['dim', 'lun', 'mar', 'mer', 'ĵaŭ', 'ven', 'sab'],
      wide: ['dimanĉo', 'lundo', 'mardo', 'merkredo', 'ĵaŭdo', 'vendredo', 'sabato']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'noktomezo',
        noon: 'tagmezo',
        morning: 'matene',
        afternoon: 'posttagmeze',
        evening: 'vespere',
        night: 'nokte'
      },
      abbreviated: {
        am: 'a.t.m.',
        pm: 'p.t.m.',
        midnight: 'noktomezo',
        noon: 'tagmezo',
        morning: 'matene',
        afternoon: 'posttagmeze',
        evening: 'vespere',
        night: 'nokte'
      },
      wide: {
        am: 'antaŭtagmeze',
        pm: 'posttagmeze',
        midnight: 'noktomezo',
        noon: 'tagmezo',
        morning: 'matene',
        afternoon: 'posttagmeze',
        evening: 'vespere',
        night: 'nokte'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '-a';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$f = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?a)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([ap]k)/i,
      abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
      wide: /^((antaǔ |post )?komuna erao)/i
    };
    var parseEraPatterns = {
      any: [/^a/i, /^[kp]/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^k[1234]/i,
      wide: /^[1234](-?a)? kvaronjaro/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(ŭ|ux|uh|u)g|sep|okt|nov|dec)/i,
      wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(ŭ|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^a(u|ŭ)/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmĵjvs]/i,
      short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,
      wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ĵ)/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ĵ)/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      wide: /^(anta(ŭ|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^noktom/i,
        noon: /^t/i,
        morning: /^m/i,
        afternoon: /^posttagmeze/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var eo = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$g);

    var _index2 = _interopRequireDefault(formatLong_1$l);

    var _index3 = _interopRequireDefault(formatRelative_1$f);

    var _index4 = _interopRequireDefault(localize_1$f);

    var _index5 = _interopRequireDefault(match_1$f);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Esperanto locale.
     * @language Esperanto
     * @iso-639-2 epo
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'eo',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$h = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'menos de un segundo',
        other: 'menos de {{count}} segundos'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundos'
      },
      halfAMinute: 'medio minuto',
      lessThanXMinutes: {
        one: 'menos de un minuto',
        other: 'menos de {{count}} minutos'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutos'
      },
      aboutXHours: {
        one: 'alrededor de 1 hora',
        other: 'alrededor de {{count}} horas'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} horas'
      },
      xDays: {
        one: '1 día',
        other: '{{count}} días'
      },
      aboutXWeeks: {
        one: 'alrededor de 1 semana',
        other: 'alrededor de {{count}} semanas'
      },
      xWeeks: {
        one: '1 semana',
        other: '{{count}} semanas'
      },
      aboutXMonths: {
        one: 'alrededor de 1 mes',
        other: 'alrededor de {{count}} meses'
      },
      xMonths: {
        one: '1 mes',
        other: '{{count}} meses'
      },
      aboutXYears: {
        one: 'alrededor de 1 año',
        other: 'alrededor de {{count}} años'
      },
      xYears: {
        one: '1 año',
        other: '{{count}} años'
      },
      overXYears: {
        one: 'más de 1 año',
        other: 'más de {{count}} años'
      },
      almostXYears: {
        one: 'casi 1 año',
        other: 'casi {{count}} años'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'en ' + result;
        } else {
          return 'hace ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$m = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'a las' {{time}}",
      long: "{{date}} 'a las' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$g = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'el' eeee 'pasado a la' LT",
      yesterday: "'ayer a la' p",
      today: "'hoy a la' p",
      tomorrow: "'mañana a la' p",
      nextWeek: "eeee 'a la' p",
      other: 'P'
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'pasado a las' p",
      yesterday: "'ayer a las' p",
      today: "'hoy a las' p",
      tomorrow: "'mañana a las' p",
      nextWeek: "eeee 'a las' p",
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }

      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$g = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['AC', 'DC'],
      abbreviated: ['AC', 'DC'],
      wide: ['antes de cristo', 'después de cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],
      wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
    };
    var dayValues = {
      narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
      short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sa'],
      abbreviated: ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sáb'],
      wide: ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$g = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[efmajsond]/i,
      abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
      wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmjvs]/i,
      short: /^(do|lu|ma|mi|ju|vi|sa)/i,
      abbreviated: /^(dom|lun|mar|mie|jue|vie|sab)/i,
      wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
      any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañana/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noche/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var es = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$h);

    var _index2 = _interopRequireDefault(formatLong_1$m);

    var _index3 = _interopRequireDefault(formatRelative_1$g);

    var _index4 = _interopRequireDefault(localize_1$g);

    var _index5 = _interopRequireDefault(match_1$g);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Spanish locale.
     * @language Spanish
     * @iso-639-2 spa
     * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
     * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
     * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}
     * @author Gastón Haro [@harogaston]{@link https://github.com/harogaston}
     * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}
     */
    var locale = {
      code: 'es',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$i = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: 'vähem kui üks sekund',
          other: 'vähem kui {{count}} sekundit'
        },
        withPreposition: {
          one: 'vähem kui ühe sekundi',
          other: 'vähem kui {{count}} sekundi'
        }
      },
      xSeconds: {
        standalone: {
          one: 'üks sekund',
          other: '{{count}} sekundit'
        },
        withPreposition: {
          one: 'ühe sekundi',
          other: '{{count}} sekundi'
        }
      },
      halfAMinute: {
        standalone: 'pool minutit',
        withPreposition: 'poole minuti'
      },
      lessThanXMinutes: {
        standalone: {
          one: 'vähem kui üks minut',
          other: 'vähem kui {{count}} minutit'
        },
        withPreposition: {
          one: 'vähem kui ühe minuti',
          other: 'vähem kui {{count}} minuti'
        }
      },
      xMinutes: {
        standalone: {
          one: 'üks minut',
          other: '{{count}} minutit'
        },
        withPreposition: {
          one: 'ühe minuti',
          other: '{{count}} minuti'
        }
      },
      aboutXHours: {
        standalone: {
          one: 'umbes üks tund',
          other: 'umbes {{count}} tundi'
        },
        withPreposition: {
          one: 'umbes ühe tunni',
          other: 'umbes {{count}} tunni'
        }
      },
      xHours: {
        standalone: {
          one: 'üks tund',
          other: '{{count}} tundi'
        },
        withPreposition: {
          one: 'ühe tunni',
          other: '{{count}} tunni'
        }
      },
      xDays: {
        standalone: {
          one: 'üks päev',
          other: '{{count}} päeva'
        },
        withPreposition: {
          one: 'ühe päeva',
          other: '{{count}} päeva'
        }
      },
      aboutXWeeks: {
        standalone: {
          one: 'umbes üks nädal',
          other: 'umbes {{count}} nädalat'
        },
        withPreposition: {
          one: 'umbes ühe nädala',
          other: 'umbes {{count}} nädala'
        }
      },
      xWeeks: {
        standalone: {
          one: 'üks nädal',
          other: '{{count}} nädalat'
        },
        withPreposition: {
          one: 'ühe nädala',
          other: '{{count}} nädala'
        }
      },
      aboutXMonths: {
        standalone: {
          one: 'umbes üks kuu',
          other: 'umbes {{count}} kuud'
        },
        withPreposition: {
          one: 'umbes ühe kuu',
          other: 'umbes {{count}} kuu'
        }
      },
      xMonths: {
        standalone: {
          one: 'üks kuu',
          other: '{{count}} kuud'
        },
        withPreposition: {
          one: 'ühe kuu',
          other: '{{count}} kuu'
        }
      },
      aboutXYears: {
        standalone: {
          one: 'umbes üks aasta',
          other: 'umbes {{count}} aastat'
        },
        withPreposition: {
          one: 'umbes ühe aasta',
          other: 'umbes {{count}} aasta'
        }
      },
      xYears: {
        standalone: {
          one: 'üks aasta',
          other: '{{count}} aastat'
        },
        withPreposition: {
          one: 'ühe aasta',
          other: '{{count}} aasta'
        }
      },
      overXYears: {
        standalone: {
          one: 'rohkem kui üks aasta',
          other: 'rohkem kui {{count}} aastat'
        },
        withPreposition: {
          one: 'rohkem kui ühe aasta',
          other: 'rohkem kui {{count}} aasta'
        }
      },
      almostXYears: {
        standalone: {
          one: 'peaaegu üks aasta',
          other: 'peaaegu {{count}} aastat'
        },
        withPreposition: {
          one: 'peaaegu ühe aasta',
          other: 'peaaegu {{count}} aasta'
        }
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var usageGroup = options.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      var result;

      if (typeof usageGroup === 'string') {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' pärast';
        } else {
          return result + ' eest';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$n = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'eeee, d. MMMM y',
      long: 'd. MMMM y',
      medium: 'd. MMM y',
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kell' {{time}}",
      long: "{{date}} 'kell' {{time}}",
      medium: '{{date}}. {{time}}',
      short: '{{date}}. {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$h = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'eelmine' eeee 'kell' p",
      yesterday: "'eile kell' p",
      today: "'täna kell' p",
      tomorrow: "'homme kell' p",
      nextWeek: "'järgmine' eeee 'kell' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$h = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['e.m.a', 'm.a.j'],
      abbreviated: ['e.m.a', 'm.a.j'],
      wide: ['enne meie ajaarvamist', 'meie ajaarvamise järgi']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var monthValues = {
      narrow: ['J', 'V', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jaan', 'veebr', 'märts', 'apr', 'mai', 'juuni', 'juuli', 'aug', 'sept', 'okt', 'nov', 'dets'],
      wide: ['jaanuar', 'veebruar', 'märts', 'aprill', 'mai', 'juuni', 'juuli', 'august', 'september', 'oktoober', 'november', 'detsember']
    };
    var dayValues = {
      narrow: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
      short: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
      abbreviated: ['pühap.', 'esmasp.', 'teisip.', 'kolmap.', 'neljap.', 'reede.', 'laup.'],
      wide: ['pühapäev', 'esmaspäev', 'teisipäev', 'kolmapäev', 'neljapäev', 'reede', 'laupäev']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'kesköö',
        noon: 'keskpäev',
        morning: 'hommik',
        afternoon: 'pärastlõuna',
        evening: 'õhtu',
        night: 'öö'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'kesköö',
        noon: 'keskpäev',
        morning: 'hommik',
        afternoon: 'pärastlõuna',
        evening: 'õhtu',
        night: 'öö'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'kesköö',
        noon: 'keskpäev',
        morning: 'hommik',
        afternoon: 'pärastlõuna',
        evening: 'õhtu',
        night: 'öö'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'keskööl',
        noon: 'keskpäeval',
        morning: 'hommikul',
        afternoon: 'pärastlõunal',
        evening: 'õhtul',
        night: 'öösel'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'keskööl',
        noon: 'keskpäeval',
        morning: 'hommikul',
        afternoon: 'pärastlõunal',
        evening: 'õhtul',
        night: 'öösel'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'keskööl',
        noon: 'keskpäeval',
        morning: 'hommikul',
        afternoon: 'pärastlõunal',
        evening: 'õhtul',
        night: 'öösel'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        formattingValues: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        formattingValues: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        formattingValues: formattingDayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$h = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^\d+\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      wide: /^(enne meie ajaarvamist|meie ajaarvamise järgi|enne Kristust|pärast Kristust)/i
    };
    var parseEraPatterns = {
      any: [/^e/i, /^(m|p)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jvmasond]/i,
      abbreviated: /^('jaan|veebr|märts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets')/i,
      wide: /^('jaanuar|veebruar|märts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember')/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^v/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^v/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[petknrl]/i,
      short: /^[petknrl]/i,
      abbreviated: /^(püh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
      wide: /^('pühapäev|esmaspäev|teisipäev|kolmapäev|neljapäev|reede|laupäev')/i
    };
    var parseDayPatterns = {
      any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|kesköö|keskpäev|hommik|pärastlõuna|õhtu|öö)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^keskö/i,
        noon: /^keskp/i,
        morning: /hommik/i,
        afternoon: /pärastlõuna/i,
        evening: /õhtu/i,
        night: /öö/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var et = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$i);

    var _index2 = _interopRequireDefault(formatLong_1$n);

    var _index3 = _interopRequireDefault(formatRelative_1$h);

    var _index4 = _interopRequireDefault(localize_1$h);

    var _index5 = _interopRequireDefault(match_1$h);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Estonian locale.
     * @language Estonian
     * @iso-639-2 est
     * @author Priit Hansen [@HansenPriit]{@link https://github.com/priithansen}
     */
    var locale = {
      code: 'et',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$j = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'segundo bat baino gutxiago',
        other: '{{count}} segundo baino gutxiago'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundo'
      },
      halfAMinute: 'minutu erdi',
      lessThanXMinutes: {
        one: 'minutu bat baino gutxiago',
        other: '{{count}} minutu baino gutxiago'
      },
      xMinutes: {
        one: '1 minutu',
        other: '{{count}} minutu'
      },
      aboutXHours: {
        one: '1 ordu gutxi gorabehera',
        other: '{{count}} ordu gutxi gorabehera'
      },
      xHours: {
        one: '1 ordu',
        other: '{{count}} ordu'
      },
      xDays: {
        one: '1 egun',
        other: '{{count}} egun'
      },
      aboutXWeeks: {
        one: 'aste 1 inguru',
        other: '{{count}} aste inguru'
      },
      xWeeks: {
        one: '1 aste',
        other: '{{count}} astean'
      },
      aboutXMonths: {
        one: '1 hilabete gutxi gorabehera',
        other: '{{count}} hilabete gutxi gorabehera'
      },
      xMonths: {
        one: '1 hilabete',
        other: '{{count}} hilabete'
      },
      aboutXYears: {
        one: '1 urte gutxi gorabehera',
        other: '{{count}} urte gutxi gorabehera'
      },
      xYears: {
        one: '1 urte',
        other: '{{count}} urte'
      },
      overXYears: {
        one: '1 urte baino gehiago',
        other: '{{count}} urte baino gehiago'
      },
      almostXYears: {
        one: 'ia 1 urte',
        other: 'ia {{count}} urte'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'en ' + result;
        } else {
          return 'duela ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$o = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
      long: "y'ko' MMMM'ren' d'a'",
      medium: 'y MMM d',
      short: 'yy/MM/dd'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'tan' {{time}}",
      long: "{{date}} 'tan' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$i = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'joan den' eeee, LT",
      yesterday: "'atzo,' p",
      today: "'gaur,' p",
      tomorrow: "'bihar,' p",
      nextWeek: 'eeee, p',
      other: 'P'
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'joan den' eeee, p",
      yesterday: "'atzo,' p",
      today: "'gaur,' p",
      tomorrow: "'bihar,' p",
      nextWeek: 'eeee, p',
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }

      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$i = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['k.a.', 'k.o.'],
      abbreviated: ['k.a.', 'k.o.'],
      wide: ['kristo aurretik', 'kristo ondoren']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1H', '2H', '3H', '4H'],
      wide: ['1. hiruhilekoa', '2. hiruhilekoa', '3. hiruhilekoa', '4. hiruhilekoa']
    };
    var monthValues = {
      narrow: ['u', 'o', 'm', 'a', 'm', 'e', 'u', 'a', 'i', 'u', 'a', 'a'],
      abbreviated: ['urt', 'ots', 'mar', 'api', 'mai', 'eka', 'uzt', 'abu', 'ira', 'urr', 'aza', 'abe'],
      wide: ['urtarrila', 'otsaila', 'martxoa', 'apirila', 'maiatza', 'ekaina', 'uztaila', 'abuztua', 'iraila', 'urria', 'azaroa', 'abendua']
    };
    var dayValues = {
      narrow: ['i', 'a', 'a', 'a', 'o', 'o', 'l'],
      short: ['ig', 'al', 'as', 'az', 'og', 'or', 'lr'],
      abbreviated: ['iga', 'ast', 'ast', 'ast', 'ost', 'ost', 'lar'],
      wide: ['igandea', 'astelehena', 'asteartea', 'asteazkena', 'osteguna', 'ostirala', 'larunbata']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'ge',
        noon: 'eg',
        morning: 'goiza',
        afternoon: 'arratsaldea',
        evening: 'arratsaldea',
        night: 'gaua'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'gauerdia',
        noon: 'eguerdia',
        morning: 'goiza',
        afternoon: 'arratsaldea',
        evening: 'arratsaldea',
        night: 'gaua'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'gauerdia',
        noon: 'eguerdia',
        morning: 'goiza',
        afternoon: 'arratsaldea',
        evening: 'arratsaldea',
        night: 'gaua'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'ge',
        noon: 'eg',
        morning: 'goizean',
        afternoon: 'arratsaldean',
        evening: 'arratsaldean',
        night: 'gauean'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'gauerdia',
        noon: 'eguerdia',
        morning: 'goizean',
        afternoon: 'arratsaldean',
        evening: 'arratsaldean',
        night: 'gauean'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'gauerdia',
        noon: 'eguerdia',
        morning: 'goizean',
        afternoon: 'arratsaldean',
        evening: 'arratsaldean',
        night: 'gauean'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$i = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(k.a.|k.o.)/i,
      abbreviated: /^(k.a.|k.o.)/i,
      wide: /^(kristo aurretik|kristo ondoren)/i
    };
    var parseEraPatterns = {
      narrow: [/^k.a./i, /^k.o./i],
      abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
      wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]H/i,
      wide: /^[1234](.)? hiruhilekoa/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[uomaei]/i,
      abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
      wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
    };
    var parseMonthPatterns = {
      narrow: [/^u/i, /^o/i, /^m/i, /^a/i, /^m/i, /^e/i, /^u/i, /^a/i, /^i/i, /^u/i, /^a/i, /^a/i],
      any: [/^urt/i, /^ots/i, /^mar/i, /^api/i, /^mai/i, /^eka/i, /^uzt/i, /^abu/i, /^ira/i, /^urr/i, /^aza/i, /^abe/i]
    };
    var matchDayPatterns = {
      narrow: /^[iaol]/i,
      short: /^(ig|al|as|az|og|or|lr)/i,
      abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
      wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
    };
    var parseDayPatterns = {
      narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
      short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
      abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
      wide: [/^igandea/i, /^astelehena/i, /^asteartea/i, /^asteazkena/i, /^osteguna/i, /^ostirala/i, /^larunbata/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
      any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^ge/i,
        noon: /^eg/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
      },
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^gauerdia/i,
        noon: /^eguerdia/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var eu = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$j);

    var _index2 = _interopRequireDefault(formatLong_1$o);

    var _index3 = _interopRequireDefault(formatRelative_1$i);

    var _index4 = _interopRequireDefault(localize_1$i);

    var _index5 = _interopRequireDefault(match_1$i);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Basque locale.
     * @language Basque
     * @iso-639-2 eus
     * @author Jacob Söderblom [@JacobSoderblom]{@link https://github.com/JacobSoderblom}
     */
    var locale = {
      code: 'eu',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$k = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'کمتر از یک ثانیه',
        other: 'کمتر از {{count}} ثانیه'
      },
      xSeconds: {
        one: '1 ثانیه',
        other: '{{count}} ثانیه'
      },
      halfAMinute: 'نیم دقیقه',
      lessThanXMinutes: {
        one: 'کمتر از یک دقیقه',
        other: 'کمتر از {{count}} دقیقه'
      },
      xMinutes: {
        one: '1 دقیقه',
        other: '{{count}} دقیقه'
      },
      aboutXHours: {
        one: 'حدود 1 ساعت',
        other: 'حدود {{count}} ساعت'
      },
      xHours: {
        one: '1 ساعت',
        other: '{{count}} ساعت'
      },
      xDays: {
        one: '1 روز',
        other: '{{count}} روز'
      },
      aboutXWeeks: {
        one: 'حدود 1 هفته',
        other: 'حدود {{count}} هفته'
      },
      xWeeks: {
        one: '1 هفته',
        other: '{{count}} هفته'
      },
      aboutXMonths: {
        one: 'حدود 1 ماه',
        other: 'حدود {{count}} ماه'
      },
      xMonths: {
        one: '1 ماه',
        other: '{{count}} ماه'
      },
      aboutXYears: {
        one: 'حدود 1 سال',
        other: 'حدود {{count}} سال'
      },
      xYears: {
        one: '1 سال',
        other: '{{count}} سال'
      },
      overXYears: {
        one: 'بیشتر از 1 سال',
        other: 'بیشتر از {{count}} سال'
      },
      almostXYears: {
        one: 'نزدیک 1 سال',
        other: 'نزدیک {{count}} سال'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'در ' + result;
        } else {
          return result + ' قبل';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$p = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE do MMMM y',
      long: 'do MMMM y',
      medium: 'd MMM y',
      short: 'yyyy/MM/dd'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'در' {{time}}",
      long: "{{date}} 'در' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$j = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'گذشته در' p",
      yesterday: "'دیروز در' p",
      today: "'امروز در' p",
      tomorrow: "'فردا در' p",
      nextWeek: "eeee 'در' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$j = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ق', 'ب'],
      abbreviated: ['ق.م.', 'ب.م.'],
      wide: ['قبل از میلاد', 'بعد از میلاد']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['س‌م1', 'س‌م2', 'س‌م3', 'س‌م4'],
      wide: ['سه‌ماهه 1', 'سه‌ماهه 2', 'سه‌ماهه 3', 'سه‌ماهه 4'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['ژ', 'ف', 'م', 'آ', 'م', 'ج', 'ج', 'آ', 'س', 'ا', 'ن', 'د'],
      abbreviated: ['ژانـ', 'فور', 'مارس', 'آپر', 'می', 'جون', 'جولـ', 'آگو', 'سپتـ', 'اکتـ', 'نوامـ', 'دسامـ'],
      wide: ['ژانویه', 'فوریه', 'مارس', 'آپریل', 'می', 'جون', 'جولای', 'آگوست', 'سپتامبر', 'اکتبر', 'نوامبر', 'دسامبر']
    };
    var dayValues = {
      narrow: ['ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
      short: ['1ش', '2ش', '3ش', '4ش', '5ش', 'ج', 'ش'],
      abbreviated: ['یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه'],
      wide: ['یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ق',
        pm: 'ب',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'ص',
        afternoon: 'ب.ظ.',
        evening: 'ع',
        night: 'ش'
      },
      abbreviated: {
        am: 'ق.ظ.',
        pm: 'ب.ظ.',
        midnight: 'نیمه‌شب',
        noon: 'ظهر',
        morning: 'صبح',
        afternoon: 'بعدازظهر',
        evening: 'عصر',
        night: 'شب'
      },
      wide: {
        am: 'قبل‌ازظهر',
        pm: 'بعدازظهر',
        midnight: 'نیمه‌شب',
        noon: 'ظهر',
        morning: 'صبح',
        afternoon: 'بعدازظهر',
        evening: 'عصر',
        night: 'شب'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ق',
        pm: 'ب',
        midnight: 'ن',
        noon: 'ظ',
        morning: 'ص',
        afternoon: 'ب.ظ.',
        evening: 'ع',
        night: 'ش'
      },
      abbreviated: {
        am: 'ق.ظ.',
        pm: 'ب.ظ.',
        midnight: 'نیمه‌شب',
        noon: 'ظهر',
        morning: 'صبح',
        afternoon: 'بعدازظهر',
        evening: 'عصر',
        night: 'شب'
      },
      wide: {
        am: 'قبل‌ازظهر',
        pm: 'بعدازظهر',
        midnight: 'نیمه‌شب',
        noon: 'ظهر',
        morning: 'صبح',
        afternoon: 'بعدازظهر',
        evening: 'عصر',
        night: 'شب'
      }
    };

    function ordinalNumber(dirtyNumber) {
      return String(dirtyNumber);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$j = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?د\.?\s?م\.?|م\.?\s?|د\.?\s?م\.?)/i,
      wide: /^(قبل از میلاد|قبل از دوران مشترک|میلادی|دوران مشترک|بعد از میلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^س‌م[1234]/i,
      wide: /^سه‌ماهه [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[جژفمآاماسند]/i,
      abbreviated: /^(جنو|ژانـ|ژانویه|فوریه|فور|مارس|آوریل|آپر|مه|می|ژوئن|جون|جول|جولـ|ژوئیه|اوت|آگو|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نوامـ|دسامبر|دسامـ|دسم)/i,
      wide: /^(ژانویه|جنوری|فبروری|فوریه|مارچ|مارس|آپریل|اپریل|ایپریل|آوریل|مه|می|ژوئن|جون|جولای|ژوئیه|آگست|اگست|آگوست|اوت|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نومبر|دسامبر|دسمبر)/i
    };
    var parseMonthPatterns = {
      narrow: [/^(ژ|ج)/i, /^ف/i, /^م/i, /^(آ|ا)/i, /^م/i, /^(ژ|ج)/i, /^(ج|ژ)/i, /^(آ|ا)/i, /^س/i, /^ا/i, /^ن/i, /^د/i],
      any: [/^ژا/i, /^ف/i, /^ما/i, /^آپ/i, /^(می|مه)/i, /^(ژوئن|جون)/i, /^(ژوئی|جول)/i, /^(اوت|آگ)/i, /^س/i, /^(اوک|اک)/i, /^ن/i, /^د/i]
    };
    var matchDayPatterns = {
      narrow: /^[شیدسچپج]/i,
      short: /^(ش|ج|1ش|2ش|3ش|4ش|5ش)/i,
      abbreviated: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i,
      wide: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i
    };
    var parseDayPatterns = {
      narrow: [/^ی/i, /^دو/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
      any: [/^(ی|1ش|یکشنبه)/i, /^(د|2ش|دوشنبه)/i, /^(س|3ش|سه‌شنبه)/i, /^(چ|4ش|چهارشنبه)/i, /^(پ|5ش|پنجشنبه)/i, /^(ج|جمعه)/i, /^(ش|شنبه)/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ب|ق|ن|ظ|ص|ب.ظ.|ع|ش)/i,
      abbreviated: /^(ق.ظ.|ب.ظ.|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i,
      wide: /^(قبل‌ازظهر|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(ق|ق.ظ.|قبل‌ازظهر)/i,
        pm: /^(ب|ب.ظ.|بعدازظهر)/i,
        midnight: /^(‌نیمه‌شب|ن)/i,
        noon: /^(ظ|ظهر)/i,
        morning: /(ص|صبح)/i,
        afternoon: /(ب|ب.ظ.|بعدازظهر)/i,
        evening: /(ع|عصر)/i,
        night: /(ش|شب)/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var faIR = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$k);

    var _index2 = _interopRequireDefault(formatLong_1$p);

    var _index3 = _interopRequireDefault(formatRelative_1$j);

    var _index4 = _interopRequireDefault(localize_1$j);

    var _index5 = _interopRequireDefault(match_1$j);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Persian/Farsi locale (Iran).
     * @language Persian
     * @iso-639-2 ira
     * @author Morteza Ziyae [@mort3za]{@link https://github.com/mort3za}
     */
    var locale = {
      code: 'fa-IR',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$l = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function futureSeconds(text) {
      return text.replace(/sekuntia?/, 'sekunnin');
    }

    function futureMinutes(text) {
      return text.replace(/minuuttia?/, 'minuutin');
    }

    function futureHours(text) {
      return text.replace(/tuntia?/, 'tunnin');
    }

    function futureDays(text) {
      return text.replace(/päivää?/, 'päivän');
    }

    function futureWeeks(text) {
      return text.replace(/(viikko|viikkoa)/, 'viikon');
    }

    function futureMonths(text) {
      return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');
    }

    function futureYears(text) {
      return text.replace(/(vuosi|vuotta)/, 'vuoden');
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'alle sekunti',
        other: 'alle {{count}} sekuntia',
        futureTense: futureSeconds
      },
      xSeconds: {
        one: 'sekunti',
        other: '{{count}} sekuntia',
        futureTense: futureSeconds
      },
      halfAMinute: {
        one: 'puoli minuuttia',
        other: 'puoli minuuttia',
        futureTense: function (_text) {
          return 'puolen minuutin';
        }
      },
      lessThanXMinutes: {
        one: 'alle minuutti',
        other: 'alle {{count}} minuuttia',
        futureTense: futureMinutes
      },
      xMinutes: {
        one: 'minuutti',
        other: '{{count}} minuuttia',
        futureTense: futureMinutes
      },
      aboutXHours: {
        one: 'noin tunti',
        other: 'noin {{count}} tuntia',
        futureTense: futureHours
      },
      xHours: {
        one: 'tunti',
        other: '{{count}} tuntia',
        futureTense: futureHours
      },
      xDays: {
        one: 'päivä',
        other: '{{count}} päivää',
        futureTense: futureDays
      },
      aboutXWeeks: {
        one: 'noin viikko',
        other: 'noin {{count}} viikkoa',
        futureTense: futureWeeks
      },
      xWeeks: {
        one: 'viikko',
        other: '{{count}} viikkoa',
        futureTense: futureWeeks
      },
      aboutXMonths: {
        one: 'noin kuukausi',
        other: 'noin {{count}} kuukautta',
        futureTense: futureMonths
      },
      xMonths: {
        one: 'kuukausi',
        other: '{{count}} kuukautta',
        futureTense: futureMonths
      },
      aboutXYears: {
        one: 'noin vuosi',
        other: 'noin {{count}} vuotta',
        futureTense: futureYears
      },
      xYears: {
        one: 'vuosi',
        other: '{{count}} vuotta',
        futureTense: futureYears
      },
      overXYears: {
        one: 'yli vuosi',
        other: 'yli {{count}} vuotta',
        futureTense: futureYears
      },
      almostXYears: {
        one: 'lähes vuosi',
        other: 'lähes {{count}} vuotta',
        futureTense: futureYears
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var distance = formatDistanceLocale[token];
      var result = count === 1 ? distance.one : distance.other.replace('{{count}}', count);

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return distance.futureTense(result) + ' kuluttua';
        } else {
          return result + ' sitten';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'eeee d. MMMM y',
      long: 'd. MMMM y',
      medium: 'd. MMM y',
      short: 'd.M.y'
    };
    var timeFormats = {
      full: 'HH.mm.ss zzzz',
      long: 'HH.mm.ss z',
      medium: 'HH.mm.ss',
      short: 'HH.mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'klo' {{time}}",
      long: "{{date}} 'klo' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$k = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'viime' eeee 'klo' p",
      yesterday: "'eilen klo' p",
      today: "'tänään klo' p",
      tomorrow: "'huomenna klo' p",
      nextWeek: "'ensi' eeee 'klo' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$k = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['eaa.', 'jaa.'],
      abbreviated: ['eaa.', 'jaa.'],
      wide: ['ennen ajanlaskun alkua', 'jälkeen ajanlaskun alun']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. kvartaali', '2. kvartaali', '3. kvartaali', '4. kvartaali']
    };
    var monthValues = {
      narrow: ['T', 'H', 'M', 'H', 'T', 'K', 'H', 'E', 'S', 'L', 'M', 'J'],
      abbreviated: ['tammi', 'helmi', 'maalis', 'huhti', 'touko', 'kesä', 'heinä', 'elo', 'syys', 'loka', 'marras', 'joulu'],
      wide: ['tammikuu', 'helmikuu', 'maaliskuu', 'huhtikuu', 'toukokuu', 'kesäkuu', 'heinäkuu', 'elokuu', 'syyskuu', 'lokakuu', 'marraskuu', 'joulukuu']
    };
    var formattingMonthValues = {
      narrow: monthValues.narrow,
      abbreviated: monthValues.abbreviated,
      wide: monthValues.wide.map(function (name) {
        return name + 'ta';
      })
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
      short: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
      abbreviated: ['sunn.', 'maan.', 'tiis.', 'kesk.', 'torst.', 'perj.', 'la'],
      wide: ['sunnuntai', 'maanantai', 'tiistai', 'keskiviikko', 'torstai', 'perjantai', 'lauantai']
    };
    var formattingDayValues = {
      narrow: dayValues.narrow,
      short: dayValues.short,
      abbreviated: dayValues.abbreviated,
      wide: dayValues.wide.map(function (name) {
        return name + 'na';
      })
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ap',
        pm: 'ip',
        midnight: 'keskiyö',
        noon: 'keskipäivä',
        morning: 'ap',
        afternoon: 'ip',
        evening: 'illalla',
        night: 'yöllä'
      },
      abbreviated: {
        am: 'ap',
        pm: 'ip',
        midnight: 'keskiyö',
        noon: 'keskipäivä',
        morning: 'ap',
        afternoon: 'ip',
        evening: 'illalla',
        night: 'yöllä'
      },
      wide: {
        am: 'ap',
        pm: 'ip',
        midnight: 'keskiyöllä',
        noon: 'keskipäivällä',
        morning: 'aamupäivällä',
        afternoon: 'iltapäivällä',
        evening: 'illalla',
        night: 'yöllä'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        formattingValues: formattingDayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$k = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(\.)/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(e|j)/i,
      abbreviated: /^(eaa.|jaa.)/i,
      wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
    };
    var parseEraPatterns = {
      any: [/^e/i, /^j/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\.? kvartaali/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[thmkeslj]/i,
      abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
      wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
    };
    var parseMonthPatterns = {
      narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
      any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtkpl]/i,
      short: /^(su|ma|ti|ke|to|pe|la)/i,
      abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
      wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
      any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ap/i,
        pm: /^ip/i,
        midnight: /^keskiyö/i,
        noon: /^keskipäivä/i,
        morning: /aamupäivällä/i,
        afternoon: /iltapäivällä/i,
        evening: /illalla/i,
        night: /yöllä/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var fi = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$l);

    var _index2 = _interopRequireDefault(formatLong_1$q);

    var _index3 = _interopRequireDefault(formatRelative_1$k);

    var _index4 = _interopRequireDefault(localize_1$k);

    var _index5 = _interopRequireDefault(match_1$k);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Finnish locale.
     * @language Finnish
     * @iso-639-2 fin
     * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}
     * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
     * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}
     */
    var locale = {
      code: 'fi',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$m = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'moins d’une seconde',
        other: 'moins de {{count}} secondes'
      },
      xSeconds: {
        one: '1 seconde',
        other: '{{count}} secondes'
      },
      halfAMinute: '30 secondes',
      lessThanXMinutes: {
        one: 'moins d’une minute',
        other: 'moins de {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'environ 1 heure',
        other: 'environ {{count}} heures'
      },
      xHours: {
        one: '1 heure',
        other: '{{count}} heures'
      },
      xDays: {
        one: '1 jour',
        other: '{{count}} jours'
      },
      aboutXWeeks: {
        one: 'environ 1 semaine',
        other: 'environ {{count}} semaines'
      },
      xWeeks: {
        one: '1 semaine',
        other: '{{count}} semaines'
      },
      aboutXMonths: {
        one: 'environ 1 mois',
        other: 'environ {{count}} mois'
      },
      xMonths: {
        one: '1 mois',
        other: '{{count}} mois'
      },
      aboutXYears: {
        one: 'environ 1 an',
        other: 'environ {{count}} ans'
      },
      xYears: {
        one: '1 an',
        other: '{{count}} ans'
      },
      overXYears: {
        one: 'plus d’un an',
        other: 'plus de {{count}} ans'
      },
      almostXYears: {
        one: 'presqu’un an',
        other: 'presque {{count}} ans'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'dans ' + result;
        } else {
          return 'il y a ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$r = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$l = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'dernier à' p",
      yesterday: "'hier à' p",
      today: "'aujourd’hui à' p",
      tomorrow: "'demain à' p'",
      nextWeek: "eeee 'prochain à' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$l = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['av. J.-C', 'ap. J.-C'],
      abbreviated: ['av. J.-C', 'ap. J.-C'],
      wide: ['avant Jésus-Christ', 'après Jésus-Christ']
    };
    var quarterValues = {
      narrow: ['T1', 'T2', 'T3', 'T4'],
      abbreviated: ['1er trim.', '2ème trim.', '3ème trim.', '4ème trim.'],
      wide: ['1er trimestre', '2ème trimestre', '3ème trimestre', '4ème trimestre']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
      wide: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
    };
    var dayValues = {
      narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
      short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
      abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
      wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'mat.',
        afternoon: 'ap.m.',
        evening: 'soir',
        night: 'mat.'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'matin',
        afternoon: 'après-midi',
        evening: 'soir',
        night: 'matin'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'du matin',
        afternoon: 'de l’après-midi',
        evening: 'du soir',
        night: 'du matin'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber);
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var suffix;

      if (number === 0) {
        return number;
      }

      if (unit === 'year' || unit === 'hour' || unit === 'week') {
        if (number === 1) {
          suffix = 'ère';
        } else {
          suffix = 'ème';
        }
      } else {
        if (number === 1) {
          suffix = 'er';
        } else {
          suffix = 'ème';
        }
      }

      return number + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$l = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
      abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
      wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
    };
    var parseEraPatterns = {
      any: [/^av/i, /^ap/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](er|ème|e)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
      wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[lmjvsd]/i,
      short: /^(di|lu|ma|me|je|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
      wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
      any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /soir/i,
        night: /nuit/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var fr = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$m);

    var _index2 = _interopRequireDefault(formatLong_1$r);

    var _index3 = _interopRequireDefault(formatRelative_1$l);

    var _index4 = _interopRequireDefault(localize_1$l);

    var _index5 = _interopRequireDefault(match_1$l);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary French locale.
     * @language French
     * @iso-639-2 fra
     * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
     * @author François B [@fbonzon]{@link https://github.com/fbonzon}
     */
    var locale = {
      code: 'fr',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatLong_1$s = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'yy-MM-dd'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var frCA = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$m);

    var _index2 = _interopRequireDefault(formatRelative_1$l);

    var _index3 = _interopRequireDefault(localize_1$l);

    var _index4 = _interopRequireDefault(match_1$l);

    var _index5 = _interopRequireDefault(formatLong_1$s);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Same as fr
    // Unique for fr-CA

    /**
     * @type {Locale}
     * @category Locales
     * @summary French locale (Canada).
     * @language French
     * @iso-639-2 fra
     * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
     * @author François B [@fbonzon]{@link https://github.com/fbonzon}
     * @author Gabriele Petrioli [@gpetrioli]{@link https://github.com/gpetrioli}
     */
    var locale = {
      code: 'fr-CA',
      formatDistance: _index.default,
      formatLong: _index5.default,
      formatRelative: _index2.default,
      localize: _index3.default,
      match: _index4.default,
      // Unique for fr-CA
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$n = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'moins d’une seconde',
        other: 'moins de {{count}} secondes'
      },
      xSeconds: {
        one: '1 seconde',
        other: '{{count}} secondes'
      },
      halfAMinute: '30 secondes',
      lessThanXMinutes: {
        one: 'moins d’une minute',
        other: 'moins de {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'environ 1 heure',
        other: 'environ {{count}} heures'
      },
      xHours: {
        one: '1 heure',
        other: '{{count}} heures'
      },
      xDays: {
        one: '1 jour',
        other: '{{count}} jours'
      },
      aboutXWeeks: {
        one: 'environ 1 semaine',
        other: 'environ {{count}} semaines'
      },
      xWeeks: {
        one: '1 semaine',
        other: '{{count}} semaines'
      },
      aboutXMonths: {
        one: 'environ 1 mois',
        other: 'environ {{count}} mois'
      },
      xMonths: {
        one: '1 mois',
        other: '{{count}} mois'
      },
      aboutXYears: {
        one: 'environ 1 an',
        other: 'environ {{count}} ans'
      },
      xYears: {
        one: '1 an',
        other: '{{count}} ans'
      },
      overXYears: {
        one: 'plus d’un an',
        other: 'plus de {{count}} ans'
      },
      almostXYears: {
        one: 'presqu’un an',
        other: 'presque {{count}} ans'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'dans ' + result;
        } else {
          return 'il y a ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$t = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$m = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'la semaine dernière à' p",
      yesterday: "'hier à' p",
      today: "'aujourd’hui à' p",
      tomorrow: "'demain à' p'",
      nextWeek: "eeee 'la semaine prochaine à' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$m = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['av. J.-C', 'ap. J.-C'],
      abbreviated: ['av. J.-C', 'ap. J.-C'],
      wide: ['avant Jésus-Christ', 'après Jésus-Christ']
    };
    var quarterValues = {
      narrow: ['T1', 'T2', 'T3', 'T4'],
      abbreviated: ['1er trim.', '2ème trim.', '3ème trim.', '4ème trim.'],
      wide: ['1er trimestre', '2ème trimestre', '3ème trimestre', '4ème trimestre']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
      wide: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
    };
    var dayValues = {
      narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
      short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
      abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
      wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'mat.',
        afternoon: 'ap.m.',
        evening: 'soir',
        night: 'mat.'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'matin',
        afternoon: 'après-midi',
        evening: 'soir',
        night: 'matin'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'minuit',
        noon: 'midi',
        morning: 'du matin',
        afternoon: 'de l’après-midi',
        evening: 'du soir',
        night: 'du matin'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber);
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var suffix;

      if (number === 0) {
        return number;
      }

      if (unit === 'year' || unit === 'hour' || unit === 'week') {
        if (number === 1) {
          suffix = 'ère';
        } else {
          suffix = 'ème';
        }
      } else {
        if (number === 1) {
          suffix = 'er';
        } else {
          suffix = 'ème';
        }
      }

      return number + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$m = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
      abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
      wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
    };
    var parseEraPatterns = {
      any: [/^av/i, /^ap/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](er|ème|e)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
      wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[lmjvsd]/i,
      short: /^(di|lu|ma|me|je|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
      wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
      any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /soir/i,
        night: /nuit/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var frCH = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$n);

    var _index2 = _interopRequireDefault(formatLong_1$t);

    var _index3 = _interopRequireDefault(formatRelative_1$m);

    var _index4 = _interopRequireDefault(localize_1$m);

    var _index5 = _interopRequireDefault(match_1$m);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary French locale.
     * @language French
     * @iso-639-2 fra
     * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
     * @author François B [@fbonzon]{@link https://github.com/fbonzon}
     * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
     * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
     */
    var locale = {
      code: 'fr-CH',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$o = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'nas lugha na diog',
        other: 'nas lugha na {{count}} diogan'
      },
      xSeconds: {
        one: '1 diog',
        two: '2 dhiog',
        twenty: '20 diog',
        other: '{{count}} diogan'
      },
      halfAMinute: 'leth mhionaid',
      lessThanXMinutes: {
        one: 'nas lugha na mionaid',
        other: 'nas lugha na {{count}} mionaidean'
      },
      xMinutes: {
        one: '1 mionaid',
        two: '2 mhionaid',
        twenty: '20 mionaid',
        other: '{{count}} mionaidean'
      },
      aboutXHours: {
        one: 'mu uair de thìde',
        other: 'mu {{count}} uairean de thìde'
      },
      xHours: {
        one: '1 uair de thìde',
        two: '2 uair de thìde',
        twenty: '20 uair de thìde',
        other: '{{count}} uairean de thìde'
      },
      xDays: {
        one: '1 là',
        other: '{{count}} là'
      },
      aboutXWeeks: {
        one: 'mu 1 seachdain',
        other: 'mu {{count}} seachdainean'
      },
      xWeeks: {
        one: '1 seachdain',
        other: '{{count}} seachdainean'
      },
      aboutXMonths: {
        one: 'mu mhìos',
        other: 'mu {{count}} mìosan'
      },
      xMonths: {
        one: '1 mìos',
        other: '{{count}} mìosan'
      },
      aboutXYears: {
        one: 'mu bhliadhna',
        other: 'mu {{count}} bliadhnaichean'
      },
      xYears: {
        one: '1 bhliadhna',
        other: '{{count}} bliadhna'
      },
      overXYears: {
        one: 'còrr is bliadhna',
        other: 'còrr is {{count}} bliadhnaichean'
      },
      almostXYears: {
        one: 'cha mhòr bliadhna',
        other: 'cha mhòr {{count}} bliadhnaichean'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2 && !!formatDistanceLocale[token].two) {
        result = formatDistanceLocale[token].two;
      } else if (count === 9 && !!formatDistanceLocale[token].nine) {
        result = formatDistanceLocale[token].nine;
      } else if (count === 20 && !!formatDistanceLocale[token].twenty) {
        result = formatDistanceLocale[token].twenty;
      } else if (count === 30 && !!formatDistanceLocale[token].thirty) {
        result = formatDistanceLocale[token].thirty;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'ann an ' + result;
        } else {
          return 'o chionn ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$u = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'aig' {{time}}",
      long: "{{date}} 'aig' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$n = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'mu dheireadh' eeee 'aig' p",
      //FIX
      yesterday: "'an-dè aig' p",
      today: "'an-diugh aig' p",
      tomorrow: "'a-màireach aig' p",
      nextWeek: "eeee 'aig' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$n = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['R', 'A'],
      abbreviated: ['RC', 'AD'],
      wide: ['ro Chrìosta', 'anno domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['C1', 'C2', 'C3', 'C4'],
      wide: ["a' chiad chairteal", 'an dàrna cairteal', 'an treas cairteal', 'an ceathramh cairteal'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['F', 'G', 'M', 'G', 'C', 'Ò', 'I', 'L', 'S', 'D', 'S', 'D'],
      abbreviated: ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'],
      wide: ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd']
    };
    var dayValues = {
      narrow: ['D', 'L', 'M', 'C', 'A', 'H', 'S'],
      short: ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'],
      abbreviated: ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
      wide: ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'm',
        pm: 'f',
        midnight: 'm.o.',
        noon: 'm.l.',
        morning: 'madainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'oidhche'
      },
      abbreviated: {
        am: 'M.',
        pm: 'F.',
        midnight: 'meadhan oidhche',
        noon: 'meadhan là',
        morning: 'madainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'oidhche'
      },
      wide: {
        am: 'm.',
        pm: 'f.',
        midnight: 'meadhan oidhche',
        noon: 'meadhan là',
        morning: 'madainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'oidhche'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'm',
        pm: 'f',
        midnight: 'm.o.',
        noon: 'm.l.',
        morning: 'sa mhadainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'air an oidhche'
      },
      abbreviated: {
        am: 'M.',
        pm: 'F.',
        midnight: 'meadhan oidhche',
        noon: 'meadhan là',
        morning: 'sa mhadainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'air an oidhche'
      },
      wide: {
        am: 'm.',
        pm: 'f.',
        midnight: 'meadhan oidhche',
        noon: 'meadhan là',
        morning: 'sa mhadainn',
        afternoon: 'feasgar',
        evening: 'feasgar',
        night: 'air an oidhche'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'd';

          case 2:
            return number + 'na';
        }
      }

      if (rem100 === 12) {
        return number + 'na';
      }

      return number + 'mh';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$n = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(d|na|tr|mh)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(r|a)/i,
      abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
      wide: /^(ro Chrìosta|ron aois choitchinn|anno domini|aois choitcheann)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^c[1234]/i,
      wide: /^[1234](cd|na|tr|mh)? cairteal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[fgmcòilsd]/i,
      abbreviated: /^(faoi|gear|màrt|gibl|cèit|ògmh|iuch|lùn|sult|dàmh|samh|dùbh)/i,
      wide: /^(am faoilleach|an gearran|am màrt|an giblean|an cèitean|an t-Ògmhios|an t-Iuchar|an lùnastal|an t-Sultain|an dàmhair|an t-Samhain|an dùbhlachd)/i
    };
    var parseMonthPatterns = {
      narrow: [/^f/i, /^g/i, /^m/i, /^g/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^s/i, /^d/i, /^s/i, /^d/i],
      any: [/^fa/i, /^ge/i, /^mà/i, /^gi/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^su/i, /^d/i, /^sa/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmcahs]/i,
      short: /^(dò|lu|mà|ci|ar|ha|sa)/i,
      abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
      wide: /^(didòmhnaich|diluain|dimàirt|diciadain|diardaoin|dihaoine|disathairne)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
      any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
      any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan là|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^m/i,
        pm: /^f/i,
        midnight: /^meadhan oidhche/i,
        noon: /^meadhan là/i,
        morning: /sa mhadainn/i,
        afternoon: /feasgar/i,
        evening: /feasgar/i,
        night: /air an oidhche/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var gd = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$o);

    var _index2 = _interopRequireDefault(formatLong_1$u);

    var _index3 = _interopRequireDefault(formatRelative_1$n);

    var _index4 = _interopRequireDefault(localize_1$n);

    var _index5 = _interopRequireDefault(match_1$n);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Scottish Gaelic.
     * @language Scottish Gaelic
     * @iso-639-2 gla
     * @author Lee Driscoll [@leedriscoll]{@link https://github.com/leedriscoll}
     */
    var locale = {
      code: 'gd',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$p = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'menos dun segundo',
        other: 'menos de {{count}} segundos'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundos'
      },
      halfAMinute: 'medio minuto',
      lessThanXMinutes: {
        one: 'menos dun minuto',
        other: 'menos de {{count}} minutos'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutos'
      },
      aboutXHours: {
        one: 'arredor dunha hora',
        other: 'arredor de {{count}} horas'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} horas'
      },
      xDays: {
        one: '1 día',
        other: '{{count}} días'
      },
      aboutXWeeks: {
        one: 'arredor dunha semana',
        other: 'arredor de {{count}} semanas'
      },
      xWeeks: {
        one: '1 semana',
        other: '{{count}} semanas'
      },
      aboutXMonths: {
        one: 'arredor de 1 mes',
        other: 'arredor de {{count}} meses'
      },
      xMonths: {
        one: '1 mes',
        other: '{{count}} meses'
      },
      aboutXYears: {
        one: 'arredor dun ano',
        other: 'arredor de {{count}} anos'
      },
      xYears: {
        one: '1 ano',
        other: '{{count}} anos'
      },
      overXYears: {
        one: 'máis dun ano',
        other: 'máis de {{count}} anos'
      },
      almostXYears: {
        one: 'case un ano',
        other: 'case {{count}} anos'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'en ' + result;
        } else {
          return 'hai ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$v = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'ás' {{time}}",
      long: "{{date}} 'ás' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$o = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'o' eeee 'pasado á' LT",
      yesterday: "'onte á' p",
      today: "'hoxe á' p",
      tomorrow: "'mañá á' p",
      nextWeek: "eeee 'á' p",
      other: 'P'
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'o' eeee 'pasado ás' p",
      yesterday: "'onte ás' p",
      today: "'hoxe ás' p",
      tomorrow: "'mañá ás' p",
      nextWeek: "eeee 'ás' p",
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }

      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$o = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['AC', 'DC'],
      abbreviated: ['AC', 'DC'],
      wide: ['antes de cristo', 'despois de cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['xan', 'feb', 'mar', 'abr', 'mai', 'xun', 'xul', 'ago', 'set', 'out', 'nov', 'dec'],
      wide: ['xaneiro', 'febreiro', 'marzo', 'abril', 'maio', 'xuño', 'xullo', 'agosto', 'setembro', 'outubro', 'novembro', 'decembro']
    };
    var dayValues = {
      narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
      short: ['do', 'lu', 'ma', 'me', 'xo', 've', 'sa'],
      abbreviated: ['dom', 'lun', 'mar', 'mer', 'xov', 'ven', 'sab'],
      wide: ['domingo', 'luns', 'martes', 'mércores', 'xoves', 'venres', 'sábado']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'mañá',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noite'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoite',
        noon: 'mediodía',
        morning: 'mañá',
        afternoon: 'tarde',
        evening: 'tardiña',
        night: 'noite'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoite',
        noon: 'mediodía',
        morning: 'mañá',
        afternoon: 'tarde',
        evening: 'tardiña',
        night: 'noite'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'da mañá',
        afternoon: 'da tarde',
        evening: 'da tardiña',
        night: 'da noite'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoite',
        noon: 'mediodía',
        morning: 'da mañá',
        afternoon: 'da tarde',
        evening: 'da tardiña',
        night: 'da noite'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoite',
        noon: 'mediodía',
        morning: 'da mañá',
        afternoon: 'da tarde',
        evening: 'da tardiña',
        night: 'da noite'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$o = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era com[uú]n|despois de cristo|era com[uú]n)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes da era com[uú]n)/i, /^(despois de cristo|era com[uú]n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[xfmasond]/i,
      abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
      wide: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i
    };
    var parseMonthPatterns = {
      narrow: [/^x/i, /^f/i, /^m/i, /^a/i, /^m/i, /^x/i, /^x/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xun/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmxvs]/i,
      short: /^(do|lu|ma|me|xo|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
      wide: /^(domingo|luns|martes|m[eé]rcores|xoves|venres|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(da|[aá]s) (mañ[aá]|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|medianoite|mediod[ií]a|(da|[aá]s) (mañ[aá]|tarde|noite))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañ[aá]/i,
        afternoon: /tarde/i,
        evening: /tardiña/i,
        night: /noite/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var gl = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$p);

    var _index2 = _interopRequireDefault(formatLong_1$v);

    var _index3 = _interopRequireDefault(formatRelative_1$o);

    var _index4 = _interopRequireDefault(localize_1$o);

    var _index5 = _interopRequireDefault(match_1$o);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Galician locale.
     * @language Galician
     * @iso-639-2 glg
     * @author Alberto Doval - Cocodin Technology[@cocodinTech]{@link https://github.com/cocodinTech}
     * @author Fidel Pita [@fidelpita]{@link https://github.com/fidelpita}
     */
    var locale = {
      code: 'gl',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    // Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'હમણાં',
        // CLDR #1461
        other: '​આશરે {{count}} સેકંડ'
      },
      xSeconds: {
        one: '1 સેકંડ',
        other: '{{count}} સેકંડ'
      },
      halfAMinute: 'અડધી મિનિટ',
      lessThanXMinutes: {
        one: 'આ મિનિટ',
        // CLDR #1448
        other: '​આશરે {{count}} મિનિટ'
      },
      xMinutes: {
        one: '1 મિનિટ',
        other: '{{count}} મિનિટ'
      },
      aboutXHours: {
        one: '​આશરે 1 કલાક',
        other: '​આશરે {{count}} કલાક'
      },
      xHours: {
        one: '1 કલાક',
        other: '{{count}} કલાક'
      },
      xDays: {
        one: '1 દિવસ',
        other: '{{count}} દિવસ'
      },
      aboutXWeeks: {
        one: 'આશરે 1 અઠવાડિયું',
        other: 'આશરે {{count}} અઠવાડિયા'
      },
      xWeeks: {
        one: '1 અઠવાડિયું',
        other: '{{count}} અઠવાડિયા'
      },
      aboutXMonths: {
        one: 'આશરે 1 મહિનો',
        other: 'આશરે {{count}} મહિના'
      },
      xMonths: {
        one: '1 મહિનો',
        other: '{{count}} મહિના'
      },
      aboutXYears: {
        one: 'આશરે 1 વર્ષ',
        other: 'આશરે {{count}} વર્ષ'
      },
      xYears: {
        one: '1 વર્ષ',
        other: '{{count}} વર્ષ'
      },
      overXYears: {
        one: '1 વર્ષથી વધુ',
        other: '{{count}} વર્ષથી વધુ'
      },
      almostXYears: {
        one: 'લગભગ 1 વર્ષ',
        other: 'લગભગ {{count}} વર્ષ'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + 'માં';
        } else {
          return result + ' પહેલાં';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$w = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    //Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
    var dateFormats = {
      full: 'EEEE, d MMMM, y',
      // CLDR #1825
      long: 'd MMMM, y',
      // CLDR #1826
      medium: 'd MMM, y',
      // CLDR #1827
      short: 'd/M/yy' // CLDR #1828

    };
    var timeFormats = {
      full: 'hh:mm:ss a zzzz',
      // CLDR #1829
      long: 'hh:mm:ss a z',
      // CLDR #1830
      medium: 'hh:mm:ss a',
      // CLDR #1831
      short: 'hh:mm a' // CLDR #1832

    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      // CLDR #1833
      long: '{{date}} {{time}}',
      // CLDR #1834
      medium: '{{date}} {{time}}',
      // CLDR #1835
      short: '{{date}} {{time}}' // CLDR #1836

    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$p = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    // Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
    var formatRelativeLocale = {
      lastWeek: "'પાછલા' eeee p",
      // CLDR #1384
      yesterday: "'ગઈકાલે' p",
      // CLDR #1409
      today: "'આજે' p",
      // CLDR #1410
      tomorrow: "'આવતીકાલે' p",
      // CLDR #1411
      nextWeek: 'eeee p',
      // CLDR #1386
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$p = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // https://www.unicode.org/cldr/charts/32/summary/gu.html
    // #1621 - #1630
    var eraValues = {
      narrow: ['ઈસપૂ', 'ઈસ'],
      abbreviated: ['ઈ.સ.પૂર્વે', 'ઈ.સ.'],
      wide: ['ઈસવીસન પૂર્વે', 'ઈસવીસન'] // https://www.unicode.org/cldr/charts/32/summary/gu.html
      // #1631 - #1654

    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1લો ત્રિમાસ', '2જો ત્રિમાસ', '3જો ત્રિમાસ', '4થો ત્રિમાસ'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.
      // https://www.unicode.org/cldr/charts/32/summary/gu.html
      // #1655 - #1726

    };
    var monthValues = {
      narrow: ['જા', 'ફે', 'મા', 'એ', 'મે', 'જૂ', 'જુ', 'ઓ', 'સ', 'ઓ', 'ન', 'ડિ'],
      abbreviated: ['જાન્યુ', 'ફેબ્રુ', 'માર્ચ', 'એપ્રિલ', 'મે', 'જૂન', 'જુલાઈ', 'ઑગસ્ટ', 'સપ્ટે', 'ઓક્ટો', 'નવે', 'ડિસે'],
      wide: ['જાન્યુઆરી', 'ફેબ્રુઆરી', 'માર્ચ', 'એપ્રિલ', 'મે', 'જૂન', 'જુલાઇ', 'ઓગસ્ટ', 'સપ્ટેમ્બર', 'ઓક્ટોબર', 'નવેમ્બર', 'ડિસેમ્બર'] // https://www.unicode.org/cldr/charts/32/summary/gu.html
      // #1727 - #1768

    };
    var dayValues = {
      narrow: ['ર', 'સો', 'મં', 'બુ', 'ગુ', 'શુ', 'શ'],
      short: ['ર', 'સો', 'મં', 'બુ', 'ગુ', 'શુ', 'શ'],
      abbreviated: ['રવિ', 'સોમ', 'મંગળ', 'બુધ', 'ગુરુ', 'શુક્ર', 'શનિ'],
      wide: ['રવિવાર'
      /* Sunday */
      , 'સોમવાર'
      /* Monday */
      , 'મંગળવાર'
      /* Tuesday */
      , 'બુધવાર'
      /* Wednesday */
      , 'ગુરુવાર'
      /* Thursday */
      , 'શુક્રવાર'
      /* Friday */
      , 'શનિવાર'
      /* Saturday */
      ] // https://www.unicode.org/cldr/charts/32/summary/gu.html
      // #1783 - #1824

    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'મ.રાત્રિ',
        noon: 'બ.',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: '​મધ્યરાત્રિ',
        noon: 'બપોરે',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: '​મધ્યરાત્રિ',
        noon: 'બપોરે',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'મ.રાત્રિ',
        noon: 'બપોરે',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'મધ્યરાત્રિ',
        noon: 'બપોરે',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: '​મધ્યરાત્રિ',
        noon: 'બપોરે',
        morning: 'સવારે',
        afternoon: 'બપોરે',
        evening: 'સાંજે',
        night: 'રાત્રે'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$p = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(લ|જ|થ|ઠ્ઠ|મ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ઈસપૂ|ઈસ)/i,
      abbreviated: /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i,
      wide: /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i
    };
    var parseEraPatterns = {
      any: [/^(ઈસપૂ|ઈસ)/i, /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i, /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](લો|જો|થો)? ત્રિમાસ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[જાફેમાએમેજૂજુઓસઓનડિ]/i,
      abbreviated: /^(જાન્યુ|ફેબ્રુ|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઈ|ઑગસ્ટ|સપ્ટે|ઓક્ટો|નવે|ડિસે)/i,
      wide: /^(જાન્યુઆરી|ફેબ્રુઆરી|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઇ|ઓગસ્ટ|સપ્ટેમ્બર|ઓક્ટોબર|નવેમ્બર|ડિસેમ્બર)/i
    };
    var parseMonthPatterns = {
      narrow: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i],
      any: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i]
    };
    var matchDayPatterns = {
      narrow: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
      short: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
      abbreviated: /^(રવિ|સોમ|મંગળ|બુધ|ગુરુ|શુક્ર|શનિ)/i,
      wide: /^(રવિવાર|સોમવાર|મંગળવાર|બુધવાર|ગુરુવાર|શુક્રવાર|શનિવાર)/i
    };
    var parseDayPatterns = {
      narrow: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i],
      any: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|મ\.?|સ|બ|સાં|રા)/i,
      any: /^(a|p|મ\.?|સ|બ|સાં|રા)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^મ\.?/i,
        noon: /^બ/i,
        morning: /સ/i,
        afternoon: /બ/i,
        evening: /સાં/i,
        night: /રા/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var gu = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$q);

    var _index2 = _interopRequireDefault(formatLong_1$w);

    var _index3 = _interopRequireDefault(formatRelative_1$p);

    var _index4 = _interopRequireDefault(localize_1$p);

    var _index5 = _interopRequireDefault(match_1$p);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Gujarati locale (India).
     * @language Gujarati
     * @iso-639-2 guj
     * @author Manaday Mavani [@ManadayM]{@link https://github.com/manadaym}
     */
    var locale = {
      code: 'gu',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$r = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'פחות משנייה',
        two: 'פחות משתי שניות',
        other: 'פחות מ־{{count}} שניות'
      },
      xSeconds: {
        one: 'שנייה',
        two: 'שתי שניות',
        other: '{{count}} שניות'
      },
      halfAMinute: 'חצי דקה',
      lessThanXMinutes: {
        one: 'פחות מדקה',
        two: 'פחות משתי דקות',
        other: 'פחות מ־{{count}} דקות'
      },
      xMinutes: {
        one: 'דקה',
        two: 'שתי דקות',
        other: '{{count}} דקות'
      },
      aboutXHours: {
        one: 'כשעה',
        two: 'כשעתיים',
        other: 'כ־{{count}} שעות'
      },
      xHours: {
        one: 'שעה',
        two: 'שעתיים',
        other: '{{count}} שעות'
      },
      xDays: {
        one: 'יום',
        two: 'יומיים',
        other: '{{count}} ימים'
      },
      aboutXWeeks: {
        one: 'כשבוע',
        two: 'כשבועיים',
        other: 'כ־{{count}} שבועות'
      },
      xWeeks: {
        one: 'שבוע',
        two: 'שבועיים',
        other: '{{count}} שבועות'
      },
      aboutXMonths: {
        one: 'כחודש',
        two: 'כחודשיים',
        other: 'כ־{{count}} חודשים'
      },
      xMonths: {
        one: 'חודש',
        two: 'חודשיים',
        other: '{{count}} חודשים'
      },
      aboutXYears: {
        one: 'כשנה',
        two: 'כשנתיים',
        other: 'כ־{{count}} שנים'
      },
      xYears: {
        one: 'שנה',
        two: 'שנתיים',
        other: '{{count}} שנים'
      },
      overXYears: {
        one: 'יותר משנה',
        two: 'יותר משנתיים',
        other: 'יותר מ־{{count}} שנים'
      },
      almostXYears: {
        one: 'כמעט שנה',
        two: 'כמעט שנתיים',
        other: 'כמעט {{count}} שנים'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {}; // Return word instead of `in one day` or `one day ago`

      if (token === 'xDays' && options.addSuffix && count <= 2) {
        var past = {
          1: 'אתמול',
          2: 'שלשום'
        };
        var future = {
          1: 'מחר',
          2: 'מחרתיים'
        };
        return options.comparison > 0 ? future[count] : past[count];
      }

      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2) {
        result = formatDistanceLocale[token].two;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'בעוד ' + result;
        } else {
          return 'לפני ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$x = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d בMMMM y',
      long: 'd בMMMM y',
      medium: 'd בMMM y',
      short: 'd.M.y'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'בשעה' {{time}}",
      long: "{{date}} 'בשעה' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'שעבר בשעה' p",
      yesterday: "'אתמול בשעה' p",
      today: "'היום בשעה' p",
      tomorrow: "'מחר בשעה' p",
      nextWeek: "eeee 'בשעה' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['לפנה״ס', 'לספירה'],
      abbreviated: ['לפנה״ס', 'לספירה'],
      wide: ['לפני הספירה', 'לספירה']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['רבעון 1', 'רבעון 2', 'רבעון 3', 'רבעון 4']
    };
    var monthValues = {
      narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
      abbreviated: ['ינו׳', 'פבר׳', 'מרץ', 'אפר׳', 'מאי', 'יוני', 'יולי', 'אוג׳', 'ספט׳', 'אוק׳', 'נוב׳', 'דצמ׳'],
      wide: ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר']
    };
    var dayValues = {
      narrow: ['א׳', 'ב׳', 'ג׳', 'ד׳', 'ה׳', 'ו׳', 'ש׳'],
      short: ['א׳', 'ב׳', 'ג׳', 'ד׳', 'ה׳', 'ו׳', 'ש׳'],
      abbreviated: ['יום א׳', 'יום ב׳', 'יום ג׳', 'יום ד׳', 'יום ה׳', 'יום ו׳', 'שבת'],
      wide: ['יום ראשון', 'יום שני', 'יום שלישי', 'יום רביעי', 'יום חמישי', 'יום שישי', 'יום שבת']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בוקר',
        afternoon: 'אחר הצהריים',
        evening: 'ערב',
        night: 'לילה'
      },
      abbreviated: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בוקר',
        afternoon: 'אחר הצהריים',
        evening: 'ערב',
        night: 'לילה'
      },
      wide: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בוקר',
        afternoon: 'אחר הצהריים',
        evening: 'ערב',
        night: 'לילה'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בבוקר',
        afternoon: 'בצהריים',
        evening: 'בערב',
        night: 'בלילה'
      },
      abbreviated: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בבוקר',
        afternoon: 'אחר הצהריים',
        evening: 'בערב',
        night: 'בלילה'
      },
      wide: {
        am: 'לפנה״צ',
        pm: 'אחה״צ',
        midnight: 'חצות',
        noon: 'צהריים',
        morning: 'בבוקר',
        afternoon: 'אחר הצהריים',
        evening: 'בערב',
        night: 'בלילה'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber); // We only show words till 10

      if (number <= 0 || number > 10) return number;
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var isFemale = ['year', 'hour', 'minute', 'second'].indexOf(unit) >= 0;
      var male = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שביעי', 'שמיני', 'תשיעי', 'עשירי'];
      var female = ['ראשונה', 'שנייה', 'שלישית', 'רביעית', 'חמישית', 'שישית', 'שביעית', 'שמינית', 'תשיעית', 'עשירית'];
      var index = number - 1;
      return isFemale ? female[index] : male[index];
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+|(ראשון|שני|שלישי|רביעי|חמישי|שישי|שביעי|שמיני|תשיעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|תשיעית|עשירית))/i;
    var parseOrdinalNumberPattern = /^(\d+|רא|שנ|של|רב|ח|שי|שב|שמ|ת|ע)/i;
    var matchEraPatterns = {
      narrow: /^ל(ספירה|פנה״ס)/i,
      abbreviated: /^ל(ספירה|פנה״ס)/i,
      wide: /^ל(פני ה)?ספירה/i
    };
    var parseEraPatterns = {
      any: [/^לפ/i, /^לס/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^רבעון [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^\d+/i,
      abbreviated: /^(ינו|פבר|מרץ|אפר|מאי|יוני|יולי|אוג|ספט|אוק|נוב|דצמ)׳?/i,
      wide: /^(ינואר|פברואר|מרץ|אפריל|מאי|יוני|יולי|אוגוסט|ספטמבר|אוקטובר|נובמבר|דצמבר)/i
    };
    var parseMonthPatterns = {
      narrow: [/^1$/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
      any: [/^ינ/i, /^פ/i, /^מר/i, /^אפ/i, /^מא/i, /^יונ/i, /^יול/i, /^אוג/i, /^ס/i, /^אוק/i, /^נ/i, /^ד/i]
    };
    var matchDayPatterns = {
      narrow: /^[אבגדהוש]׳/i,
      short: /^[אבגדהוש]׳/i,
      abbreviated: /^(שבת|יום (א|ב|ג|ד|ה|ו)׳)/i,
      wide: /^יום (ראשון|שני|שלישי|רביעי|חמישי|שישי|שבת)/i
    };
    var parseDayPatterns = {
      abbreviated: [/א׳$/i, /ב׳$/i, /ג׳$/i, /ד׳$/i, /ה׳$/i, /ו׳$/i, /^ש/i],
      wide: [/ן$/i, /ני$/i, /לישי$/i, /עי$/i, /מישי$/i, /שישי$/i, /ת$/i],
      any: [/^א/i, /^ב/i, /^ג/i, /^ד/i, /^ה/i, /^ו/i, /^ש/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(אחר ה|ב)?(חצות|צהריים|בוקר|ערב|לילה|אחה״צ|לפנה״צ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^לפ/i,
        pm: /^אחה/i,
        midnight: /^ח/i,
        noon: /^צ/i,
        morning: /בוקר/i,
        afternoon: /בצ|אחר/i,
        evening: /ערב/i,
        night: /לילה/i
      }
    };
    var ordinalName = ['רא', 'שנ', 'של', 'רב', 'ח', 'שי', 'שב', 'שמ', 'ת', 'ע'];
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          var number = parseInt(value, 10);
          return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var he = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$r);

    var _index2 = _interopRequireDefault(formatLong_1$x);

    var _index3 = _interopRequireDefault(formatRelative_1$q);

    var _index4 = _interopRequireDefault(localize_1$q);

    var _index5 = _interopRequireDefault(match_1$q);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Hebrew locale.
     * @language Hebrew
     * @iso-639-2 heb
     * @author Nir Lahad [@nirlah]{@link https://github.com/nirlah}
     */
    var locale = {
      code: 'he',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var localize_1$r = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var numberValues = {
      locale: {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
      },
      number: {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
      } // CLDR #1585 - #1592

    };
    var eraValues = {
      narrow: ['ईसा-पूर्व', 'ईस्वी'],
      abbreviated: ['ईसा-पूर्व', 'ईस्वी'],
      wide: ['ईसा-पूर्व', 'ईसवी सन'] // CLDR #1593 - #1616

    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['ति1', 'ति2', 'ति3', 'ति4'],
      wide: ['पहली तिमाही', 'दूसरी तिमाही', 'तीसरी तिमाही', 'चौथी तिमाही'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.
      // https://www.unicode.org/cldr/charts/32/summary/hi.html
      // CLDR #1617 - #1688

    };
    var monthValues = {
      narrow: ['ज', 'फ़', 'मा', 'अ', 'मई', 'जू', 'जु', 'अग', 'सि', 'अक्तू', 'न', 'दि'],
      abbreviated: ['जन', 'फ़र', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुल', 'अग', 'सित', 'अक्तू', 'नव', 'दिस'],
      wide: ['जनवरी', 'फ़रवरी', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुलाई', 'अगस्त', 'सितंबर', 'अक्तूबर', 'नवंबर', 'दिसंबर'] // CLDR #1689 - #1744

    };
    var dayValues = {
      narrow: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
      short: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
      abbreviated: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
      wide: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      },
      abbreviated: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      },
      wide: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      },
      abbreviated: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      },
      wide: {
        am: 'पूर्वाह्न',
        pm: 'अपराह्न',
        midnight: 'मध्यरात्रि',
        noon: 'दोपहर',
        morning: 'सुबह',
        afternoon: 'दोपहर',
        evening: 'शाम',
        night: 'रात'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = localize.localeToNumber(dirtyNumber);
      var localeNumber = localize.numberToLocale(number);
      var rem10 = number % 10;

      switch (rem10) {
        case 2:
        case 3:
        case 4:
        case 6:
        case 1:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0:
          return localeNumber;
      }
    }

    function localeToNumber(locale) {
      var number = locale.toString().replace(/[१२३४५६७८९०]/g, function (match) {
        return numberValues.number[match];
      });
      return Number(number);
    }

    function numberToLocale(number) {
      return number.toString().replace(/\d/g, function (match) {
        return numberValues.locale[match];
      });
    }

    var localize = {
      localeToNumber: localeToNumber,
      numberToLocale: numberToLocale,
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$s = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    var _index = _interopRequireDefault(localize_1$r);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Source: https://www.unicode.org/cldr/charts/32/summary/hi.html
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: '१ सेकंड से कम',
        // CLDR #1310
        other: '{{count}} सेकंड से कम'
      },
      xSeconds: {
        one: '१ सेकंड',
        other: '{{count}} सेकंड'
      },
      halfAMinute: 'आधा मिनट',
      lessThanXMinutes: {
        one: '१ मिनट से कम',
        other: '{{count}} मिनट से कम'
      },
      xMinutes: {
        one: '१ मिनट',
        // CLDR #1307
        other: '{{count}} मिनट'
      },
      aboutXHours: {
        one: 'लगभग १ घंटा',
        other: 'लगभग {{count}} घंटे'
      },
      xHours: {
        one: '१ घंटा',
        // CLDR #1304
        other: '{{count}} घंटे' // CLDR #4467

      },
      xDays: {
        one: '१ दिन',
        // CLDR #1286
        other: '{{count}} दिन'
      },
      aboutXWeeks: {
        one: 'लगभग १ सप्ताह',
        other: 'लगभग {{count}} सप्ताह'
      },
      xWeeks: {
        one: '१ सप्ताह',
        other: '{{count}} सप्ताह'
      },
      aboutXMonths: {
        one: 'लगभग १ महीना',
        other: 'लगभग {{count}} महीने'
      },
      xMonths: {
        one: '१ महीना',
        other: '{{count}} महीने'
      },
      aboutXYears: {
        one: 'लगभग १ वर्ष',
        other: 'लगभग {{count}} वर्ष' // CLDR #4823

      },
      xYears: {
        one: '१ वर्ष',
        other: '{{count}} वर्ष'
      },
      overXYears: {
        one: '१ वर्ष से अधिक',
        other: '{{count}} वर्ष से अधिक'
      },
      almostXYears: {
        one: 'लगभग १ वर्ष',
        other: 'लगभग {{count}} वर्ष'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', _index.default.numberToLocale(count));
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + 'मे ';
        } else {
          return result + ' पहले';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, do MMMM, y',
      // CLDR #1787
      long: 'do MMMM, y',
      // CLDR #1788
      medium: 'd MMM, y',
      // CLDR #1789
      short: 'dd/MM/yyyy' // CLDR #1790

    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      // CLDR #1791
      long: 'h:mm:ss a z',
      // CLDR #1792
      medium: 'h:mm:ss a',
      // CLDR #1793
      short: 'h:mm a' // CLDR #1794

    };
    var dateTimeFormats = {
      full: "{{date}} 'को' {{time}}",
      // CLDR #1795
      long: "{{date}} 'को' {{time}}",
      // CLDR #1796
      medium: '{{date}}, {{time}}',
      // CLDR #1797
      short: '{{date}}, {{time}}' // CLDR #1798

    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$r = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'पिछले' eeee p",
      yesterday: "'कल' p",
      today: "'आज' p",
      tomorrow: "'कल' p",
      nextWeek: "eeee 'को' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var match_1$r = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    var _index3 = _interopRequireDefault(localize_1$r);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
    var parseOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
    var matchEraPatterns = {
      narrow: /^(ईसा-पूर्व|ईस्वी)/i,
      abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
      wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ति[1234]/i,
      wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
      abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
      wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ज/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^न/i, /^दि/i],
      any: [/^जन/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^नव/i, /^दिस/i]
    };
    var matchDayPatterns = {
      narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
      short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
      abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
      wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
    };
    var parseDayPatterns = {
      narrow: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i],
      any: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
      any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^पूर्वाह्न/i,
        pm: /^अपराह्न/i,
        midnight: /^मध्य/i,
        noon: /^दो/i,
        morning: /सु/i,
        afternoon: /दो/i,
        evening: /शा/i,
        night: /रा/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: _index3.default.localeToNumber
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var hi = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$s);

    var _index2 = _interopRequireDefault(formatLong_1$y);

    var _index3 = _interopRequireDefault(formatRelative_1$r);

    var _index4 = _interopRequireDefault(localize_1$r);

    var _index5 = _interopRequireDefault(match_1$r);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Hindi locale (India).
     * @language Hindi
     * @iso-639-2 hin
     * @author Mukesh Mandiwal [@mukeshmandiwal]{@link https://github.com/mukeshmandiwal}
     */
    var locale = {
      code: 'hi',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$t = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: 'manje od 1 sekunde',
          withPrepositionAgo: 'manje od 1 sekunde',
          withPrepositionIn: 'manje od 1 sekundu'
        },
        dual: 'manje od {{count}} sekunde',
        other: 'manje od {{count}} sekundi'
      },
      xSeconds: {
        one: {
          standalone: '1 sekunda',
          withPrepositionAgo: '1 sekunde',
          withPrepositionIn: '1 sekundu'
        },
        dual: '{{count}} sekunde',
        other: '{{count}} sekundi'
      },
      halfAMinute: 'pola minute',
      lessThanXMinutes: {
        one: {
          standalone: 'manje od 1 minute',
          withPrepositionAgo: 'manje od 1 minute',
          withPrepositionIn: 'manje od 1 minutu'
        },
        dual: 'manje od {{count}} minute',
        other: 'manje od {{count}} minuta'
      },
      xMinutes: {
        one: {
          standalone: '1 minuta',
          withPrepositionAgo: '1 minute',
          withPrepositionIn: '1 minutu'
        },
        dual: '{{count}} minute',
        other: '{{count}} minuta'
      },
      aboutXHours: {
        one: {
          standalone: 'oko 1 sat',
          withPrepositionAgo: 'oko 1 sat',
          withPrepositionIn: 'oko 1 sat'
        },
        dual: 'oko {{count}} sata',
        other: 'oko {{count}} sati'
      },
      xHours: {
        one: {
          standalone: '1 sat',
          withPrepositionAgo: '1 sat',
          withPrepositionIn: '1 sat'
        },
        dual: '{{count}} sata',
        other: '{{count}} sati'
      },
      xDays: {
        one: {
          standalone: '1 dan',
          withPrepositionAgo: '1 dan',
          withPrepositionIn: '1 dan'
        },
        dual: '{{count}} dana',
        other: '{{count}} dana'
      },
      aboutXWeeks: {
        one: {
          standalone: 'oko 1 tjedan',
          withPrepositionAgo: 'oko 1 tjedan',
          withPrepositionIn: 'oko 1 tjedan'
        },
        dual: 'oko {{count}} tjedna',
        other: 'oko {{count}} tjedana'
      },
      xWeeks: {
        one: {
          standalone: '1 tjedan',
          withPrepositionAgo: '1 tjedan',
          withPrepositionIn: '1 tjedan'
        },
        dual: '{{count}} tjedna',
        other: '{{count}} tjedana'
      },
      aboutXMonths: {
        one: {
          standalone: 'oko 1 mjesec',
          withPrepositionAgo: 'oko 1 mjesec',
          withPrepositionIn: 'oko 1 mjesec'
        },
        dual: 'oko {{count}} mjeseca',
        other: 'oko {{count}} mjeseci'
      },
      xMonths: {
        one: {
          standalone: '1 mjesec',
          withPrepositionAgo: '1 mjesec',
          withPrepositionIn: '1 mjesec'
        },
        dual: '{{count}} mjeseca',
        other: '{{count}} mjeseci'
      },
      aboutXYears: {
        one: {
          standalone: 'oko 1 godinu',
          withPrepositionAgo: 'oko 1 godinu',
          withPrepositionIn: 'oko 1 godinu'
        },
        dual: 'oko {{count}} godine',
        other: 'oko {{count}} godina'
      },
      xYears: {
        one: {
          standalone: '1 godina',
          withPrepositionAgo: '1 godine',
          withPrepositionIn: '1 godinu'
        },
        dual: '{{count}} godine',
        other: '{{count}} godina'
      },
      overXYears: {
        one: {
          standalone: 'preko 1 godinu',
          withPrepositionAgo: 'preko 1 godinu',
          withPrepositionIn: 'preko 1 godinu'
        },
        dual: 'preko {{count}} godine',
        other: 'preko {{count}} godina'
      },
      almostXYears: {
        one: {
          standalone: 'gotovo 1 godinu',
          withPrepositionAgo: 'gotovo 1 godinu',
          withPrepositionIn: 'gotovo 1 godinu'
        },
        dual: 'gotovo {{count}} godine',
        other: 'gotovo {{count}} godina'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            result = formatDistanceLocale[token].one.withPrepositionIn;
          } else {
            result = formatDistanceLocale[token].one.withPrepositionAgo;
          }
        } else {
          result = formatDistanceLocale[token].one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
      ) {
          result = formatDistanceLocale[token].dual.replace('{{count}}', count);
        } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'za ' + result;
        } else {
          return 'prije ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d. MMMM y.',
      long: 'd. MMMM y.',
      medium: 'd. MMM y.',
      short: 'dd. MM. y.'
    };
    var timeFormats = {
      full: 'HH:mm:ss (zzzz)',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$s = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'prošlu nedjelju u' p";

          case 3:
            return "'prošlu srijedu u' p";

          case 6:
            return "'prošlu subotu u' p";

          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      yesterday: "'jučer u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'iduću nedjelju u' p";

          case 3:
            return "'iduću srijedu u' p";

          case 6:
            return "'iduću subotu u' p";

          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$s = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number).concat('.');
    }

    var eraValues = {
      narrow: ['pr.n.e.', 'AD'],
      abbreviated: ['pr. Kr.', 'po. Kr.'],
      wide: ['Prije Krista', 'Poslije Krista']
    };
    var monthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['sij', 'velj', 'ožu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
      wide: ['siječanj', 'veljača', 'ožujak', 'travanj', 'svibanj', 'lipanj', 'srpanj', 'kolovoz', 'rujan', 'listopad', 'studeni', 'prosinac']
    };
    var formattingMonthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['sij', 'velj', 'ožu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
      wide: ['siječnja', 'veljače', 'ožujka', 'travnja', 'svibnja', 'lipnja', 'srpnja', 'kolovoza', 'rujna', 'listopada', 'studenog', 'prosinca']
    };
    var quarterValues = {
      narrow: ['1.', '2.', '3.', '4.'],
      abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var dayValues = {
      narrow: ['N', 'P', 'U', 'S', 'Č', 'P', 'S'],
      short: ['ned', 'pon', 'uto', 'sri', 'čet', 'pet', 'sub'],
      abbreviated: ['ned', 'pon', 'uto', 'sri', 'čet', 'pet', 'sub'],
      wide: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota']
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'popodne',
        evening: 'navečer',
        night: 'noću'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'popodne',
        evening: 'navečer',
        night: 'noću'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'poslije podne',
        evening: 'navečer',
        night: 'noću'
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'popodne',
        evening: 'navečer',
        night: 'noću'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'popodne',
        evening: 'navečer',
        night: 'noću'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutro',
        afternoon: 'poslije podne',
        evening: 'navečer',
        night: 'noću'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$s = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
      wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(sij|velj|(ožu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
      wide: /^((siječanj|siječnja|sijecanj|sijecnja)|(veljača|veljače|veljaca|veljace)|(ožujak|ožujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
    };
    var parseMonthPatterns = {
      narrow: [/(10|11|12|[123456789])/i],
      abbreviated: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i],
      wide: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i]
    };
    var matchDayPatterns = {
      narrow: /^[npusčc]/i,
      short: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
      wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|ponoc|ponoć|(po)?podne|navecer|navečer|noću|poslije podne|ujutro)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(navece|naveče)/i,
        night: /(nocu|noću)/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'wide'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var hr = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$t);

    var _index2 = _interopRequireDefault(formatLong_1$z);

    var _index3 = _interopRequireDefault(formatRelative_1$s);

    var _index4 = _interopRequireDefault(localize_1$s);

    var _index5 = _interopRequireDefault(match_1$s);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Croatian locale.
     * @language Croatian
     * @iso-639-2 hrv
     * @author Matija Marohnić [@silvenon]{@link https://github.com/silvenon}
     * @author Manico [@manico]{@link https://github.com/manico}
     * @author Ivan Jeržabek [@jerzabek]{@link https://github.com/jerzabek}
     */
    var locale = {
      code: 'hr',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$u = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var translations = {
      about: 'körülbelül',
      over: 'több mint',
      almost: 'majdnem',
      lessthan: 'kevesebb mint'
    };
    var withoutSuffixes = {
      xseconds: ' másodperc',
      halfaminute: 'fél perc',
      xminutes: ' perc',
      xhours: ' óra',
      xdays: ' nap',
      xweeks: ' hét',
      xmonths: ' hónap',
      xyears: ' év'
    };
    var withSuffixes = {
      xseconds: {
        '-1': ' másodperccel ezelőtt',
        '1': ' másodperc múlva',
        '0': ' másodperce'
      },
      halfaminute: {
        '-1': 'fél perccel ezelőtt',
        '1': 'fél perc múlva',
        '0': 'fél perce'
      },
      xminutes: {
        '-1': ' perccel ezelőtt',
        '1': ' perc múlva',
        '0': ' perce'
      },
      xhours: {
        '-1': ' órával ezelőtt',
        '1': ' óra múlva',
        '0': ' órája'
      },
      xdays: {
        '-1': ' nappal ezelőtt',
        '1': ' nap múlva',
        '0': ' napja'
      },
      xweeks: {
        '-1': ' héttel ezelőtt',
        '1': ' hét múlva',
        '0': ' hete'
      },
      xmonths: {
        '-1': ' hónappal ezelőtt',
        '1': ' hónap múlva',
        '0': ' hónapja'
      },
      xyears: {
        '-1': ' évvel ezelőtt',
        '1': ' év múlva',
        '0': ' éve'
      }
    };

    function translate(number, addSuffix, key, comparison) {
      var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];

      if (key === 'halfaminute') {
        return translated;
      }

      return number + translated;
    }

    function formatDistance(token, count, options) {
      options = options || {};
      var adverb = token.match(/about|over|almost|lessthan/i);
      var unit = token.replace(adverb, '');
      var result;
      result = translate(count, options.addSuffix, unit.toLowerCase(), options.comparison);

      if (adverb) {
        result = translations[adverb[0].toLowerCase()] + ' ' + result;
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$A = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'y. MMMM d., EEEE',
      long: 'y. MMMM d.',
      medium: 'y. MMM d.',
      short: 'y. MM. dd.'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$t = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var accusativeWeekdays = ['vasárnap', 'hétfőn', 'kedden', 'szerdán', 'csütörtökön', 'pénteken', 'szombaton'];

    function week(isFuture) {
      return function (date, _baseDate, _options) {
        var day = date.getUTCDay();
        return (isFuture ? '' : "'múlt' ") + "'" + accusativeWeekdays[day] + "'" + " p'-kor'";
      };
    }

    var formatRelativeLocale = {
      lastWeek: week(false),
      yesterday: "'tegnap' p'-kor'",
      today: "'ma' p'-kor'",
      tomorrow: "'holnap' p'-kor'",
      nextWeek: week(true),
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$t = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ie.', 'isz.'],
      abbreviated: ['i. e.', 'i. sz.'],
      wide: ['Krisztus előtt', 'időszámításunk szerint']
    };
    var quarterValues = {
      narrow: ['1.', '2.', '3.', '4.'],
      abbreviated: ['1. n.év', '2. n.év', '3. n.év', '4. n.év'],
      wide: ['1. negyedév', '2. negyedév', '3. negyedév', '4. negyedév']
    };
    var formattingQuarterValues = {
      narrow: ['I.', 'II.', 'III.', 'IV.'],
      abbreviated: ['I. n.év', 'II. n.év', 'III. n.év', 'IV. n.év'],
      wide: ['I. negyedév', 'II. negyedév', 'III. negyedév', 'IV. negyedév']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'Á', 'M', 'J', 'J', 'A', 'Sz', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'febr.', 'márc.', 'ápr.', 'máj.', 'jún.', 'júl.', 'aug.', 'szept.', 'okt.', 'nov.', 'dec.'],
      wide: ['január', 'február', 'március', 'április', 'május', 'június', 'július', 'augusztus', 'szeptember', 'október', 'november', 'december']
    };
    var dayValues = {
      narrow: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
      short: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
      abbreviated: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
      wide: ['vasárnap', 'hétfő', 'kedd', 'szerda', 'csütörtök', 'péntek', 'szombat']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'de.',
        pm: 'du.',
        midnight: 'éjfél',
        noon: 'dél',
        morning: 'reggel',
        afternoon: 'du.',
        evening: 'este',
        night: 'éjjel'
      },
      abbreviated: {
        am: 'de.',
        pm: 'du.',
        midnight: 'éjfél',
        noon: 'dél',
        morning: 'reggel',
        afternoon: 'du.',
        evening: 'este',
        night: 'éjjel'
      },
      wide: {
        am: 'de.',
        pm: 'du.',
        midnight: 'éjfél',
        noon: 'dél',
        morning: 'reggel',
        afternoon: 'délután',
        evening: 'este',
        night: 'éjjel'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        formattingValues: formattingQuarterValues,
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$t = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ie\.|isz\.)/i,
      abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
      wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
    };
    var parseEraPatterns = {
      narrow: [/ie/i, /isz/i],
      abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
      any: [/előtt/i, /(szerint|i. sz.)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]\.?/i,
      abbreviated: /^[1234]?\.?\s?n\.év/i,
      wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
    };
    var parseQuarterPatterns = {
      any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmaásond]|sz/i,
      abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
      wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a|á/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^már/i, /^áp/i, /^máj/i, /^jún/i, /^júl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^([vhkpc]|sz|cs|sz)/i,
      short: /^([vhkp]|sze|cs|szo)/i,
      abbreviated: /^([vhkp]|sze|cs|szo)/i,
      wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
    };
    var parseDayPatterns = {
      narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
      any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
    };
    var matchDayPeriodPatterns = {
      any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^de\.?/i,
        pm: /^du\.?/i,
        midnight: /^éjf/i,
        noon: /^dé/i,
        morning: /reg/i,
        afternoon: /^délu\.?/i,
        evening: /es/i,
        night: /éjj/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var hu = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$u);

    var _index2 = _interopRequireDefault(formatLong_1$A);

    var _index3 = _interopRequireDefault(formatRelative_1$t);

    var _index4 = _interopRequireDefault(localize_1$t);

    var _index5 = _interopRequireDefault(match_1$t);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     *
     * @summary Hungarian locale.
     * @language Hungarian
     *
     * @iso-639-2 hun
     *
     * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
     * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
     * @author Zoltan Szepesi [@twodcube]{@link https://github.com/twodcube}
     */
    var locale = {
      code: 'hu',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$v = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'ավելի քիչ քան 1 վայրկյան',
        other: 'ավելի քիչ քան {{count}} վայրկյան'
      },
      xSeconds: {
        one: '1 վայրկյան',
        other: '{{count}} վայրկյան'
      },
      halfAMinute: 'կես րոպե',
      lessThanXMinutes: {
        one: 'ավելի քիչ քան 1 րոպե',
        other: 'ավելի քիչ քան {{count}} րոպե'
      },
      xMinutes: {
        one: '1 րոպե',
        other: '{{count}} րոպե'
      },
      aboutXHours: {
        one: 'մոտ 1 ժամ',
        other: 'մոտ {{count}} ժամ'
      },
      xHours: {
        one: '1 ժամ',
        other: '{{count}} ժամ'
      },
      xDays: {
        one: '1 օր',
        other: '{{count}} օր'
      },
      aboutXWeeks: {
        one: 'մոտ 1 շաբաթ',
        other: 'մոտ {{count}} շաբաթ'
      },
      xWeeks: {
        one: '1 շաբաթ',
        other: '{{count}} շաբաթ'
      },
      aboutXMonths: {
        one: 'մոտ 1 ամիս',
        other: 'մոտ {{count}} ամիս'
      },
      xMonths: {
        one: '1 ամիս',
        other: '{{count}} ամիս'
      },
      aboutXYears: {
        one: 'մոտ 1 տարի',
        other: 'մոտ {{count}} տարի'
      },
      xYears: {
        one: '1 տարի',
        other: '{{count}} տարի'
      },
      overXYears: {
        one: 'ավելի քան 1 տարի',
        other: 'ավելի քան {{count}} տարի'
      },
      almostXYears: {
        one: 'համարյա 1 տարի',
        other: 'համարյա {{count}} տարի'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' հետո';
        } else {
          return result + ' առաջ';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$B = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'd MMMM, y, EEEE',
      long: 'd MMMM, y',
      medium: 'd MMM, y',
      short: 'dd.MM.yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'ժ․'{{time}}",
      long: "{{date}} 'ժ․'{{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$u = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'նախորդ' eeee p'֊ին'",
      yesterday: "'երեկ' p'֊ին'",
      today: "'այսօր' p'֊ին'",
      tomorrow: "'վաղը' p'֊ին'",
      nextWeek: "'հաջորդ' eeee p'֊ին'",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$u = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['Ք', 'Մ'],
      abbreviated: ['ՔԱ', 'ՄԹ'],
      wide: ['Քրիստոսից առաջ', 'Մեր թվարկության']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Ք1', 'Ք2', 'Ք3', 'Ք4'],
      wide: ['1֊ին քառորդ', '2֊րդ քառորդ', '3֊րդ քառորդ', '4֊րդ քառորդ']
    };
    var monthValues = {
      narrow: ['Հ', 'Փ', 'Մ', 'Ա', 'Մ', 'Հ', 'Հ', 'Օ', 'Ս', 'Հ', 'Ն', 'Դ'],
      abbreviated: ['հուն', 'փետ', 'մար', 'ապր', 'մայ', 'հուն', 'հուլ', 'օգս', 'սեպ', 'հոկ', 'նոյ', 'դեկ'],
      wide: ['հունվար', 'փետրվար', 'մարտ', 'ապրիլ', 'մայիս', 'հունիս', 'հուլիս', 'օգոստոս', 'սեպտեմբեր', 'հոկտեմբեր', 'նոյեմբեր', 'դեկտեմբեր']
    };
    var dayValues = {
      narrow: ['Կ', 'Ե', 'Ե', 'Չ', 'Հ', 'Ո', 'Շ'],
      short: ['կր', 'եր', 'եք', 'չք', 'հգ', 'ուր', 'շբ'],
      abbreviated: ['կիր', 'երկ', 'երք', 'չոր', 'հնգ', 'ուրբ', 'շաբ'],
      wide: ['կիրակի', 'երկուշաբթի', 'երեքշաբթի', 'չորեքշաբթի', 'հինգշաբթի', 'ուրբաթ', 'շաբաթ']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'կեսգշ',
        noon: 'կեսօր',
        morning: 'առավոտ',
        afternoon: 'ցերեկ',
        evening: 'երեկո',
        night: 'գիշեր'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'կեսգիշեր',
        noon: 'կեսօր',
        morning: 'առավոտ',
        afternoon: 'ցերեկ',
        evening: 'երեկո',
        night: 'գիշեր'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'կեսգիշեր',
        noon: 'կեսօր',
        morning: 'առավոտ',
        afternoon: 'ցերեկ',
        evening: 'երեկո',
        night: 'գիշեր'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'կեսգշ',
        noon: 'կեսօր',
        morning: 'առավոտը',
        afternoon: 'ցերեկը',
        evening: 'երեկոյան',
        night: 'գիշերը'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'կեսգիշերին',
        noon: 'կեսօրին',
        morning: 'առավոտը',
        afternoon: 'ցերեկը',
        evening: 'երեկոյան',
        night: 'գիշերը'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'կեսգիշերին',
        noon: 'կեսօրին',
        morning: 'առավոտը',
        afternoon: 'ցերեկը',
        evening: 'երեկոյան',
        night: 'գիշերը'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 < 10) {
        if (rem100 % 10 === 1) {
          return number + '֊ին';
        }
      }

      return number + '֊րդ';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$u = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)((-|֊)?(ին|րդ))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(Ք|Մ)/i,
      abbreviated: /^(Ք\.?\s?Ա\.?|Մ\.?\s?Թ\.?\s?Ա\.?|Մ\.?\s?Թ\.?|Ք\.?\s?Հ\.?)/i,
      wide: /^(քրիստոսից առաջ|մեր թվարկությունից առաջ|մեր թվարկության|քրիստոսից հետո)/i
    };
    var parseEraPatterns = {
      any: [/^(ք|մ)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ք[1234]/i,
      wide: /^[1234]((-|֊)?(ին|րդ)) քառորդ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[հփմաօսնդ]/i,
      abbreviated: /^(հուն|փետ|մար|ապր|մայ|հուն|հուլ|օգս|սեպ|հոկ|նոյ|դեկ)/i,
      wide: /^(հունվար|փետրվար|մարտ|ապրիլ|մայիս|հունիս|հուլիս|օգոստոս|սեպտեմբեր|հոկտեմբեր|նոյեմբեր|դեկտեմբեր)/i
    };
    var parseMonthPatterns = {
      narrow: [/^հ/i, /^փ/i, /^մ/i, /^ա/i, /^մ/i, /^հ/i, /^հ/i, /^օ/i, /^ս/i, /^հ/i, /^ն/i, /^դ/i],
      any: [/^հու/i, /^փ/i, /^մար/i, /^ա/i, /^մայ/i, /^հուն/i, /^հուլ/i, /^օ/i, /^ս/i, /^հոկ/i, /^ն/i, /^դ/i]
    };
    var matchDayPatterns = {
      narrow: /^[եչհոշկ]/i,
      short: /^(կր|եր|եք|չք|հգ|ուր|շբ)/i,
      abbreviated: /^(կիր|երկ|երք|չոր|հնգ|ուրբ|շաբ)/i,
      wide: /^(կիրակի|երկուշաբթի|երեքշաբթի|չորեքշաբթի|հինգշաբթի|ուրբաթ|շաբաթ)/i
    };
    var parseDayPatterns = {
      narrow: [/^կ/i, /^ե/i, /^ե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      short: [/^կ/i, /^եր/i, /^եք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      abbreviated: [/^կ/i, /^երկ/i, /^երք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      wide: [/^կ/i, /^երկ/i, /^երե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([ap]|կեսգշ|կեսօր|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i,
      any: /^([ap]\.?\s?m\.?|կեսգիշեր(ին)?|կեսօր(ին)?|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /կեսգիշեր/i,
        noon: /կեսօր/i,
        morning: /առավոտ/i,
        afternoon: /ցերեկ/i,
        evening: /երեկո/i,
        night: /գիշեր/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var hy = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$v);

    var _index2 = _interopRequireDefault(formatLong_1$B);

    var _index3 = _interopRequireDefault(formatRelative_1$u);

    var _index4 = _interopRequireDefault(localize_1$u);

    var _index5 = _interopRequireDefault(match_1$u);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Armenian locale
     * @language Armenian
     * @iso-639-2 arm
     * @author Alex Igityan [@alexigityan]{@link https://github.com/alexigityan}
     */
    var locale = {
      code: 'hy',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$w = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'kurang dari 1 detik',
        other: 'kurang dari {{count}} detik'
      },
      xSeconds: {
        one: '1 detik',
        other: '{{count}} detik'
      },
      halfAMinute: 'setengah menit',
      lessThanXMinutes: {
        one: 'kurang dari 1 menit',
        other: 'kurang dari {{count}} menit'
      },
      xMinutes: {
        one: '1 menit',
        other: '{{count}} menit'
      },
      aboutXHours: {
        one: 'sekitar 1 jam',
        other: 'sekitar {{count}} jam'
      },
      xHours: {
        one: '1 jam',
        other: '{{count}} jam'
      },
      xDays: {
        one: '1 hari',
        other: '{{count}} hari'
      },
      aboutXWeeks: {
        one: 'sekitar 1 minggu',
        other: 'sekitar {{count}} minggu'
      },
      xWeeks: {
        one: '1 minggu',
        other: '{{count}} minggu'
      },
      aboutXMonths: {
        one: 'sekitar 1 bulan',
        other: 'sekitar {{count}} bulan'
      },
      xMonths: {
        one: '1 bulan',
        other: '{{count}} bulan'
      },
      aboutXYears: {
        one: 'sekitar 1 tahun',
        other: 'sekitar {{count}} tahun'
      },
      xYears: {
        one: '1 tahun',
        other: '{{count}} tahun'
      },
      overXYears: {
        one: 'lebih dari 1 tahun',
        other: 'lebih dari {{count}} tahun'
      },
      almostXYears: {
        one: 'hampir 1 tahun',
        other: 'hampir {{count}} tahun'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'dalam waktu ' + result;
        } else {
          return result + ' yang lalu';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$C = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'd/M/yyyy'
    };
    var timeFormats = {
      full: 'HH.mm.ss',
      long: 'HH.mm.ss',
      medium: 'HH.mm',
      short: 'HH.mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$v = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'lalu pukul' p",
      yesterday: "'Kemarin pukul' p",
      today: "'Hari ini pukul' p",
      tomorrow: "'Besok pukul' p",
      nextWeek: "eeee 'pukul' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$v = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // All data for localization are taken from this page
    // https://www.unicode.org/cldr/charts/32/summary/id.html
    var eraValues = {
      narrow: ['SM', 'M'],
      abbreviated: ['SM', 'M'],
      wide: ['Sebelum Masehi', 'Masehi']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['Kuartal ke-1', 'Kuartal ke-2', 'Kuartal ke-3', 'Kuartal ke-4'] // Note: in Indonesian, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Ags', 'Sep', 'Okt', 'Nov', 'Des'],
      wide: ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
    };
    var dayValues = {
      narrow: ['M', 'S', 'S', 'R', 'K', 'J', 'S'],
      short: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
      abbreviated: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
      wide: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'siang',
        evening: 'sore',
        night: 'malam'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // Can't use "pertama", "kedua" because can't be parsed

      switch (number) {
        default:
          return 'ke-' + number;
      }
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$v = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^ke-(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
      wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
    };
    var parseEraPatterns = {
      any: [/^s/i, /^(m|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K-?\s[1234]/i,
      wide: /^Kuartal ke-?\s?[1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
      wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[srkjm]/i,
      short: /^(min|sen|sel|rab|kam|jum|sab)/i,
      abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
      wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
    };
    var parseDayPatterns = {
      narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pagi/i,
        afternoon: /siang/i,
        evening: /sore/i,
        night: /malam/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var id = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$w);

    var _index2 = _interopRequireDefault(formatLong_1$C);

    var _index3 = _interopRequireDefault(formatRelative_1$v);

    var _index4 = _interopRequireDefault(localize_1$v);

    var _index5 = _interopRequireDefault(match_1$v);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Indonesian locale.
     * @language Indonesian
     * @iso-639-2 ind
     * @author Rahmat Budiharso [@rbudiharso]{@link https://github.com/rbudiharso}
     * @author Benget Nata [@bentinata]{@link https://github.com/bentinata}
     * @author Budi Irawan [@deerawan]{@link https://github.com/deerawan}
     * @author Try Ajitiono [@imballinst]{@link https://github.com/imballinst}
     */
    var locale = {
      code: 'id',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$x = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'minna en 1 sekúnda',
        other: 'minna en {{count}} sekúndur'
      },
      xSeconds: {
        one: '1 sekúnda',
        other: '{{count}} sekúndur'
      },
      halfAMinute: 'hálf mínúta',
      lessThanXMinutes: {
        one: 'minna en 1 mínúta',
        other: 'minna en {{count}} mínútur'
      },
      xMinutes: {
        one: '1 mínúta',
        other: '{{count}} mínútur'
      },
      aboutXHours: {
        one: 'u.þ.b. 1 klukkustund',
        other: 'u.þ.b. {{count}} klukkustundir'
      },
      xHours: {
        one: '1 klukkustund',
        other: '{{count}} klukkustundir'
      },
      xDays: {
        one: '1 dagur',
        other: '{{count}} dagar'
      },
      aboutXWeeks: {
        one: 'um viku',
        other: 'um {{count}} vikur'
      },
      xWeeks: {
        one: '1 viku',
        other: '{{count}} vikur'
      },
      aboutXMonths: {
        one: 'u.þ.b. 1 mánuður',
        other: 'u.þ.b. {{count}} mánuðir'
      },
      xMonths: {
        one: '1 mánuður',
        other: '{{count}} mánuðir'
      },
      aboutXYears: {
        one: 'u.þ.b. 1 ár',
        other: 'u.þ.b. {{count}} ár'
      },
      xYears: {
        one: '1 ár',
        other: '{{count}} ár'
      },
      overXYears: {
        one: 'meira en 1 ár',
        other: 'meira en {{count}} ár'
      },
      almostXYears: {
        one: 'næstum 1 ár',
        other: 'næstum {{count}} ár'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'í ' + result;
        } else {
          return result + ' síðan';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$D = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, do MMMM y',
      long: 'do MMMM y',
      medium: 'do MMM y',
      short: 'd.MM.y'
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$w = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'síðasta' dddd 'kl.' p",
      yesterday: "'í gær kl.' p",
      today: "'í dag kl.' p",
      tomorrow: "'á morgun kl.' p",
      nextWeek: "dddd 'kl.' p",
      other: 'L'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$w = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['f.Kr.', 'e.Kr.'],
      abbreviated: ['f.Kr.', 'e.Kr.'],
      wide: ['fyrir Krist', 'eftir Krist']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1F', '2F', '3F', '4F'],
      wide: ['1. fjórðungur', '2. fjórðungur', '3. fjórðungur', '4. fjórðungur']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'Á', 'S', 'Ó', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mars', 'apríl', 'maí', 'júní', 'júlí', 'ágúst', 'sept.', 'okt.', 'nóv.', 'des.'],
      wide: ['janúar', 'febrúar', 'mars', 'apríl', 'maí', 'júní', 'júlí', 'ágúst', 'september', 'október', 'nóvember', 'desember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'Þ', 'M', 'F', 'F', 'L'],
      short: ['Su', 'Má', 'Þr', 'Mi', 'Fi', 'Fö', 'La'],
      abbreviated: ['sun.', 'mán.', 'þri.', 'mið.', 'fim.', 'fös.', 'lau'],
      wide: ['sunnudagur', 'mánudagur', 'þriðjudagur', 'miðvikudagur', 'fimmtudagur', 'föstudagur', 'laugardagur']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'f',
        pm: 'e',
        midnight: 'miðnætti',
        noon: 'hádegi',
        morning: 'morgunn',
        afternoon: 'síðdegi',
        evening: 'kvöld',
        night: 'nótt'
      },
      abbreviated: {
        am: 'f.h.',
        pm: 'e.h.',
        midnight: 'miðnætti',
        noon: 'hádegi',
        morning: 'morgunn',
        afternoon: 'síðdegi',
        evening: 'kvöld',
        night: 'nótt'
      },
      wide: {
        am: 'fyrir hádegi',
        pm: 'eftir hádegi',
        midnight: 'miðnætti',
        noon: 'hádegi',
        morning: 'morgunn',
        afternoon: 'síðdegi',
        evening: 'kvöld',
        night: 'nótt'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'f',
        pm: 'e',
        midnight: 'á miðnætti',
        noon: 'á hádegi',
        morning: 'að morgni',
        afternoon: 'síðdegis',
        evening: 'um kvöld',
        night: 'um nótt'
      },
      abbreviated: {
        am: 'f.h.',
        pm: 'e.h.',
        midnight: 'á miðnætti',
        noon: 'á hádegi',
        morning: 'að morgni',
        afternoon: 'síðdegis',
        evening: 'um kvöld',
        night: 'um nótt'
      },
      wide: {
        am: 'fyrir hádegi',
        pm: 'eftir hádegi',
        midnight: 'á miðnætti',
        noon: 'á hádegi',
        morning: 'að morgni',
        afternoon: 'síðdegis',
        evening: 'um kvöld',
        night: 'um nótt'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$w = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.Kr\.|e\.Kr\.)/i,
      abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
      wide: /^(fyrir Krist|eftir Krist)/i
    };
    var parseEraPatterns = {
      any: [/^(f\.Kr\.|e\.Kr\.)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234] fjórðungur/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmásónd]/i,
      abbreviated: /^(jan\.|feb\.|mars\.|apríl\.|maí|júní|júlí|águst|sep\.|oct\.|nov\.|dec\.)/i,
      wide: /^(januar|februar|mars|apríl|maí|júní|júlí|águst|september|október|nóvember|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^á/i, /^s/i, /^ó/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maí/i, /^jún/i, /^júl/i, /^áu/i, /^s/i, /^ó/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|má|þr|mi|fi|fö|la)/i,
      abbreviated: /^(sun|mán|þri|mið|fim|fös|lau)\.?/i,
      wide: /^(sunnudagur|mánudagur|þriðjudagur|miðvikudagur|fimmtudagur|föstudagur|laugardagur)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^þ/i, /^m/i, /^f/i, /^f/i, /^l/i],
      any: [/^su/i, /^má/i, /^þr/i, /^mi/i, /^fi/i, /^fö/i, /^la/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(f|e|síðdegis|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i,
      any: /^(fyrir hádegi|eftir hádegi|[ef]\.?h\.?|síðdegis|morgunn|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^mi/i,
        noon: /^há/i,
        morning: /morgunn/i,
        afternoon: /síðdegi/i,
        evening: /kvöld/i,
        night: /nótt/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var is = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$x);

    var _index2 = _interopRequireDefault(formatLong_1$D);

    var _index3 = _interopRequireDefault(formatRelative_1$w);

    var _index4 = _interopRequireDefault(localize_1$w);

    var _index5 = _interopRequireDefault(match_1$w);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Icelandic locale.
     * @language Icelandic
     * @iso-639-2 isl
     * @author Derek Blank [@derekblank]{@link https://github.com/derekblank}
     * @author Arnór Ýmir [@lamayg]{@link https://github.com/lamayg}
     */
    var locale = {
      code: 'is',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'meno di un secondo',
        other: 'meno di {{count}} secondi'
      },
      xSeconds: {
        one: 'un secondo',
        other: '{{count}} secondi'
      },
      halfAMinute: 'alcuni secondi',
      lessThanXMinutes: {
        one: 'meno di un minuto',
        other: 'meno di {{count}} minuti'
      },
      xMinutes: {
        one: 'un minuto',
        other: '{{count}} minuti'
      },
      aboutXHours: {
        one: "circa un'ora",
        other: 'circa {{count}} ore'
      },
      xHours: {
        one: "un'ora",
        other: '{{count}} ore'
      },
      xDays: {
        one: 'un giorno',
        other: '{{count}} giorni'
      },
      aboutXWeeks: {
        one: 'circa una settimana',
        other: 'circa {{count}} settimane'
      },
      xWeeks: {
        one: 'una settimana',
        other: '{{count}} settimane'
      },
      aboutXMonths: {
        one: 'circa un mese',
        other: 'circa {{count}} mesi'
      },
      xMonths: {
        one: 'un mese',
        other: '{{count}} mesi'
      },
      aboutXYears: {
        one: 'circa un anno',
        other: 'circa {{count}} anni'
      },
      xYears: {
        one: 'un anno',
        other: '{{count}} anni'
      },
      overXYears: {
        one: 'più di un anno',
        other: 'più di {{count}} anni'
      },
      almostXYears: {
        one: 'quasi un anno',
        other: 'quasi {{count}} anni'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'tra ' + result;
        } else {
          return result + ' fa';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$E = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$x = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var weekdays = ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato'];

    function lastWeek(day) {
      switch (day) {
        case 0:
          return "'domenica scorsa alle' p";

        default:
          return "'" + weekdays[day] + " scorso alle' p";
      }
    }

    function thisWeek(day) {
      return "'" + weekdays[day] + " alle' p";
    }

    function nextWeek(day) {
      switch (day) {
        case 0:
          return "'domenica prossima alle' p";

        default:
          return "'" + weekdays[day] + " prossimo alle' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'ieri alle' p",
      today: "'oggi alle' p",
      tomorrow: "'domani alle' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$x = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['aC', 'dC'],
      abbreviated: ['a.C.', 'd.C.'],
      wide: ['avanti Cristo', 'dopo Cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['G', 'F', 'M', 'A', 'M', 'G', 'L', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'],
      wide: ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre']
    };
    var dayValues = {
      narrow: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
      short: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
      abbreviated: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
      wide: ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'm.',
        pm: 'p.',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'mattina',
        afternoon: 'pomeriggio',
        evening: 'sera',
        night: 'notte'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'mattina',
        afternoon: 'pomeriggio',
        evening: 'sera',
        night: 'notte'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'mattina',
        afternoon: 'pomeriggio',
        evening: 'sera',
        night: 'notte'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'm.',
        pm: 'p.',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'di mattina',
        afternoon: 'del pomeriggio',
        evening: 'di sera',
        night: 'di notte'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'di mattina',
        afternoon: 'del pomeriggio',
        evening: 'di sera',
        night: 'di notte'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'mezzanotte',
        noon: 'mezzogiorno',
        morning: 'di mattina',
        afternoon: 'del pomeriggio',
        evening: 'di sera',
        night: 'di notte'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$x = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
      wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
    };
    var parseEraPatterns = {
      any: [/^a/i, /^(d|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[gfmalsond]/i,
      abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
      wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmgvs]/i,
      short: /^(do|lu|ma|me|gi|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
      wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
      any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mezza/i,
        noon: /^mezzo/i,
        morning: /mattina/i,
        afternoon: /pomeriggio/i,
        evening: /sera/i,
        night: /notte/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var it = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$y);

    var _index2 = _interopRequireDefault(formatLong_1$E);

    var _index3 = _interopRequireDefault(formatRelative_1$x);

    var _index4 = _interopRequireDefault(localize_1$x);

    var _index5 = _interopRequireDefault(match_1$x);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Italian locale.
     * @language Italian
     * @iso-639-2 ita
     * @author Alberto Restifo [@albertorestifo]{@link https://github.com/albertorestifo}
     * @author Giovanni Polimeni [@giofilo]{@link https://github.com/giofilo}
     * @author Vincenzo Carrese [@vin-car]{@link https://github.com/vin-car}
     */
    var locale = {
      code: 'it',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: '1秒未満',
        other: '{{count}}秒未満',
        oneWithSuffix: '約1秒',
        otherWithSuffix: '約{{count}}秒'
      },
      xSeconds: {
        one: '1秒',
        other: '{{count}}秒'
      },
      halfAMinute: '30秒',
      lessThanXMinutes: {
        one: '1分未満',
        other: '{{count}}分未満',
        oneWithSuffix: '約1分',
        otherWithSuffix: '約{{count}}分'
      },
      xMinutes: {
        one: '1分',
        other: '{{count}}分'
      },
      aboutXHours: {
        one: '約1時間',
        other: '約{{count}}時間'
      },
      xHours: {
        one: '1時間',
        other: '{{count}}時間'
      },
      xDays: {
        one: '1日',
        other: '{{count}}日'
      },
      aboutXWeeks: {
        one: '約1週間',
        other: '約{{count}}週間'
      },
      xWeeks: {
        one: '1週間',
        other: '{{count}}週間'
      },
      aboutXMonths: {
        one: '約1か月',
        other: '約{{count}}か月'
      },
      xMonths: {
        one: '1か月',
        other: '{{count}}か月'
      },
      aboutXYears: {
        one: '約1年',
        other: '約{{count}}年'
      },
      xYears: {
        one: '1年',
        other: '{{count}}年'
      },
      overXYears: {
        one: '1年以上',
        other: '{{count}}年以上'
      },
      almostXYears: {
        one: '1年近く',
        other: '{{count}}年近く'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        if (options.addSuffix && formatDistanceLocale[token].oneWithSuffix) {
          result = formatDistanceLocale[token].oneWithSuffix;
        } else {
          result = formatDistanceLocale[token].one;
        }
      } else {
        if (options.addSuffix && formatDistanceLocale[token].otherWithSuffix) {
          result = formatDistanceLocale[token].otherWithSuffix.replace('{{count}}', count);
        } else {
          result = formatDistanceLocale[token].other.replace('{{count}}', count);
        }
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + '後';
        } else {
          return result + '前';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$F = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'y年M月d日EEEE',
      long: 'y年M月d日',
      medium: 'y/MM/dd',
      short: 'y/MM/dd'
    };
    var timeFormats = {
      full: 'H時mm分ss秒 zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: '先週のeeeeのp',
      yesterday: '昨日のp',
      today: '今日のp',
      tomorrow: '明日のp',
      nextWeek: '翌週のeeeeのp',
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['BC', 'AC'],
      abbreviated: ['紀元前', '西暦'],
      wide: ['紀元前', '西暦']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['第1四半期', '第2四半期', '第3四半期', '第4四半期']
    };
    var monthValues = {
      narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
      abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
      wide: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']
    };
    var dayValues = {
      narrow: ['日', '月', '火', '水', '木', '金', '土'],
      short: ['日', '月', '火', '水', '木', '金', '土'],
      abbreviated: ['日', '月', '火', '水', '木', '金', '土'],
      wide: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日']
    };
    var dayPeriodValues = {
      narrow: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      },
      abbreviated: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      },
      wide: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      },
      abbreviated: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      },
      wide: {
        am: '午前',
        pm: '午後',
        midnight: '深夜',
        noon: '正午',
        morning: '朝',
        afternoon: '午後',
        evening: '夜',
        night: '深夜'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var options = dirtyOptions || {};
      var unit = String(options.unit);

      if (unit === 'date') {
        return number + '日';
      }

      if (unit === 'year') {
        return number + '年';
      }

      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^第?\d+(日)?(年)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(B\.?C\.?|A\.?D\.?)/i,
      abbreviated: /^(紀元[前後]|西暦)/i,
      wide: /^(紀元[前後]|西暦)/i
    };
    var parseEraPatterns = {
      narrow: [/^B/i, /^A/i],
      any: [/^(紀元前)/i, /^(西暦|紀元後)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^Q[1234]/i,
      wide: /^第[1234一二三四１２３４]四半期/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
    };
    var matchMonthPatterns = {
      narrow: /^([123456789]|1[012])/,
      abbreviated: /^([123456789]|1[012])月/i,
      wide: /^([123456789]|1[012])月/i
    };
    var parseMonthPatterns = {
      any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
    };
    var matchDayPatterns = {
      narrow: /^[日月火水木金土]/,
      short: /^[日月火水木金土]/,
      abbreviated: /^[日月火水木金土]/,
      wide: /^[日月火水木金土]曜日/
    };
    var parseDayPatterns = {
      any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]
    };
    var matchDayPeriodPatterns = {
      any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(A|午前)/i,
        pm: /^(P|午後)/i,
        midnight: /^深夜|真夜中/i,
        noon: /^正午/i,
        morning: /^朝/i,
        afternoon: /^午後/i,
        evening: /^夜/i,
        night: /^深夜/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ja = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$z);

    var _index2 = _interopRequireDefault(formatLong_1$F);

    var _index3 = _interopRequireDefault(formatRelative_1$y);

    var _index4 = _interopRequireDefault(localize_1$y);

    var _index5 = _interopRequireDefault(match_1$y);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Japanese locale.
     * @language Japanese
     * @iso-639-2 jpn
     * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
     * @author Yamagishi Kazutoshi [@ykzts]{@link https://github.com/ykzts}
     * @author Luca Ban [@mesqueeb]{@link https://github.com/mesqueeb}
     * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
     * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
     */
    var locale = {
      code: 'ja',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$A = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        past: '{{count}} წამზე ნაკლები ხნის წინ',
        present: '{{count}} წამზე ნაკლები',
        future: '{{count}} წამზე ნაკლებში'
      },
      xSeconds: {
        past: '{{count}} წამის წინ',
        present: '{{count}} წამი',
        future: '{{count}} წამში'
      },
      halfAMinute: {
        past: 'ნახევარი წუთის წინ',
        present: 'ნახევარი წუთი',
        future: 'ნახევარი წუთში'
      },
      lessThanXMinutes: {
        past: '{{count}} წუთზე ნაკლები ხნის წინ',
        present: '{{count}} წუთზე ნაკლები',
        future: '{{count}} წუთზე ნაკლებში'
      },
      xMinutes: {
        past: '{{count}} წუთის წინ',
        present: '{{count}} წუთი',
        future: '{{count}} წუთში'
      },
      aboutXHours: {
        past: 'დაახლოებით {{count}} საათის წინ',
        present: 'დაახლოებით {{count}} საათი',
        future: 'დაახლოებით {{count}} საათში'
      },
      xHours: {
        past: '{{count}} საათის წინ',
        present: '{{count}} საათი',
        future: '{{count}} საათში'
      },
      xDays: {
        past: '{{count}} დღის წინ',
        present: '{{count}} დღე',
        future: '{{count}} დღეში'
      },
      aboutXWeeks: {
        past: 'დაახლოებით {{count}} კვირას წინ',
        present: 'დაახლოებით {{count}} კვირა',
        future: 'დაახლოებით {{count}} კვირაში'
      },
      xWeeks: {
        past: '{{count}} კვირას კვირა',
        present: '{{count}} კვირა',
        future: '{{count}} კვირაში'
      },
      aboutXMonths: {
        past: 'დაახლოებით {{count}} თვის წინ',
        present: 'დაახლოებით {{count}} თვე',
        future: 'დაახლოებით {{count}} თვეში'
      },
      xMonths: {
        past: '{{count}} თვის წინ',
        present: '{{count}} თვე',
        future: '{{count}} თვეში'
      },
      aboutXYears: {
        past: 'დაახლოებით {{count}} წლის წინ',
        present: 'დაახლოებით {{count}} წელი',
        future: 'დაახლოებით {{count}} წელში'
      },
      xYears: {
        past: '{{count}} წლის წინ',
        present: '{{count}} წელი',
        future: '{{count}} წელში'
      },
      overXYears: {
        past: '{{count}} წელზე მეტი ხნის წინ',
        present: '{{count}} წელზე მეტი',
        future: '{{count}} წელზე მეტი ხნის შემდეგ'
      },
      almostXYears: {
        past: 'თითქმის {{count}} წლის წინ',
        present: 'თითქმის {{count}} წელი',
        future: 'თითქმის {{count}} წელში'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (options.addSuffix && options.comparison > 0) {
        result = formatDistanceLocale[token].future.replace('{{count}}', count);
      } else if (options.addSuffix && options.comparison <= 0) {
        result = formatDistanceLocale[token].past.replace('{{count}}', count);
      } else {
        result = formatDistanceLocale[token].present.replace('{{count}}', count);
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$G = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, do MMMM, y',
      long: 'do, MMMM, y',
      medium: 'd, MMM, y',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}'-ზე'",
      long: "{{date}} {{time}}'-ზე'",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'წინა' eeee LT'-ზე'",
      yesterday: "'გუშინ' LT'-ზე'",
      today: "'დღეს' LT'-ზე'",
      tomorrow: "'ხვალ' LT'-ზე'",
      nextWeek: "'შემდეგი' eeee LT'-ზე'",
      other: 'L'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ჩ.წ-მდე', 'ჩ.წ'],
      abbreviated: ['ჩვ.წ-მდე', 'ჩვ.წ'],
      wide: ['ჩვენს წელთაღრიცხვამდე', 'ჩვენი წელთაღრიცხვით']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-ლი კვ', '2-ე კვ', '3-ე კვ', '4-ე კვ'],
      wide: ['1-ლი კვარტალი', '2-ე კვარტალი', '3-ე კვარტალი', '4-ე კვარტალი'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['ია', 'თე', 'მა', 'აპ', 'მს', 'ვნ', 'ვლ', 'აგ', 'სე', 'ოქ', 'ნო', 'დე'],
      abbreviated: ['იან', 'თებ', 'მარ', 'აპრ', 'მაი', 'ივნ', 'ივლ', 'აგვ', 'სექ', 'ოქტ', 'ნოე', 'დეკ'],
      wide: ['იანვარი', 'თებერვალი', 'მარტი', 'აპრილი', 'მაისი', 'ივნისი', 'ივლისი', 'აგვისტო', 'სექტემბერი', 'ოქტომბერი', 'ნოემბერი', 'დეკემბერი']
    };
    var dayValues = {
      narrow: ['კვ', 'ორ', 'სა', 'ოთ', 'ხუ', 'პა', 'შა'],
      short: ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'],
      abbreviated: ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'],
      wide: ['კვირა', 'ორშაბათი', 'სამშაბათი', 'ოთხშაბათი', 'ხუთშაბათი', 'პარასკევი', 'შაბათი']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'შუაღამე',
        noon: 'შუადღე',
        morning: 'დილა',
        afternoon: 'საღამო',
        evening: 'საღამო',
        night: 'ღამე'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'შუაღამე',
        noon: 'შუადღე',
        morning: 'დილა',
        afternoon: 'საღამო',
        evening: 'საღამო',
        night: 'ღამე'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'შუაღამე',
        noon: 'შუადღე',
        morning: 'დილა',
        afternoon: 'საღამო',
        evening: 'საღამო',
        night: 'ღამე'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'შუაღამით',
        noon: 'შუადღისას',
        morning: 'დილით',
        afternoon: 'ნაშუადღევს',
        evening: 'საღამოს',
        night: 'ღამით'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'შუაღამით',
        noon: 'შუადღისას',
        morning: 'დილით',
        afternoon: 'ნაშუადღევს',
        evening: 'საღამოს',
        night: 'ღამით'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'შუაღამით',
        noon: 'შუადღისას',
        morning: 'დილით',
        afternoon: 'ნაშუადღევს',
        evening: 'საღამოს',
        night: 'ღამით'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      if (number === 1) {
        return number + '-ლი';
      }

      return number + '-ე';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-ლი|-ე)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ჩვ?\.წ)/i,
      abbreviated: /^(ჩვ?\.წ)/i,
      wide: /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე|ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
    };
    var parseEraPatterns = {
      any: [/^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე)/i, /^(ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]-(ლი|ე)? კვ/i,
      wide: /^[1234]-(ლი|ე)? კვარტალი/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      any: /^(ია|თე|მა|აპ|მს|ვნ|ვლ|აგ|სე|ოქ|ნო|დე)/i
    };
    var parseMonthPatterns = {
      any: [/^ია/i, /^თ/i, /^მარ/i, /^აპ/i, /^მაი/i, /^ი?ვნ/i, /^ი?ვლ/i, /^აგ/i, /^ს/i, /^ო/i, /^ნ/i, /^დ/i]
    };
    var matchDayPatterns = {
      narrow: /^(კვ|ორ|სა|ოთ|ხუ|პა|შა)/i,
      short: /^(კვი|ორშ|სამ|ოთხ|ხუთ|პარ|შაბ)/i,
      long: /^(კვირა|ორშაბათი|სამშაბათი|ოთხშაბათი|ხუთშაბათი|პარასკევი|შაბათი)/i
    };
    var parseDayPatterns = {
      any: [/^კვ/i, /^ორ/i, /^სა/i, /^ოთ/i, /^ხუ/i, /^პა/i, /^შა/i]
    };
    var matchDayPeriodPatterns = {
      any: /^([ap]\.?\s?m\.?|შუაღ|დილ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^შუაღ/i,
        noon: /^შუადღ/i,
        morning: /^დილ/i,
        afternoon: /ნაშუადღევს/i,
        evening: /საღამო/i,
        night: /ღამ/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ka = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$A);

    var _index2 = _interopRequireDefault(formatLong_1$G);

    var _index3 = _interopRequireDefault(formatRelative_1$z);

    var _index4 = _interopRequireDefault(localize_1$z);

    var _index5 = _interopRequireDefault(match_1$z);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Georgian locale.
     * @language Georgian
     * @iso-639-2 geo
     * @author Lado Lomidze [@Landish]{@link https://github.com/Landish}
     * @author Nick Shvelidze [@shvelo]{@link https://github.com/shvelo}
     */
    var locale = {
      code: 'ka',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$B = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function declension(scheme, count) {
      // scheme for count=1 exists
      if (scheme.one !== undefined && count === 1) {
        return scheme.one;
      }

      var rem10 = count % 10;
      var rem100 = count % 100; // 1, 21, 31, ...

      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
      } else {
        return scheme.pluralGenitive.replace('{{count}}', count);
      }
    }

    function buildLocalizeTokenFn(scheme) {
      return function (count, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return declension(scheme.regular, count) + ' кейін';
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + ' бұрын';
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }

    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: '1 секундтан аз',
          singularNominative: '{{count}} секундтан аз',
          singularGenitive: '{{count}} секундтан аз',
          pluralGenitive: '{{count}} секундтан аз'
        },
        future: {
          one: 'бір секундтан кейін',
          singularNominative: '{{count}} секундтан кейін',
          singularGenitive: '{{count}} секундтан кейін',
          pluralGenitive: '{{count}} секундтан кейін'
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} секунд',
          singularGenitive: '{{count}} секунд',
          pluralGenitive: '{{count}} секунд'
        },
        past: {
          singularNominative: '{{count}} секунд бұрын',
          singularGenitive: '{{count}} секунд бұрын',
          pluralGenitive: '{{count}} секунд бұрын'
        },
        future: {
          singularNominative: '{{count}} секундтан кейін',
          singularGenitive: '{{count}} секундтан кейін',
          pluralGenitive: '{{count}} секундтан кейін'
        }
      }),
      halfAMinute: function (_, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            return 'жарты минут ішінде';
          } else {
            return 'жарты минут бұрын';
          }
        }

        return 'жарты минут';
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: '1 минуттан аз',
          singularNominative: '{{count}} минуттан аз',
          singularGenitive: '{{count}} минуттан аз',
          pluralGenitive: '{{count}} минуттан аз'
        },
        future: {
          one: 'минуттан кем ',
          singularNominative: '{{count}} минуттан кем',
          singularGenitive: '{{count}} минуттан кем',
          pluralGenitive: '{{count}} минуттан кем'
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} минут',
          singularGenitive: '{{count}} минут',
          pluralGenitive: '{{count}} минут'
        },
        past: {
          singularNominative: '{{count}} минут бұрын',
          singularGenitive: '{{count}} минут бұрын',
          pluralGenitive: '{{count}} минут бұрын'
        },
        future: {
          singularNominative: '{{count}} минуттан кейін',
          singularGenitive: '{{count}} минуттан кейін',
          pluralGenitive: '{{count}} минуттан кейін'
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'шамамен {{count}} сағат',
          singularGenitive: 'шамамен {{count}} сағат',
          pluralGenitive: 'шамамен {{count}} сағат'
        },
        future: {
          singularNominative: 'шамамен {{count}} сағаттан кейін',
          singularGenitive: 'шамамен {{count}} сағаттан кейін',
          pluralGenitive: 'шамамен {{count}} сағаттан кейін'
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} сағат',
          singularGenitive: '{{count}} сағат',
          pluralGenitive: '{{count}} сағат'
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} күн',
          singularGenitive: '{{count}} күн',
          pluralGenitive: '{{count}} күн'
        },
        future: {
          singularNominative: '{{count}} күннен кейін',
          singularGenitive: '{{count}} күннен кейін',
          pluralGenitive: '{{count}} күннен кейін'
        }
      }),
      aboutXWeeks: {
        one: 'шамамен 1 апта',
        other: 'шамамен {{count}} апта'
      },
      xWeeks: {
        one: '1 апта',
        other: '{{count}} апта'
      },
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'шамамен {{count}} ай',
          singularGenitive: 'шамамен {{count}} ай',
          pluralGenitive: 'шамамен {{count}} ай'
        },
        future: {
          singularNominative: 'шамамен {{count}} айдан кейін',
          singularGenitive: 'шамамен {{count}} айдан кейін',
          pluralGenitive: 'шамамен {{count}} айдан кейін'
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} ай',
          singularGenitive: '{{count}} ай',
          pluralGenitive: '{{count}} ай'
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'шамамен {{count}} жыл',
          singularGenitive: 'шамамен {{count}} жыл',
          pluralGenitive: 'шамамен {{count}} жыл'
        },
        future: {
          singularNominative: 'шамамен {{count}} жылдан кейін',
          singularGenitive: 'шамамен {{count}} жылдан кейін',
          pluralGenitive: 'шамамен {{count}} жылдан кейін'
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} жыл',
          singularGenitive: '{{count}} жыл',
          pluralGenitive: '{{count}} жыл'
        },
        future: {
          singularNominative: '{{count}} жылдан кейін',
          singularGenitive: '{{count}} жылдан кейін',
          pluralGenitive: '{{count}} жылдан кейін'
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} жылдан астам',
          singularGenitive: '{{count}} жылдан астам',
          pluralGenitive: '{{count}} жылдан астам'
        },
        future: {
          singularNominative: '{{count}} жылдан астам',
          singularGenitive: '{{count}} жылдан астам',
          pluralGenitive: '{{count}} жылдан астам'
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} жылға жақын',
          singularGenitive: '{{count}} жылға жақын',
          pluralGenitive: '{{count}} жылға жақын'
        },
        future: {
          singularNominative: '{{count}} жылдан кейін',
          singularGenitive: '{{count}} жылдан кейін',
          pluralGenitive: '{{count}} жылдан кейін'
        }
      })
    };

    function formatDistance(token, count, options) {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    }

    module.exports = exports.default;
    });

    var formatLong_1$H = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, do MMMM y 'ж.'",
      long: "do MMMM y 'ж.'",
      medium: "d MMM y 'ж.'",
      short: 'dd.MM.yyyy'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      any: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$A = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var accusativeWeekdays = ['жексенбіде', 'дүйсенбіде', 'сейсенбіде', 'сәрсенбіде', 'бейсенбіде', 'жұмада', 'сенбіде'];

    function lastWeek(day) {
      var weekday = accusativeWeekdays[day];
      return "'өткен " + weekday + " сағат' p'-де'";
    }

    function thisWeek(day) {
      var weekday = accusativeWeekdays[day];
      return "'" + weekday + " сағат' p'-де'";
    }

    function nextWeek(day) {
      var weekday = accusativeWeekdays[day];
      return "'келесі " + weekday + " сағат' p'-де'";
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'кеше сағат' p'-де'",
      today: "'бүгін сағат' p'-де'",
      tomorrow: "'ертең сағат' p'-де'",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$A = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['б.з.д.', 'б.з.'],
      abbreviated: ['б.з.д.', 'б.з.'],
      wide: ['біздің заманымызға дейін', 'біздің заманымыз']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-ші тоқ.', '2-ші тоқ.', '3-ші тоқ.', '4-ші тоқ.'],
      wide: ['1-ші тоқсан', '2-ші тоқсан', '3-ші тоқсан', '4-ші тоқсан']
    };
    var monthValues = {
      narrow: ['Қ', 'А', 'Н', 'С', 'М', 'М', 'Ш', 'Т', 'Қ', 'Қ', 'Қ', 'Ж'],
      abbreviated: ['қаң', 'ақп', 'нау', 'сәу', 'мам', 'мау', 'шіл', 'там', 'қыр', 'қаз', 'қар', 'жел'],
      wide: ['қаңтар', 'ақпан', 'наурыз', 'сәуір', 'мамыр', 'маусым', 'шілде', 'тамыз', 'қыркүйек', 'қазан', 'қараша', 'желтоқсан']
    };
    var formattingMonthValues = {
      narrow: ['Қ', 'А', 'Н', 'С', 'М', 'М', 'Ш', 'Т', 'Қ', 'Қ', 'Қ', 'Ж'],
      abbreviated: ['қаң', 'ақп', 'нау', 'сәу', 'мам', 'мау', 'шіл', 'там', 'қыр', 'қаз', 'қар', 'жел'],
      wide: ['қаңтар', 'ақпан', 'наурыз', 'сәуір', 'мамыр', 'маусым', 'шілде', 'тамыз', 'қыркүйек', 'қазан', 'қараша', 'желтоқсан']
    };
    var dayValues = {
      narrow: ['Ж', 'Д', 'С', 'С', 'Б', 'Ж', 'С'],
      short: ['жс', 'дс', 'сс', 'ср', 'бс', 'жм', 'сб'],
      abbreviated: ['жс', 'дс', 'сс', 'ср', 'бс', 'жм', 'сб'],
      wide: ['жексенбі', 'дүйсенбі', 'сейсенбі', 'сәрсенбі', 'бейсенбі', 'жұма', 'сенбі']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ТД',
        pm: 'ТК',
        midnight: 'түн ортасы',
        noon: 'түс',
        morning: 'таң',
        afternoon: 'күндіз',
        evening: 'кеш',
        night: 'түн'
      },
      wide: {
        am: 'ТД',
        pm: 'ТК',
        midnight: 'түн ортасы',
        noon: 'түс',
        morning: 'таң',
        afternoon: 'күндіз',
        evening: 'кеш',
        night: 'түн'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ТД',
        pm: 'ТК',
        midnight: 'түн ортасында',
        noon: 'түс',
        morning: 'таң',
        afternoon: 'күн',
        evening: 'кеш',
        night: 'түн'
      },
      wide: {
        am: 'ТД',
        pm: 'ТК',
        midnight: 'түн ортасында',
        noon: 'түсте',
        morning: 'таңертең',
        afternoon: 'күндіз',
        evening: 'кеште',
        night: 'түнде'
      }
    };
    var suffixes = {
      0: '-ші',
      1: '-ші',
      2: '-ші',
      3: '-ші',
      4: '-ші',
      5: '-ші',
      6: '-шы',
      7: '-ші',
      8: '-ші',
      9: '-шы',
      10: '-шы',
      20: '-шы',
      30: '-шы',
      40: '-шы',
      50: '-ші',
      60: '-шы',
      70: '-ші',
      80: '-ші',
      90: '-шы',
      100: '-ші'
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      var a = number % 10;
      var b = number >= 100 ? 100 : null;
      return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'any',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$A = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?(ші|шы))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((б )?з\.?\s?д\.?)/i,
      abbreviated: /^((б )?з\.?\s?д\.?)/i,
      wide: /^(біздің заманымызға дейін|біздің заманымыз|біздің заманымыздан)/i
    };
    var parseEraPatterns = {
      any: [/^б/i, /^з/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?ші)? тоқ.?/i,
      wide: /^[1234](-?ші)? тоқсан/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(қ|а|н|с|м|мау|ш|т|қыр|қаз|қар|ж)/i,
      abbreviated: /^(қаң|ақп|нау|сәу|мам|мау|шіл|там|қыр|қаз|қар|жел)/i,
      wide: /^(қаңтар|ақпан|наурыз|сәуір|мамыр|маусым|шілде|тамыз|қыркүйек|қазан|қараша|желтоқсан)/i
    };
    var parseMonthPatterns = {
      narrow: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i],
      abbreviated: [/^қаң/i, /^ақп/i, /^нау/i, /^сәу/i, /^мам/i, /^мау/i, /^шіл/i, /^там/i, /^қыр/i, /^қаз/i, /^қар/i, /^жел/i],
      any: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i]
    };
    var matchDayPatterns = {
      narrow: /^(ж|д|с|с|б|ж|с)/i,
      short: /^(жс|дс|сс|ср|бс|жм|сб)/i,
      wide: /^(жексенбі|дүйсенбі|сейсенбі|сәрсенбі|бейсенбі|жұма|сенбі)/i
    };
    var parseDayPatterns = {
      narrow: [/^ж/i, /^д/i, /^с/i, /^с/i, /^б/i, /^ж/i, /^с/i],
      short: [/^жс/i, /^дс/i, /^сс/i, /^ср/i, /^бс/i, /^жм/i, /^сб/i],
      any: [/^ж[ек]/i, /^д[үй]/i, /^сe[й]/i, /^сә[р]/i, /^б[ей]/i, /^ж[ұм]/i, /^се[н]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
      wide: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
      any: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ТД/i,
        pm: /^ТК/i,
        midnight: /^түн орта/i,
        noon: /^күндіз/i,
        morning: /таң/i,
        afternoon: /түс/i,
        evening: /кеш/i,
        night: /түн/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var kk = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$B);

    var _index2 = _interopRequireDefault(formatLong_1$H);

    var _index3 = _interopRequireDefault(formatRelative_1$A);

    var _index4 = _interopRequireDefault(localize_1$A);

    var _index5 = _interopRequireDefault(match_1$A);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Kazakh locale.
     * @language Kazakh
     * @iso-639-2 kaz
     * @author Nikita Bayev [@drugoi]{@link https://github.com/drugoi}
     */
    var locale = {
      code: 'kk',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$C = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          default: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
          future: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
          past: '1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ'
        },
        other: {
          default: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
          future: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ',
          past: '{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ'
        }
      },
      xSeconds: {
        one: {
          default: '1 ಸೆಕೆಂಡ್',
          future: '1 ಸೆಕೆಂಡ್‌ನಲ್ಲಿ',
          past: '1 ಸೆಕೆಂಡ್ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ಸೆಕೆಂಡುಗಳು',
          future: '{{count}} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ',
          past: '{{count}} ಸೆಕೆಂಡ್ ಹಿಂದೆ'
        }
      },
      halfAMinute: {
        other: {
          default: 'ಅರ್ಧ ನಿಮಿಷ',
          future: 'ಅರ್ಧ ನಿಮಿಷದಲ್ಲಿ',
          past: 'ಅರ್ಧ ನಿಮಿಷದ ಹಿಂದೆ'
        }
      },
      lessThanXMinutes: {
        one: {
          default: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
          future: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
          past: '1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ'
        },
        other: {
          default: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
          future: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ',
          past: '{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ'
        }
      },
      xMinutes: {
        one: {
          default: '1 ನಿಮಿಷ',
          future: '1 ನಿಮಿಷದಲ್ಲಿ',
          past: '1 ನಿಮಿಷದ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ನಿಮಿಷಗಳು',
          future: '{{count}} ನಿಮಿಷಗಳಲ್ಲಿ',
          past: '{{count}} ನಿಮಿಷಗಳ ಹಿಂದೆ'
        }
      },
      aboutXHours: {
        one: {
          default: 'ಸುಮಾರು 1 ಗಂಟೆ',
          future: 'ಸುಮಾರು 1 ಗಂಟೆಯಲ್ಲಿ',
          past: 'ಸುಮಾರು 1 ಗಂಟೆ ಹಿಂದೆ'
        },
        other: {
          default: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳು',
          future: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳಲ್ಲಿ',
          past: 'ಸುಮಾರು {{count}} ಗಂಟೆಗಳ ಹಿಂದೆ'
        }
      },
      xHours: {
        one: {
          default: '1 ಗಂಟೆ',
          future: '1 ಗಂಟೆಯಲ್ಲಿ',
          past: '1 ಗಂಟೆ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ಗಂಟೆಗಳು',
          future: '{{count}} ಗಂಟೆಗಳಲ್ಲಿ',
          past: '{{count}} ಗಂಟೆಗಳ ಹಿಂದೆ'
        }
      },
      xDays: {
        one: {
          default: '1 ದಿನ',
          future: '1 ದಿನದಲ್ಲಿ',
          past: '1 ದಿನದ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ದಿನಗಳು',
          future: '{{count}} ದಿನಗಳಲ್ಲಿ',
          past: '{{count}} ದಿನಗಳ ಹಿಂದೆ'
        }
      },
      aboutXMonths: {
        one: {
          default: 'ಸುಮಾರು 1 ತಿಂಗಳು',
          future: 'ಸುಮಾರು 1 ತಿಂಗಳಲ್ಲಿ',
          past: 'ಸುಮಾರು 1 ತಿಂಗಳ ಹಿಂದೆ'
        },
        other: {
          default: 'ಸುಮಾರು {{count}} ತಿಂಗಳು',
          future: 'ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳಲ್ಲಿ',
          past: 'ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ'
        }
      },
      xMonths: {
        one: {
          default: '1 ತಿಂಗಳು',
          future: '1 ತಿಂಗಳಲ್ಲಿ',
          past: '1 ತಿಂಗಳ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ತಿಂಗಳು',
          future: '{{count}} ತಿಂಗಳುಗಳಲ್ಲಿ',
          past: '{{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ'
        }
      },
      aboutXYears: {
        one: {
          default: 'ಸುಮಾರು 1 ವರ್ಷ',
          future: 'ಸುಮಾರು 1 ವರ್ಷದಲ್ಲಿ',
          past: 'ಸುಮಾರು 1 ವರ್ಷದ ಹಿಂದೆ'
        },
        other: {
          default: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳು',
          future: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳಲ್ಲಿ',
          past: 'ಸುಮಾರು {{count}} ವರ್ಷಗಳ ಹಿಂದೆ'
        }
      },
      xYears: {
        one: {
          default: '1 ವರ್ಷ',
          future: '1 ವರ್ಷದಲ್ಲಿ',
          past: '1 ವರ್ಷದ ಹಿಂದೆ'
        },
        other: {
          default: '{{count}} ವರ್ಷಗಳು',
          future: '{{count}} ವರ್ಷಗಳಲ್ಲಿ',
          past: '{{count}} ವರ್ಷಗಳ ಹಿಂದೆ'
        }
      },
      overXYears: {
        one: {
          default: '1 ವರ್ಷದ ಮೇಲೆ',
          future: '1 ವರ್ಷದ ಮೇಲೆ',
          past: '1 ವರ್ಷದ ಮೇಲೆ'
        },
        other: {
          default: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ',
          future: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ',
          past: '{{count}} ವರ್ಷಗಳ ಮೇಲೆ'
        }
      },
      almostXYears: {
        one: {
          default: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ',
          future: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ',
          past: 'ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ'
        },
        other: {
          default: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ',
          future: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ',
          past: 'ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ'
        }
      }
    };

    function getResultByTense(parentToken, options) {
      if (options.addSuffix) {
        if (options.comparison > 0) {
          return parentToken.future;
        } else {
          return parentToken.past;
        }
      }

      return parentToken.default;
    }

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = getResultByTense(formatDistanceLocale[token].one, options);
      } else {
        result = getResultByTense(formatDistanceLocale[token].other, options);
      }

      return result.replace('{{count}}', count);
    }

    module.exports = exports.default;
    });

    var formatLong_1$I = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
    var dateFormats = {
      full: 'EEEE, MMMM d, y',
      // CLDR 1816
      long: 'MMMM d, y',
      // CLDR 1817
      medium: 'MMM d, y',
      // CLDR 1818
      short: 'd/M/yy' // CLDR 1819

    };
    var timeFormats = {
      full: 'hh:mm:ss a zzzz',
      // CLDR 1820
      long: 'hh:mm:ss a z',
      // CLDR 1821
      medium: 'hh:mm:ss a',
      // CLDR 1822
      short: 'hh:mm a' // CLDR 1823

    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      // CLDR 1824
      long: '{{date}} {{time}}',
      // CLDR 1825
      medium: '{{date}} {{time}}',
      // CLDR 1826
      short: '{{date}} {{time}}' // CLDR 1827

    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$B = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'ಕಳೆದ' eeee p 'ಕ್ಕೆ'",
      yesterday: "'ನಿನ್ನೆ' p 'ಕ್ಕೆ'",
      today: "'ಇಂದು' p 'ಕ್ಕೆ'",
      tomorrow: "'ನಾಳೆ' p 'ಕ್ಕೆ'",
      nextWeek: "eeee p 'ಕ್ಕೆ'",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$B = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
    var eraValues = {
      narrow: ['ಕ್ರಿ.ಪೂ', 'ಕ್ರಿ.ಶ'],
      abbreviated: ['ಕ್ರಿ.ಪೂ', 'ಕ್ರಿ.ಶ'],
      // CLDR #1618, #1620
      wide: ['ಕ್ರಿಸ್ತ ಪೂರ್ವ', 'ಕ್ರಿಸ್ತ ಶಕ'] // CLDR #1614, #1616

    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['ತ್ರೈ 1', 'ತ್ರೈ 2', 'ತ್ರೈ 3', 'ತ್ರೈ 4'],
      // CLDR #1630 - #1638
      wide: ['1ನೇ ತ್ರೈಮಾಸಿಕ', '2ನೇ ತ್ರೈಮಾಸಿಕ', '3ನೇ ತ್ರೈಮಾಸಿಕ', '4ನೇ ತ್ರೈಮಾಸಿಕ'] // CLDR #1622 - #1629
      // CLDR #1646 - #1717

    };
    var monthValues = {
      narrow: ['ಜ', 'ಫೆ', 'ಮಾ', 'ಏ', 'ಮೇ', 'ಜೂ', 'ಜು', 'ಆ', 'ಸೆ', 'ಅ', 'ನ', 'ಡಿ'],
      abbreviated: ['ಜನ', 'ಫೆಬ್ರ', 'ಮಾರ್ಚ್', 'ಏಪ್ರಿ', 'ಮೇ', 'ಜೂನ್', 'ಜುಲೈ', 'ಆಗ', 'ಸೆಪ್ಟೆಂ', 'ಅಕ್ಟೋ', 'ನವೆಂ', 'ಡಿಸೆಂ'],
      wide: ['ಜನವರಿ', 'ಫೆಬ್ರವರಿ', 'ಮಾರ್ಚ್', 'ಏಪ್ರಿಲ್', 'ಮೇ', 'ಜೂನ್', 'ಜುಲೈ', 'ಆಗಸ್ಟ್', 'ಸೆಪ್ಟೆಂಬರ್', 'ಅಕ್ಟೋಬರ್', 'ನವೆಂಬರ್', 'ಡಿಸೆಂಬರ್'] // CLDR #1718 - #1773

    };
    var dayValues = {
      narrow: ['ಭಾ', 'ಸೋ', 'ಮಂ', 'ಬು', 'ಗು', 'ಶು', 'ಶ'],
      short: ['ಭಾನು', 'ಸೋಮ', 'ಮಂಗಳ', 'ಬುಧ', 'ಗುರು', 'ಶುಕ್ರ', 'ಶನಿ'],
      abbreviated: ['ಭಾನು', 'ಸೋಮ', 'ಮಂಗಳ', 'ಬುಧ', 'ಗುರು', 'ಶುಕ್ರ', 'ಶನಿ'],
      wide: ['ಭಾನುವಾರ', 'ಸೋಮವಾರ', 'ಮಂಗಳವಾರ', 'ಬುಧವಾರ', 'ಗುರುವಾರ', 'ಶುಕ್ರವಾರ', 'ಶನಿವಾರ'] // CLDR #1774 - #1815

    };
    var dayPeriodValues = {
      narrow: {
        am: 'ಪೂರ್ವಾಹ್ನ',
        pm: 'ಅಪರಾಹ್ನ',
        midnight: 'ಮಧ್ಯರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾಹ್ನ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾಹ್ನ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      },
      abbreviated: {
        am: 'ಪೂರ್ವಾಹ್ನ',
        pm: 'ಅಪರಾಹ್ನ',
        midnight: 'ಮಧ್ಯರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾನ್ಹ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾನ್ಹ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      },
      wide: {
        am: 'ಪೂರ್ವಾಹ್ನ',
        pm: 'ಅಪರಾಹ್ನ',
        midnight: 'ಮಧ್ಯರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾನ್ಹ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾನ್ಹ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ಪೂ',
        pm: 'ಅ',
        midnight: 'ಮಧ್ಯರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾನ್ಹ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾನ್ಹ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      },
      abbreviated: {
        am: 'ಪೂರ್ವಾಹ್ನ',
        pm: 'ಅಪರಾಹ್ನ',
        midnight: 'ಮಧ್ಯ ರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾನ್ಹ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾನ್ಹ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      },
      wide: {
        am: 'ಪೂರ್ವಾಹ್ನ',
        pm: 'ಅಪರಾಹ್ನ',
        midnight: 'ಮಧ್ಯ ರಾತ್ರಿ',
        noon: 'ಮಧ್ಯಾನ್ಹ',
        morning: 'ಬೆಳಗ್ಗೆ',
        afternoon: 'ಮಧ್ಯಾನ್ಹ',
        evening: 'ಸಂಜೆ',
        night: 'ರಾತ್ರಿ'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + 'ನೇ';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$B = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(ನೇ|ನೆ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ಕ್ರಿ.ಪೂ|ಕ್ರಿ.ಶ)/i,
      abbreviated: /^(ಕ್ರಿ\.?\s?ಪೂ\.?|ಕ್ರಿ\.?\s?ಶ\.?|ಪ್ರ\.?\s?ಶ\.?)/i,
      wide: /^(ಕ್ರಿಸ್ತ ಪೂರ್ವ|ಕ್ರಿಸ್ತ ಶಕ|ಪ್ರಸಕ್ತ ಶಕ)/i
    };
    var parseEraPatterns = {
      any: [/^ಪೂ/i, /^(ಶ|ಪ್ರ)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ತ್ರೈ[1234]|ತ್ರೈ [1234]| [1234]ತ್ರೈ/i,
      wide: /^[1234](ನೇ)? ತ್ರೈಮಾಸಿಕ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ಜೂ|ಜು|ಜ|ಫೆ|ಮಾ|ಏ|ಮೇ|ಆ|ಸೆ|ಅ|ನ|ಡಿ)/i,
      abbreviated: /^(ಜನ|ಫೆಬ್ರ|ಮಾರ್ಚ್|ಏಪ್ರಿ|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗ|ಸೆಪ್ಟೆಂ|ಅಕ್ಟೋ|ನವೆಂ|ಡಿಸೆಂ)/i,
      wide: /^(ಜನವರಿ|ಫೆಬ್ರವರಿ|ಮಾರ್ಚ್|ಏಪ್ರಿಲ್|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗಸ್ಟ್|ಸೆಪ್ಟೆಂಬರ್|ಅಕ್ಟೋಬರ್|ನವೆಂಬರ್|ಡಿಸೆಂಬರ್)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ಜ$/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂ/i, /^ಜು$/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i],
      any: [/^ಜನ/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂನ್/i, /^ಜುಲೈ/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i]
    };
    var matchDayPatterns = {
      narrow: /^(ಭಾ|ಸೋ|ಮ|ಬು|ಗು|ಶು|ಶ)/i,
      short: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
      abbreviated: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
      wide: /^(ಭಾನುವಾರ|ಸೋಮವಾರ|ಮಂಗಳವಾರ|ಬುಧವಾರ|ಗುರುವಾರ|ಶುಕ್ರವಾರ|ಶನಿವಾರ)/i
    };
    var parseDayPatterns = {
      narrow: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i],
      any: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ಪೂ|ಅ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i,
      any: /^(ಪೂರ್ವಾಹ್ನ|ಅಪರಾಹ್ನ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ಪೂ/i,
        pm: /^ಅ/i,
        midnight: /ಮಧ್ಯರಾತ್ರಿ/i,
        noon: /ಮಧ್ಯಾನ್ಹ/i,
        morning: /ಬೆಳಗ್ಗೆ/i,
        afternoon: /ಮಧ್ಯಾನ್ಹ/i,
        evening: /ಸಂಜೆ/i,
        night: /ರಾತ್ರಿ/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var kn = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$C);

    var _index2 = _interopRequireDefault(formatLong_1$I);

    var _index3 = _interopRequireDefault(formatRelative_1$B);

    var _index4 = _interopRequireDefault(localize_1$B);

    var _index5 = _interopRequireDefault(match_1$B);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Kannada locale (India).
     * @language Kannada
     * @iso-639-2 kan
     * @author Manjunatha Gouli [@developergouli]{@link https://github.com/developergouli}
     */
    var locale = {
      code: 'kn',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$D = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: '1초 미만',
        other: '{{count}}초 미만'
      },
      xSeconds: {
        one: '1초',
        other: '{{count}}초'
      },
      halfAMinute: '30초',
      lessThanXMinutes: {
        one: '1분 미만',
        other: '{{count}}분 미만'
      },
      xMinutes: {
        one: '1분',
        other: '{{count}}분'
      },
      aboutXHours: {
        one: '약 1시간',
        other: '약 {{count}}시간'
      },
      xHours: {
        one: '1시간',
        other: '{{count}}시간'
      },
      xDays: {
        one: '1일',
        other: '{{count}}일'
      },
      aboutXWeeks: {
        one: '약 1주',
        other: '약 {{count}}주'
      },
      xWeeks: {
        one: '1주',
        other: '{{count}}주'
      },
      aboutXMonths: {
        one: '약 1개월',
        other: '약 {{count}}개월'
      },
      xMonths: {
        one: '1개월',
        other: '{{count}}개월'
      },
      aboutXYears: {
        one: '약 1년',
        other: '약 {{count}}년'
      },
      xYears: {
        one: '1년',
        other: '{{count}}년'
      },
      overXYears: {
        one: '1년 이상',
        other: '{{count}}년 이상'
      },
      almostXYears: {
        one: '거의 1년',
        other: '거의 {{count}}년'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' 후';
        } else {
          return result + ' 전';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$J = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'y년 M월 d일 EEEE',
      long: 'y년 M월 d일',
      medium: 'y.MM.dd',
      short: 'y.MM.dd'
    };
    var timeFormats = {
      full: 'a H시 mm분 ss초 zzzz',
      long: 'a H:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$C = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'지난' eeee p",
      yesterday: "'어제' p",
      today: "'오늘' p",
      tomorrow: "'내일' p",
      nextWeek: "'다음' eeee p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$C = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['BC', 'AD'],
      abbreviated: ['BC', 'AD'],
      wide: ['기원전', '서기']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1분기', '2분기', '3분기', '4분기']
    };
    var monthValues = {
      narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
      abbreviated: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
      wide: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']
    };
    var dayValues = {
      narrow: ['일', '월', '화', '수', '목', '금', '토'],
      short: ['일', '월', '화', '수', '목', '금', '토'],
      abbreviated: ['일', '월', '화', '수', '목', '금', '토'],
      wide: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']
    };
    var dayPeriodValues = {
      narrow: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      },
      abbreviated: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      },
      wide: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      },
      abbreviated: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      },
      wide: {
        am: '오전',
        pm: '오후',
        midnight: '자정',
        noon: '정오',
        morning: '아침',
        afternoon: '오후',
        evening: '저녁',
        night: '밤'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber);
      var options = dirtyOptions || {};
      var unit = String(options.unit);

      switch (unit) {
        case 'minute':
        case 'second':
          return number;

        case 'date':
          return number + '일';

        default:
          return number + '번째';
      }
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$C = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(일|번째)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(기원전|서기)/i
    };
    var parseEraPatterns = {
      any: [/^(bc|기원전)/i, /^(ad|서기)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]사?분기/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(1[012]|[123456789])/,
      abbreviated: /^(1[012]|[123456789])월/i,
      wide: /^(1[012]|[123456789])월/i
    };
    var parseMonthPatterns = {
      any: [/^1월?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
    };
    var matchDayPatterns = {
      narrow: /^[일월화수목금토]/,
      short: /^[일월화수목금토]/,
      abbreviated: /^[일월화수목금토]/,
      wide: /^[일월화수목금토]요일/
    };
    var parseDayPatterns = {
      any: [/^일/, /^월/, /^화/, /^수/, /^목/, /^금/, /^토/]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(am|오전)/i,
        pm: /^(pm|오후)/i,
        midnight: /^자정/i,
        noon: /^정오/i,
        morning: /^아침/i,
        afternoon: /^오후/i,
        evening: /^저녁/i,
        night: /^밤/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ko = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$D);

    var _index2 = _interopRequireDefault(formatLong_1$J);

    var _index3 = _interopRequireDefault(formatRelative_1$C);

    var _index4 = _interopRequireDefault(localize_1$C);

    var _index5 = _interopRequireDefault(match_1$C);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Korean locale.
     * @language Korean
     * @iso-639-2 kor
     * @author Hong Chulju [@angdev]{@link https://github.com/angdev}
     * @author Lee Seoyoen [@iamssen]{@link https://github.com/iamssen}
     * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
     */
    var locale = {
      code: 'ko',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$E = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: 'manner wéi eng Sekonn',
          other: 'manner wéi {{count}} Sekonnen'
        },
        withPreposition: {
          one: 'manner wéi enger Sekonn',
          other: 'manner wéi {{count}} Sekonnen'
        }
      },
      xSeconds: {
        standalone: {
          one: 'eng Sekonn',
          other: '{{count}} Sekonnen'
        },
        withPreposition: {
          one: 'enger Sekonn',
          other: '{{count}} Sekonnen'
        }
      },
      halfAMinute: {
        standalone: 'eng hallef Minutt',
        withPreposition: 'enger hallwer Minutt'
      },
      lessThanXMinutes: {
        standalone: {
          one: 'manner wéi eng Minutt',
          other: 'manner wéi {{count}} Minutten'
        },
        withPreposition: {
          one: 'manner wéi enger Minutt',
          other: 'manner wéi {{count}} Minutten'
        }
      },
      xMinutes: {
        standalone: {
          one: 'eng Minutt',
          other: '{{count}} Minutten'
        },
        withPreposition: {
          one: 'enger Minutt',
          other: '{{count}} Minutten'
        }
      },
      aboutXHours: {
        standalone: {
          one: 'ongeféier eng Stonn',
          other: 'ongeféier {{count}} Stonnen'
        },
        withPreposition: {
          one: 'ongeféier enger Stonn',
          other: 'ongeféier {{count}} Stonnen'
        }
      },
      xHours: {
        standalone: {
          one: 'eng Stonn',
          other: '{{count}} Stonnen'
        },
        withPreposition: {
          one: 'enger Stonn',
          other: '{{count}} Stonnen'
        }
      },
      xDays: {
        standalone: {
          one: 'een Dag',
          other: '{{count}} Deeg'
        },
        withPreposition: {
          one: 'engem Dag',
          other: '{{count}} Deeg'
        }
      },
      aboutXWeeks: {
        standalone: {
          one: 'ongeféier eng Woch',
          other: 'ongeféier {{count}} Wochen'
        },
        withPreposition: {
          one: 'ongeféier enger Woche',
          other: 'ongeféier {{count}} Wochen'
        }
      },
      xWeeks: {
        standalone: {
          one: 'eng Woch',
          other: '{{count}} Wochen'
        },
        withPreposition: {
          one: 'enger Woch',
          other: '{{count}} Wochen'
        }
      },
      aboutXMonths: {
        standalone: {
          one: 'ongeféier ee Mount',
          other: 'ongeféier {{count}} Méint'
        },
        withPreposition: {
          one: 'ongeféier engem Mount',
          other: 'ongeféier {{count}} Méint'
        }
      },
      xMonths: {
        standalone: {
          one: 'ee Mount',
          other: '{{count}} Méint'
        },
        withPreposition: {
          one: 'engem Mount',
          other: '{{count}} Méint'
        }
      },
      aboutXYears: {
        standalone: {
          one: 'ongeféier ee Joer',
          other: 'ongeféier {{count}} Joer'
        },
        withPreposition: {
          one: 'ongeféier engem Joer',
          other: 'ongeféier {{count}} Joer'
        }
      },
      xYears: {
        standalone: {
          one: 'ee Joer',
          other: '{{count}} Joer'
        },
        withPreposition: {
          one: 'engem Joer',
          other: '{{count}} Joer'
        }
      },
      overXYears: {
        standalone: {
          one: 'méi wéi ee Joer',
          other: 'méi wéi {{count}} Joer'
        },
        withPreposition: {
          one: 'méi wéi engem Joer',
          other: 'méi wéi {{count}} Joer'
        }
      },
      almostXYears: {
        standalone: {
          one: 'bal ee Joer',
          other: 'bal {{count}} Joer'
        },
        withPreposition: {
          one: 'bal engem Joer',
          other: 'bal {{count}} Joer'
        }
      }
    };
    var EXCEPTION_CONSONANTS = ['d', 'h', 'n', 't', 'z'];
    var VOWELS = ['a,', 'e', 'i', 'o', 'u'];
    var DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
    var FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70]; // Eifeler Regel

    function isFinalNNeeded(nextWords) {
      var firstLetter = nextWords.charAt(0).toLowerCase();

      if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) {
        return true;
      } // Numbers would need to converted into words for checking.
      // Therefore, I have listed the digits that require a preceeding n with a few exceptions.


      var firstWord = nextWords.split(' ')[0];
      var number = parseInt(firstWord);

      if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(parseInt(firstWord.substring(0, 2))) == -1) {
        return true;
      } // Omit other checks as they are not expected here.


      return false;
    }

    function formatDistance(token, count, options) {
      options = options || {};
      var usageGroup = options.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      var result;

      if (typeof usageGroup === 'string') {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'a' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
        } else {
          return 'viru' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$K = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
    var dateFormats = {
      full: 'EEEE, do MMMM y',
      // Méindeg, 7. Januar 2018
      long: 'do MMMM y',
      // 7. Januar 2018
      medium: 'do MMM y',
      // 7. Jan 2018
      short: 'dd.MM.yy' // 07.01.18

    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'um' {{time}}",
      long: "{{date}} 'um' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$D = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        var day = date.getUTCDay();
        var result = "'läschte";

        if (day === 2 || day === 4) {
          // Eifeler Regel: Add an n before the consonant d; Here "Dënschdeg" "and Donneschde".
          result += 'n';
        }

        result += "' eeee 'um' p";
        return result;
      },
      yesterday: "'gëschter um' p",
      today: "'haut um' p",
      tomorrow: "'moien um' p",
      nextWeek: "eeee 'um' p",
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$D = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['v.Chr.', 'n.Chr.'],
      abbreviated: ['v.Chr.', 'n.Chr.'],
      wide: ['viru Christus', 'no Christus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mäe', 'Abr', 'Mee', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
      wide: ['Januar', 'Februar', 'Mäerz', 'Abrëll', 'Mee', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
      short: ['So', 'Mé', 'Dë', 'Më', 'Do', 'Fr', 'Sa'],
      abbreviated: ['So.', 'Mé.', 'Dë.', 'Më.', 'Do.', 'Fr.', 'Sa.'],
      wide: ['Sonndeg', 'Méindeg', 'Dënschdeg', 'Mëttwoch', 'Donneschdeg', 'Freideg', 'Samschdeg']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'mo.',
        pm: 'nomë.',
        midnight: 'Mëtternuecht',
        noon: 'Mëtteg',
        morning: 'Moien',
        afternoon: 'Nomëtteg',
        evening: 'Owend',
        night: 'Nuecht'
      },
      abbreviated: {
        am: 'moies',
        pm: 'nomëttes',
        midnight: 'Mëtternuecht',
        noon: 'Mëtteg',
        morning: 'Moien',
        afternoon: 'Nomëtteg',
        evening: 'Owend',
        night: 'Nuecht'
      },
      wide: {
        am: 'moies',
        pm: 'nomëttes',
        midnight: 'Mëtternuecht',
        noon: 'Mëtteg',
        morning: 'Moien',
        afternoon: 'Nomëtteg',
        evening: 'Owend',
        night: 'Nuecht'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'mo.',
        pm: 'nom.',
        midnight: 'Mëtternuecht',
        noon: 'mëttes',
        morning: 'moies',
        afternoon: 'nomëttes',
        evening: 'owes',
        night: 'nuets'
      },
      abbreviated: {
        am: 'moies',
        pm: 'nomëttes',
        midnight: 'Mëtternuecht',
        noon: 'mëttes',
        morning: 'moies',
        afternoon: 'nomëttes',
        evening: 'owes',
        night: 'nuets'
      },
      wide: {
        am: 'moies',
        pm: 'nomëttes',
        midnight: 'Mëtternuecht',
        noon: 'mëttes',
        morning: 'moies',
        afternoon: 'nomëttes',
        evening: 'owes',
        night: 'nuets'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$D = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      wide: /^(viru Christus|virun eiser Zäitrechnung|no Christus|eiser Zäitrechnung)/i
    };
    var parseEraPatterns = {
      any: [/^v/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? Quartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mäe|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
      wide: /^(januar|februar|mäerz|abrëll|mee|juni|juli|august|september|oktober|november|dezember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mä/i, /^ab/i, /^me/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smdf]/i,
      short: /^(so|mé|dë|më|do|fr|sa)/i,
      abbreviated: /^(son?|méi?|dën?|mët?|don?|fre?|sam?)\.?/i,
      wide: /^(sonndeg|méindeg|dënschdeg|mëttwoch|donneschdeg|freideg|samschdeg)/i
    };
    var parseDayPatterns = {
      any: [/^so/i, /^mé/i, /^dë/i, /^më/i, /^do/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(mo\.?|nomë\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
      abbreviated: /^(moi\.?|nomët\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
      wide: /^(moies|nomëttes|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^m/i,
        pm: /^n/i,
        midnight: /^Mëtter/i,
        noon: /^mëttes/i,
        morning: /moies/i,
        afternoon: /nomëttes/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /owes/i,
        night: /nuets/i // will never be matched. Night is matched by `pm`

      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var lb = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$E);

    var _index2 = _interopRequireDefault(formatLong_1$K);

    var _index3 = _interopRequireDefault(formatRelative_1$D);

    var _index4 = _interopRequireDefault(localize_1$D);

    var _index5 = _interopRequireDefault(match_1$D);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Luxembourgish locale.
     * @language Luxembourgish
     * @iso-639-2 ltz
     * @author Daniel Waxweiler [@dwaxweiler]{@link https://github.com/dwaxweiler}
     */
    var locale = {
      code: 'lb',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$F = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: translateSeconds,
        other: translate
      },
      xSeconds: {
        one: translateSeconds,
        other: translate
      },
      halfAMinute: 'pusė minutės',
      lessThanXMinutes: {
        one: translateSingular,
        other: translate
      },
      xMinutes: {
        one: translateSingular,
        other: translate
      },
      aboutXHours: {
        one: translateSingular,
        other: translate
      },
      xHours: {
        one: translateSingular,
        other: translate
      },
      xDays: {
        one: translateSingular,
        other: translate
      },
      aboutWeeks: {
        one: translateSingular,
        other: translate
      },
      xWeeks: {
        one: translateSingular,
        other: translate
      },
      aboutXMonths: {
        one: translateSingular,
        other: translate
      },
      xMonths: {
        one: translateSingular,
        other: translate
      },
      aboutXYears: {
        one: translateSingular,
        other: translate
      },
      xYears: {
        one: translateSingular,
        other: translate
      },
      overXYears: {
        one: translateSingular,
        other: translate
      },
      almostXYears: {
        one: translateSingular,
        other: translate
      }
    };
    var translations = {
      xseconds_other: 'sekundė_sekundžių_sekundes',
      xminutes_one: 'minutė_minutės_minutę',
      xminutes_other: 'minutės_minučių_minutes',
      xhours_one: 'valanda_valandos_valandą',
      xhours_other: 'valandos_valandų_valandas',
      xdays_one: 'diena_dienos_dieną',
      xdays_other: 'dienos_dienų_dienas',
      xweeks_one: 'savaitė_savaitės_savaitę',
      xweeks_other: 'savaitės_savaičių_savaites',
      xmonths_one: 'mėnuo_mėnesio_mėnesį',
      xmonths_other: 'mėnesiai_mėnesių_mėnesius',
      xyears_one: 'metai_metų_metus',
      xyears_other: 'metai_metų_metus',
      about: 'apie',
      over: 'daugiau nei',
      almost: 'beveik',
      lessthan: 'mažiau nei'
    };

    function translateSeconds(number, addSuffix, key, isFuture) {
      if (!addSuffix) {
        return 'kelios sekundės';
      } else {
        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
      }
    }

    function translateSingular(number, addSuffix, key, isFuture) {
      return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
    }

    function special(number) {
      return number % 10 === 0 || number > 10 && number < 20;
    }

    function forms(key) {
      return translations[key].split('_');
    }

    function translate(number, addSuffix, key, isFuture) {
      var result = number + ' ';

      if (number === 1) {
        return result + translateSingular(number, addSuffix, key[0], isFuture);
      } else if (!addSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
      } else {
        if (isFuture) {
          return result + forms(key)[1];
        } else {
          return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
      }
    }

    function formatDistance(token, count, options) {
      options = options || {};
      var adverb = token.match(/about|over|almost|lessthan/i);
      var unit = token.replace(adverb, '');
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one(count, options.addSuffix, unit.toLowerCase() + '_one');
      } else {
        result = formatDistanceLocale[token].other(count, options.addSuffix, unit.toLowerCase() + '_other');
      }

      if (adverb) {
        result = translations[adverb[0].toLowerCase()] + ' ' + result;
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'po ' + result;
        } else {
          return 'prieš ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$L = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "y 'm'. MMMM d 'd'., EEEE",
      long: "y 'm'. MMMM d 'd'.",
      medium: 'y-MM-dd',
      short: 'y-MM-dd'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$E = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'Praėjusį' eeee p",
      yesterday: "'Vakar' p",
      today: "'Šiandien' p",
      tomorrow: "'Rytoj' p",
      nextWeek: 'eeee p',
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$E = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['pr. Kr.', 'po Kr.'],
      abbreviated: ['pr. Kr.', 'po Kr.'],
      wide: ['prieš Kristų', 'po Kristaus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['I ketv.', 'II ketv.', 'III ketv.', 'IV ketv.'],
      wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
    };
    var formattingQuarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['I k.', 'II k.', 'III k.', 'IV k.'],
      wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
    };
    var monthValues = {
      narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
      abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'birž.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
      wide: ['sausis', 'vasaris', 'kovas', 'balandis', 'gegužė', 'birželis', 'liepa', 'rugpjūtis', 'rugsėjis', 'spalis', 'lapkritis', 'gruodis']
    };
    var formattingMonthValues = {
      narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
      abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'birž.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
      wide: ['sausio', 'vasario', 'kovo', 'balandžio', 'gegužės', 'birželio', 'liepos', 'rugpjūčio', 'rugsėjo', 'spalio', 'lapkričio', 'gruodžio']
    };
    var dayValues = {
      narrow: ['S', 'P', 'A', 'T', 'K', 'P', 'Š'],
      short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', 'Št'],
      abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', 'št'],
      wide: ['sekmadienis', 'pirmadienis', 'antradienis', 'trečiadienis', 'ketvirtadienis', 'penktadienis', 'šeštadienis']
    };
    var formattingDayValues = {
      narrow: ['S', 'P', 'A', 'T', 'K', 'P', 'Š'],
      short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', 'Št'],
      abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', 'št'],
      wide: ['sekmadienį', 'pirmadienį', 'antradienį', 'trečiadienį', 'ketvirtadienį', 'penktadienį', 'šeštadienį']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'pr. p.',
        pm: 'pop.',
        midnight: 'vidurnaktis',
        noon: 'vidurdienis',
        morning: 'rytas',
        afternoon: 'diena',
        evening: 'vakaras',
        night: 'naktis'
      },
      abbreviated: {
        am: 'priešpiet',
        pm: 'popiet',
        midnight: 'vidurnaktis',
        noon: 'vidurdienis',
        morning: 'rytas',
        afternoon: 'diena',
        evening: 'vakaras',
        night: 'naktis'
      },
      wide: {
        am: 'priešpiet',
        pm: 'popiet',
        midnight: 'vidurnaktis',
        noon: 'vidurdienis',
        morning: 'rytas',
        afternoon: 'diena',
        evening: 'vakaras',
        night: 'naktis'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'pr. p.',
        pm: 'pop.',
        midnight: 'vidurnaktis',
        noon: 'perpiet',
        morning: 'rytas',
        afternoon: 'popietė',
        evening: 'vakaras',
        night: 'naktis'
      },
      abbreviated: {
        am: 'priešpiet',
        pm: 'popiet',
        midnight: 'vidurnaktis',
        noon: 'perpiet',
        morning: 'rytas',
        afternoon: 'popietė',
        evening: 'vakaras',
        night: 'naktis'
      },
      wide: {
        am: 'priešpiet',
        pm: 'popiet',
        midnight: 'vidurnaktis',
        noon: 'perpiet',
        morning: 'rytas',
        afternoon: 'popietė',
        evening: 'vakaras',
        night: 'naktis'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '-oji';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayValues,
        defaultFormattingWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$E = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-oji)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
      abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mūsų eroje)/i,
      wide: /^(prieš Kristų|prieš mūsų erą|po Kristaus|mūsų eroje)/i
    };
    var parseEraPatterns = {
      wide: [/prieš/i, /(po|mūsų)/i],
      any: [/^pr/i, /^(po|m)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^([1234])/i,
      abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
      wide: /^(I|II|III|IV)\s?ketvirtis/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/I$/i, /II$/i, /III/i, /IV/i]
    };
    var matchMonthPatterns = {
      narrow: /^[svkbglr]/i,
      abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|birž\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
      wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandž?i(s|o)|gegužės?|birželi(s|o)|liep(a|os)|rugpjū(t|č)i(s|o)|rugsėj(is|o)|spali(s|o)|lapkri(t|č)i(s|o)|gruodž?i(s|o))/i
    };
    var parseMonthPatterns = {
      narrow: [/^s/i, /^v/i, /^k/i, /^b/i, /^g/i, /^b/i, /^l/i, /^r/i, /^r/i, /^s/i, /^l/i, /^g/i],
      any: [/^saus/i, /^vas/i, /^kov/i, /^bal/i, /^geg/i, /^birž/i, /^liep/i, /^rugp/i, /^rugs/i, /^spal/i, /^lapkr/i, /^gruod/i]
    };
    var matchDayPatterns = {
      narrow: /^[spatkš]/i,
      short: /^(sk|pr|an|tr|kt|pn|št)/i,
      abbreviated: /^(sk|pr|an|tr|kt|pn|št)/i,
      wide: /^(sekmadien(is|į)|pirmadien(is|į)|antradien(is|į)|trečiadien(is|į)|ketvirtadien(is|į)|penktadien(is|į)|šeštadien(is|į))/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^š/i],
      wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^še/i],
      any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^št/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i,
      any: /^(priešpiet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^pr/i,
        pm: /^pop./i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
      },
      any: {
        am: /^pr/i,
        pm: /^popiet$/i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var lt = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$F);

    var _index2 = _interopRequireDefault(formatLong_1$L);

    var _index3 = _interopRequireDefault(formatRelative_1$E);

    var _index4 = _interopRequireDefault(localize_1$E);

    var _index5 = _interopRequireDefault(match_1$E);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     *
     * @summary Lithuanian locale.
     * @language Lithuanian
     *
     * @iso-639-2 lit
     *
     * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
     * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
     */
    var locale = {
      code: 'lt',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$G = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function buildLocalizeTokenFn(schema) {
      return function (count, options) {
        if (count === 1) {
          if (options.addSuffix) {
            return schema.one[0].replace('{{time}}', schema.one[2]);
          } else {
            return schema.one[0].replace('{{time}}', schema.one[1]);
          }
        } else {
          var rem = count % 10 === 1 && count % 100 !== 11;

          if (options.addSuffix) {
            return schema.other[0].replace('{{time}}', rem ? schema.other[3] : schema.other[4]).replace('{{count}}', count);
          } else {
            return schema.other[0].replace('{{time}}', rem ? schema.other[1] : schema.other[2]).replace('{{count}}', count);
          }
        }
      };
    }

    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        one: ['mazāk par {{time}}', 'sekundi', 'sekundi'],
        other: ['mazāk nekā {{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundēm']
      }),
      xSeconds: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'sekunde', 'sekundes'],
        other: ['{{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundēm']
      }),
      halfAMinute: function (count, options) {
        if (options.addSuffix) {
          return 'pusminūtes';
        } else {
          return 'pusminūte';
        }
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        one: ['mazāk par {{time}}', 'minūti', 'minūti'],
        other: ['mazāk nekā {{count}} {{time}}', 'minūte', 'minūtes', 'minūtes', 'minūtēm']
      }),
      xMinutes: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'minūte', 'minūtes'],
        other: ['{{count}} {{time}}', 'minūte', 'minūtes', 'minūtes', 'minūtēm']
      }),
      aboutXHours: buildLocalizeTokenFn({
        one: ['apmēram 1 {{time}}', 'stunda', 'stundas'],
        other: ['apmēram {{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundām']
      }),
      xHours: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'stunda', 'stundas'],
        other: ['{{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundām']
      }),
      xDays: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'diena', 'dienas'],
        other: ['{{count}} {{time}}', 'diena', 'dienas', 'dienas', 'dienām']
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        one: ['apmēram 1 {{time}}', 'nedēļa', 'nedēļas'],
        other: ['apmēram {{count}} {{time}}', 'nedēļa', 'nedēļu', 'nedēļas', 'nedēļām']
      }),
      xWeeks: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'nedēļa', 'nedēļas'],
        other: ['{{count}} {{time}}', // TODO
        'nedēļa', 'nedēļu', 'nedēļas', 'nedēļām']
      }),
      aboutXMonths: buildLocalizeTokenFn({
        one: ['apmēram 1 {{time}}', 'mēnesis', 'mēneša'],
        other: ['apmēram {{count}} {{time}}', 'mēnesis', 'mēneši', 'mēneša', 'mēnešiem']
      }),
      xMonths: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'mēnesis', 'mēneša'],
        other: ['{{count}} {{time}}', 'mēnesis', 'mēneši', 'mēneša', 'mēnešiem']
      }),
      aboutXYears: buildLocalizeTokenFn({
        one: ['apmēram 1 {{time}}', 'gads', 'gada'],
        other: ['apmēram {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
      }),
      xYears: buildLocalizeTokenFn({
        one: ['1 {{time}}', 'gads', 'gada'],
        other: ['{{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
      }),
      overXYears: buildLocalizeTokenFn({
        one: ['ilgāk par 1 {{time}}', 'gadu', 'gadu'],
        other: ['vairāk nekā {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
      }),
      almostXYears: buildLocalizeTokenFn({
        one: ['gandrīz 1 {{time}}', 'gads', 'gada'],
        other: ['vairāk nekā {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
      })
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result = formatDistanceLocale[token](count, options);

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'pēc ' + result;
        } else {
          return 'pirms ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$M = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "y. 'gada' M. MMMM., EEEE",
      long: "y. 'gada' M. MMMM",
      medium: 'dd.MM.y.',
      short: 'dd.MM.y.'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'plkst.' {{time}}",
      long: "{{date}} 'plkst.' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$F = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var weekdays = ['svētdienā', 'pirmdienā', 'otrdienā', 'trešdienā', 'ceturtdienā', 'piektdienā', 'sestdienā'];
    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        if ((0, _index.default)(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }

        var weekday = weekdays[date.getUTCDay()];
        return "'Pagājušā " + weekday + " plkst.' p";
      },
      yesterday: "'Vakar plkst.' p",
      today: "'Šodien plkst.' p",
      tomorrow: "'Rīt plkst.' p",
      nextWeek: function (date, baseDate, options) {
        if ((0, _index.default)(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }

        var weekday = weekdays[date.getUTCDay()];
        return "'Nākamajā " + weekday + " plkst.' p";
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$F = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['p.m.ē', 'm.ē'],
      abbreviated: ['p. m. ē.', 'm. ē.'],
      wide: ['pirms mūsu ēras', 'mūsu ērā']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
      wide: ['pirmais ceturksnis', 'otrais ceturksnis', 'trešais ceturksnis', 'ceturtais ceturksnis']
    };
    var formattingQuarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
      wide: ['pirmajā ceturksnī', 'otrajā ceturksnī', 'trešajā ceturksnī', 'ceturtajā ceturksnī']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['janv.', 'febr.', 'marts', 'apr.', 'maijs', 'jūn.', 'jūl.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
      wide: ['janvāris', 'februāris', 'marts', 'aprīlis', 'maijs', 'jūnijs', 'jūlijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris']
    };
    var formattingMonthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['janv.', 'febr.', 'martā', 'apr.', 'maijs', 'jūn.', 'jūl.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
      wide: ['janvārī', 'februārī', 'martā', 'aprīlī', 'maijā', 'jūnijā', 'jūlijā', 'augustā', 'septembrī', 'oktobrī', 'novembrī', 'decembrī']
    };
    var dayValues = {
      narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
      short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
      abbreviated: ['svētd.', 'pirmd.', 'otrd.', 'trešd.', 'ceturtd.', 'piektd.', 'sestd.'],
      wide: ['svētdiena', 'pirmdiena', 'otrdiena', 'trešdiena', 'ceturtdiena', 'piektdiena', 'sestdiena']
    };
    var formattingDayValues = {
      narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
      short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
      abbreviated: ['svētd.', 'pirmd.', 'otrd.', 'trešd.', 'ceturtd.', 'piektd.', 'sestd.'],
      wide: ['svētdienā', 'pirmdienā', 'otrdienā', 'trešdienā', 'ceturtdienā', 'piektdienā', 'sestdienā']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusn.',
        noon: 'pusd.',
        morning: 'rīts',
        afternoon: 'diena',
        evening: 'vakars',
        night: 'nakts'
      },
      abbreviated: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusn.',
        noon: 'pusd.',
        morning: 'rīts',
        afternoon: 'pēcpusd.',
        evening: 'vakars',
        night: 'nakts'
      },
      wide: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusnakts',
        noon: 'pusdienlaiks',
        morning: 'rīts',
        afternoon: 'pēcpusdiena',
        evening: 'vakars',
        night: 'nakts'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusn.',
        noon: 'pusd.',
        morning: 'rītā',
        afternoon: 'dienā',
        evening: 'vakarā',
        night: 'naktī'
      },
      abbreviated: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusn.',
        noon: 'pusd.',
        morning: 'rītā',
        afternoon: 'pēcpusd.',
        evening: 'vakarā',
        night: 'naktī'
      },
      wide: {
        am: 'am',
        pm: 'pm',
        midnight: 'pusnaktī',
        noon: 'pusdienlaikā',
        morning: 'rītā',
        afternoon: 'pēcpusdienā',
        evening: 'vakarā',
        night: 'naktī'
      }
    };

    function ordinalNumber(number, _options) {
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayValues,
        defaultFormattingWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$F = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p\.m\.ē|m\.ē)/i,
      abbreviated: /^(p\. m\. ē\.|m\. ē\.)/i,
      wide: /^(pirms mūsu ēras|mūsu ērā)/i
    };
    var parseEraPatterns = {
      any: [/^p/i, /^m/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](\. cet\.)/i,
      wide: /^(pirma(is|jā)|otra(is|jā)|treša(is|jā)|ceturta(is|jā)) ceturksn(is|ī)/i
    };
    var parseQuarterPatterns = {
      narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
      abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
      wide: [/^p/i, /^o/i, /^t/i, /^c/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|jūn\.|jūl\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
      wide: /^(janvār(is|ī)|februār(is|ī)|mart[sā]|aprīl(is|ī)|maij[sā]|jūnij[sā]|jūlij[sā]|august[sā]|septembr(is|ī)|oktobr(is|ī)|novembr(is|ī)|decembr(is|ī))/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jūn/i, /^jūl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[spotc]/i,
      short: /^(sv|pi|o|t|c|pk|s)/i,
      abbreviated: /^(svētd\.|pirmd\.|otrd.\|trešd\.|ceturtd\.|piektd\.|sestd\.)/i,
      wide: /^(svētdien(a|ā)|pirmdien(a|ā)|otrdien(a|ā)|trešdien(a|ā)|ceturtdien(a|ā)|piektdien(a|ā)|sestdien(a|ā))/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
      any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|dien(a|ā)|vakar(s|ā)|nakt(s|ī))/,
      abbreviated: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|pēcpusd\.|vakar(s|ā)|nakt(s|ī))/,
      wide: /^(am|pm|pusnakt(s|ī)|pusdienlaik(s|ā)|rīt(s|ā)|pēcpusdien(a|ā)|vakar(s|ā)|nakt(s|ī))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^pusn/i,
        noon: /^pusd/i,
        morning: /^r/i,
        afternoon: /^(d|pēc)/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var lv = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$G);

    var _index2 = _interopRequireDefault(formatLong_1$M);

    var _index3 = _interopRequireDefault(formatRelative_1$F);

    var _index4 = _interopRequireDefault(localize_1$F);

    var _index5 = _interopRequireDefault(match_1$F);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Latvian locale (Latvia).
     * @language Latvian
     * @iso-639-2 lav
     * @author Rūdolfs Puķītis [@prudolfs]{@link https://github.com/prudolfs}
     */
    var locale = {
      code: 'lv',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$H = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'помалку од секунда',
        other: 'помалку од {{count}} секунди'
      },
      xSeconds: {
        one: '1 секунда',
        other: '{{count}} секунди'
      },
      halfAMinute: 'половина минута',
      lessThanXMinutes: {
        one: 'помалку од минута',
        other: 'помалку од {{count}} минути'
      },
      xMinutes: {
        one: '1 минута',
        other: '{{count}} минути'
      },
      aboutXHours: {
        one: 'околу 1 час',
        other: 'околу {{count}} часа'
      },
      xHours: {
        one: '1 час',
        other: '{{count}} часа'
      },
      xDays: {
        one: '1 ден',
        other: '{{count}} дена'
      },
      aboutXWeeks: {
        one: 'околу 1 недела',
        other: 'околу {{count}} месеци'
      },
      xWeeks: {
        one: '1 недела',
        other: '{{count}} недели'
      },
      aboutXMonths: {
        one: 'околу 1 месец',
        other: 'околу {{count}} недели'
      },
      xMonths: {
        one: '1 месец',
        other: '{{count}} месеци'
      },
      aboutXYears: {
        one: 'околу 1 година',
        other: 'околу {{count}} години'
      },
      xYears: {
        one: '1 година',
        other: '{{count}} години'
      },
      overXYears: {
        one: 'повеќе од 1 година',
        other: 'повеќе од {{count}} години'
      },
      almostXYears: {
        one: 'безмалку 1 година',
        other: 'безмалку {{count}} години'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'за ' + result;
        } else {
          return 'пред ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$N = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, dd MMMM yyyy',
      long: 'dd MMMM yyyy',
      medium: 'dd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      any: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$G = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var weekdays = ['недела', 'понеделник', 'вторник', 'среда', 'четврток', 'петок', 'сабота'];

    function lastWeek(day) {
      var weekday = weekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'минатата " + weekday + " во' p";

        case 1:
        case 2:
        case 4:
        case 5:
          return "'минатиот " + weekday + " во' p";
      }
    }

    function thisWeek(day) {
      var weekday = weekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'ова " + weekday + " вo' p";

        case 1:
        case 2:
        case 4:
        case 5:
          return "'овој " + weekday + " вo' p";
      }
    }

    function nextWeek(day) {
      var weekday = weekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'следната " + weekday + " вo' p";

        case 1:
        case 2:
        case 4:
        case 5:
          return "'следниот " + weekday + " вo' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчера во' p",
      today: "'денес во' p",
      tomorrow: "'утре во' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$G = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['пр.н.е.', 'н.е.'],
      abbreviated: ['пред н. е.', 'н. е.'],
      wide: ['пред нашата ера', 'нашата ера']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-ви кв.', '2-ри кв.', '3-ти кв.', '4-ти кв.'],
      wide: ['1-ви квартал', '2-ри квартал', '3-ти квартал', '4-ти квартал']
    };
    var monthValues = {
      abbreviated: ['јан', 'фев', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'септ', 'окт', 'ноем', 'дек'],
      wide: ['јануари', 'февруари', 'март', 'април', 'мај', 'јуни', 'јули', 'август', 'септември', 'октомври', 'ноември', 'декември']
    };
    var dayValues = {
      narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
      short: ['не', 'по', 'вт', 'ср', 'че', 'пе', 'са'],
      abbreviated: ['нед', 'пон', 'вто', 'сре', 'чет', 'пет', 'саб'],
      wide: ['недела', 'понеделник', 'вторник', 'среда', 'четврток', 'петок', 'сабота']
    };
    var dayPeriodValues = {
      wide: {
        am: 'претпладне',
        pm: 'попладне',
        midnight: 'полноќ',
        noon: 'напладне',
        morning: 'наутро',
        afternoon: 'попладне',
        evening: 'навечер',
        night: 'ноќе'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + '-ви';

          case 2:
            return number + '-ри';

          case 7:
          case 8:
            return number + '-ми';
        }
      }

      return number + '-ти';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$G = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?[врмт][и])?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((пр)?н\.?\s?е\.?)/i,
      abbreviated: /^((пр)?н\.?\s?е\.?)/i,
      wide: /^(пред нашата ера|нашата ера)/i
    };
    var parseEraPatterns = {
      any: [/^п/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[врт]?и?)? кв.?/i,
      wide: /^[1234](-?[врт]?и?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(не|по|вт|ср|че|пе|са)/i,
      abbreviated: /^(нед|пон|вто|сре|чет|пет|саб)/i,
      wide: /^(недела|понеделник|вторник|среда|четврток|петок|сабота)/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[аб]/i]
    };
    var matchMonthPatterns = {
      abbreviated: /^(јан|фев|мар|апр|мај|јун|јул|авг|сеп|окт|ноем|дек)/i,
      wide: /^(јануари|февруари|март|април|мај|јуни|јули|август|септември|октомври|ноември|декември)/i
    };
    var parseMonthPatterns = {
      any: [/^ја/i, /^Ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(претп|попл|полноќ|утро|пладне|вечер|ноќ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /претпладне/i,
        pm: /попладне/i,
        midnight: /полноќ/i,
        noon: /напладне/i,
        morning: /наутро/i,
        afternoon: /попладне/i,
        evening: /навечер/i,
        night: /ноќе/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var mk = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$H);

    var _index2 = _interopRequireDefault(formatLong_1$N);

    var _index3 = _interopRequireDefault(formatRelative_1$G);

    var _index4 = _interopRequireDefault(localize_1$G);

    var _index5 = _interopRequireDefault(match_1$G);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Macedonian locale.
     * @language Macedonian
     * @iso-639-2 mkd
     * @author Petar Vlahu [@vlahupetar]{@link https://github.com/vlahupetar}
     * @author Altrim Beqiri [@altrim]{@link https://github.com/altrim}
     */
    var locale = {
      code: 'mk',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$I = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'kurang dari 1 saat',
        other: 'kurang dari {{count}} saat'
      },
      xSeconds: {
        one: '1 saat',
        other: '{{count}} saat'
      },
      halfAMinute: 'setengah minit',
      lessThanXMinutes: {
        one: 'kurang dari 1 minit',
        other: 'kurang dari {{count}} minit'
      },
      xMinutes: {
        one: '1 minit',
        other: '{{count}} minit'
      },
      aboutXHours: {
        one: 'sekitar 1 jam',
        other: 'sekitar {{count}} jam'
      },
      xHours: {
        one: '1 jam',
        other: '{{count}} jam'
      },
      xDays: {
        one: '1 hari',
        other: '{{count}} hari'
      },
      aboutXWeeks: {
        one: 'sekitar 1 minggu',
        other: 'sekitar {{count}} minggu'
      },
      xWeeks: {
        one: '1 minggu',
        other: '{{count}} minggu'
      },
      aboutXMonths: {
        one: 'sekitar 1 bulan',
        other: 'sekitar {{count}} bulan'
      },
      xMonths: {
        one: '1 bulan',
        other: '{{count}} bulan'
      },
      aboutXYears: {
        one: 'sekitar 1 tahun',
        other: 'sekitar {{count}} tahun'
      },
      xYears: {
        one: '1 tahun',
        other: '{{count}} tahun'
      },
      overXYears: {
        one: 'lebih dari 1 tahun',
        other: 'lebih dari {{count}} tahun'
      },
      almostXYears: {
        one: 'hampir 1 tahun',
        other: 'hampir {{count}} tahun'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'dalam masa ' + result;
        } else {
          return result + ' yang lalu';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$O = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'd/M/yyyy'
    };
    var timeFormats = {
      full: 'HH.mm.ss',
      long: 'HH.mm.ss',
      medium: 'HH.mm',
      short: 'HH.mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$H = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'lepas pada jam' p",
      yesterday: "'Semalam pada jam' p",
      today: "'Hari ini pada jam' p",
      tomorrow: "'Esok pada jam' p",
      nextWeek: "eeee 'pada jam' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$H = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Most data for localization are taken from this page
    // https://www.unicode.org/cldr/charts/32/summary/ms.html
    var eraValues = {
      narrow: ['SM', 'M'],
      abbreviated: ['SM', 'M'],
      wide: ['Sebelum Masihi', 'Masihi']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['S1', 'S2', 'S3', 'S4'],
      wide: ['Suku pertama', 'Suku kedua', 'Suku ketiga', 'Suku keempat'] // Note: in Malay, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogo', 'Sep', 'Okt', 'Nov', 'Dis'],
      wide: ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun', 'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember']
    };
    var dayValues = {
      narrow: ['A', 'I', 'S', 'R', 'K', 'J', 'S'],
      short: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
      abbreviated: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
      wide: ['Ahad', 'Isnin', 'Selasa', 'Rabu', 'Khamis', 'Jumaat', 'Sabtu']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'tgh malam',
        noon: 'tgh hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'tengah malam',
        noon: 'tengah hari',
        morning: 'pagi',
        afternoon: 'tengah hari',
        evening: 'petang',
        night: 'malam'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // Can't use "pertama", "kedua" because can't be parsed

      switch (number) {
        default:
          return 'ke-' + number;
      }
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$H = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^ke-(\d+)?/i;
    var parseOrdinalNumberPattern = /petama|\d+/i;
    var matchEraPatterns = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
      wide: /^(sebelum masihi|masihi)/i
    };
    var parseEraPatterns = {
      any: [/^s/i, /^(m)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^S[1234]/i,
      wide: /Suku (pertama|kedua|ketiga|keempat)/i
    };
    var parseQuarterPatterns = {
      any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
      wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[aisrkj]/i,
      short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
    };
    var parseDayPatterns = {
      narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pa/i,
        afternoon: /tengah h/i,
        evening: /pe/i,
        night: /m/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ms = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$I);

    var _index2 = _interopRequireDefault(formatLong_1$O);

    var _index3 = _interopRequireDefault(formatRelative_1$H);

    var _index4 = _interopRequireDefault(localize_1$H);

    var _index5 = _interopRequireDefault(match_1$H);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Malay locale.
     * @language Malay
     * @iso-639-2 msa
     * @author Ruban Selvarajah [@Zyten]{@link https://github.com/Zyten}
     */
    var locale = {
      code: 'ms',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$J = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'inqas minn sekonda',
        other: 'inqas minn {{count}} sekondi'
      },
      xSeconds: {
        one: 'sekonda',
        other: '{{count}} sekondi'
      },
      halfAMinute: 'nofs minuta',
      lessThanXMinutes: {
        one: 'inqas minn minuta',
        other: 'inqas minn {{count}} minuti'
      },
      xMinutes: {
        one: 'minuta',
        other: '{{count}} minuti'
      },
      aboutXHours: {
        one: 'madwar siegħa',
        other: 'madwar {{count}} siegħat'
      },
      xHours: {
        one: 'siegħa',
        other: '{{count}} siegħat'
      },
      xDays: {
        one: 'ġurnata',
        other: '{{count}} ġranet'
      },
      aboutXWeeks: {
        one: 'madwar ġimgħa',
        other: 'madwar {{count}} ġimgħat'
      },
      xWeeks: {
        one: 'ġimgħa',
        other: '{{count}} ġimgħat'
      },
      aboutXMonths: {
        one: 'madwar xahar',
        other: 'madwar {{count}} xhur'
      },
      xMonths: {
        one: 'xahar',
        other: '{{count}} xhur'
      },
      aboutXYears: {
        one: 'madwar sena',
        two: 'madwar sentejn',
        other: 'madwar {{count}} snin'
      },
      xYears: {
        one: 'sena',
        two: 'sentejn',
        other: '{{count}} snin'
      },
      overXYears: {
        one: 'aktar minn sena',
        two: 'aktar minn sentejn',
        other: 'aktar minn {{count}} snin'
      },
      almostXYears: {
        one: 'kważi sena',
        two: 'kważi sentejn',
        other: 'kważi {{count}} snin'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var adverb = token.match(/years/i);
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else if (count === 2 && adverb) {
        result = formatDistanceLocale[token].two;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return "f'" + result;
        } else {
          return result + ' ilu';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$P = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$I = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'li għadda' 'fil-'p",
      yesterday: "'Il-bieraħ fil-'p",
      today: "'Illum fil-'p",
      tomorrow: "'Għada fil-'p",
      nextWeek: "eeee 'fil-'p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$I = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['Q', 'W'],
      abbreviated: ['QK', 'WK'],
      wide: ['qabel Kristu', 'wara Kristu']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1. kwart', '2. kwart', '3. kwart', '4. kwart']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'Ġ', 'L', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Fra', 'Mar', 'Apr', 'Mej', 'Ġun', 'Lul', 'Aww', 'Set', 'Ott', 'Nov', 'Diċ'],
      wide: ['Jannar', 'Frar', 'Marzu', 'April', 'Mejju', 'Ġunju', 'Lulju', 'Awwissu', 'Settembru', 'Ottubru', 'Novembru', 'Diċembru']
    };
    var dayValues = {
      narrow: ['Ħ', 'T', 'T', 'E', 'Ħ', 'Ġ', 'S'],
      short: ['Ħa', 'Tn', 'Tl', 'Er', 'Ħa', 'Ġi', 'Si'],
      abbreviated: ['Ħad', 'Tne', 'Tli', 'Erb', 'Ħam', 'Ġim', 'Sib'],
      wide: ['Il-Ħadd', 'It-Tnejn', 'It-Tlieta', 'L-Erbgħa', 'Il-Ħamis', 'Il-Ġimgħa', 'Is-Sibt']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'nofsillejl',
        noon: 'nofsinhar',
        morning: 'għodwa',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'lejl'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'nofsillejl',
        noon: 'nofsinhar',
        morning: 'għodwa',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'lejl'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'nofsillejl',
        noon: 'nofsinhar',
        morning: 'għodwa',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'lejl'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: 'filgħodu',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'billejl'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: 'filgħodu',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'billejl'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: 'filgħodu',
        afternoon: 'wara nofsinhar',
        evening: 'filgħaxija',
        night: 'billejl'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$I = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(q|w)/i,
      abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
      wide: /^(qabel kristu|before common era|wara kristu|common era)/i
    };
    var parseEraPatterns = {
      any: [/^(q|b)/i, /^(w|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^k[1234]/i,
      wide: /^[1234](\.)? kwart/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmaglsond]/i,
      abbreviated: /^(jan|fra|mar|apr|mej|ġun|lul|aww|set|ott|nov|diċ)/i,
      wide: /^(jannar|frar|marzu|april|mejju|ġunju|lulju|awwissu|settembru|ottubru|novembru|diċembru)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^ġ/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mej/i, /^ġ/i, /^l/i, /^aw/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[ħteġs]/i,
      short: /^(ħa|tn|tl|er|ħa|ġi|si)/i,
      abbreviated: /^(ħad|tne|tli|erb|ħam|ġim|sib)/i,
      wide: /^(il-ħadd|it-tnejn|it-tlieta|l-erbgħa|il-ħamis|il-ġimgħa|is-sibt)/i
    };
    var parseDayPatterns = {
      narrow: [/^ħ/i, /^t/i, /^t/i, /^e/i, /^ħ/i, /^ġ/i, /^s/i],
      any: [/^(il-)?ħad/i, /^(it-)?tn/i, /^(it-)?tl/i, /^(l-)?er/i, /^(il-)?ham/i, /^(il-)?ġi/i, /^(is-)?si/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i,
      any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^f'nofsillejl/i,
        noon: /^f'nofsinhar/i,
        morning: /għodwa/i,
        afternoon: /wara(\s.*)nofsinhar/i,
        evening: /filgħaxija/i,
        night: /lejl/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var mt = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$J);

    var _index2 = _interopRequireDefault(formatLong_1$P);

    var _index3 = _interopRequireDefault(formatRelative_1$I);

    var _index4 = _interopRequireDefault(localize_1$I);

    var _index5 = _interopRequireDefault(match_1$I);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Maltese locale.
     * @language Maltese
     * @iso-639-2 mlt
     * @author Andras Matzon [@amatzon](@link https://github.com/amatzon)
     * @author Bryan Borg [@bryanMt](@link https://github.com/bryanMt)
     */
    var locale = {
      code: 'mt',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$K = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        singular: 'mindre enn ett sekund',
        plural: 'mindre enn {{count}} sekunder'
      },
      xSeconds: {
        singular: 'ett sekund',
        plural: '{{count}} sekunder'
      },
      halfAMinute: 'et halvt minutt',
      lessThanXMinutes: {
        singular: 'mindre enn ett minutt',
        plural: 'mindre enn {{count}} minutter'
      },
      xMinutes: {
        singular: 'ett minutt',
        plural: '{{count}} minutter'
      },
      aboutXHours: {
        singular: 'omtrent en time',
        plural: 'omtrent {{count}} timer'
      },
      xHours: {
        singular: 'en time',
        plural: '{{count}} timer'
      },
      xDays: {
        singular: 'en dag',
        plural: '{{count}} dager'
      },
      aboutXWeeks: {
        singular: 'omtrent en uke',
        plural: 'omtrent {{count}} uker'
      },
      xWeeks: {
        singular: 'en uke',
        plural: '{{count}} uker'
      },
      aboutXMonths: {
        singular: 'omtrent en måned',
        plural: 'omtrent {{count}} måneder'
      },
      xMonths: {
        singular: 'en måned',
        plural: '{{count}} måneder'
      },
      aboutXYears: {
        singular: 'omtrent ett år',
        plural: 'omtrent {{count}} år'
      },
      xYears: {
        singular: 'ett år',
        plural: '{{count}} år'
      },
      overXYears: {
        singular: 'over ett år',
        plural: 'over {{count}} år'
      },
      almostXYears: {
        singular: 'nesten ett år',
        plural: 'nesten {{count}} år'
      }
    };
    var wordMapping = ['null', 'en', 'to', 'tre', 'fire', 'fem', 'seks', 'sju', 'åtte', 'ni', 'ti', 'elleve', 'tolv'];

    function formatDistance(token, count, options) {
      options = options || {
        onlyNumeric: false
      };
      var translation = formatDistanceLocale[token];
      var result;

      if (typeof translation === 'string') {
        result = translation;
      } else if (count === 0 || count > 1) {
        if (options.onlyNumeric) {
          result = translation.plural.replace('{{count}}', count);
        } else {
          result = translation.plural.replace('{{count}}', count < 13 ? wordMapping[count] : count);
        }
      } else {
        result = translation.singular;
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'om ' + result;
        } else {
          return result + ' siden';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$Q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d. MMMM y',
      long: 'd. MMMM y',
      medium: 'd. MMM y',
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$J = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'forrige' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$J = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['f.Kr.', 'e.Kr.'],
      abbreviated: ['f.Kr.', 'e.Kr.'],
      wide: ['før Kristus', 'etter Kristus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
      wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
      short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
      abbreviated: ['søn', 'man', 'tir', 'ons', 'tor', 'fre', 'lør'],
      wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på etterm.',
        evening: 'på kvelden',
        night: 'på natten'
      },
      abbreviated: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på etterm.',
        evening: 'på kvelden',
        night: 'på natten'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morgenen',
        afternoon: 'på ettermiddagen',
        evening: 'på kvelden',
        night: 'på natten'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$J = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^e/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(sø|ma|ti|on|to|fr|lø)/i,
      abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
      wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgen/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var nb = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$K);

    var _index2 = _interopRequireDefault(formatLong_1$Q);

    var _index3 = _interopRequireDefault(formatRelative_1$J);

    var _index4 = _interopRequireDefault(localize_1$J);

    var _index5 = _interopRequireDefault(match_1$J);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Norwegian Bokmål locale.
     * @language Norwegian Bokmål
     * @iso-639-2 nob
     * @author Hans-Kristian Koren [@Hanse]{@link https://github.com/Hanse}
     * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
     * @author Dag Stuan [@dagstuan]{@link https://github.com/dagstuan}
     */
    var locale = {
      code: 'nb',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$L = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'minder dan een seconde',
        other: 'minder dan {{count}} seconden'
      },
      xSeconds: {
        one: '1 seconde',
        other: '{{count}} seconden'
      },
      halfAMinute: 'een halve minuut',
      lessThanXMinutes: {
        one: 'minder dan een minuut',
        other: 'minder dan {{count}} minuten'
      },
      xMinutes: {
        one: 'een minuut',
        other: '{{count}} minuten'
      },
      aboutXHours: {
        one: 'ongeveer 1 uur',
        other: 'ongeveer {{count}} uur'
      },
      xHours: {
        one: '1 uur',
        other: '{{count}} uur'
      },
      xDays: {
        one: '1 dag',
        other: '{{count}} dagen'
      },
      aboutXWeeks: {
        one: 'ongeveer 1 week',
        other: 'ongeveer {{count}} weken'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weken'
      },
      aboutXMonths: {
        one: 'ongeveer 1 maand',
        other: 'ongeveer {{count}} maanden'
      },
      xMonths: {
        one: '1 maand',
        other: '{{count}} maanden'
      },
      aboutXYears: {
        one: 'ongeveer 1 jaar',
        other: 'ongeveer {{count}} jaar'
      },
      xYears: {
        one: '1 jaar',
        other: '{{count}} jaar'
      },
      overXYears: {
        one: 'meer dan 1 jaar',
        other: 'meer dan {{count}} jaar'
      },
      almostXYears: {
        one: 'bijna 1 jaar',
        other: 'bijna {{count}} jaar'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'over ' + result;
        } else {
          return result + ' geleden';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$R = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd-MM-y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$K = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'afgelopen' eeee 'om' p",
      yesterday: "'gisteren om' p",
      today: "'vandaag om' p",
      tomorrow: "'morgen om' p",
      nextWeek: "eeee 'om' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$K = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['v.C.', 'n.C.'],
      abbreviated: ['v.Chr.', 'n.Chr.'],
      wide: ['voor Christus', 'na Christus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
      wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
    };
    var dayValues = {
      narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
      short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
      abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
      wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middaguur',
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middaguur',
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middaguur',
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'e';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$K = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)e?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?Chr\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
    };
    var matchDayPatterns = {
      narrow: /^[zmdwv]/i,
      short: /^(zo|ma|di|wo|do|vr|za)/i,
      abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
      wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
      any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var nl = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$L);

    var _index2 = _interopRequireDefault(formatLong_1$R);

    var _index3 = _interopRequireDefault(formatRelative_1$K);

    var _index4 = _interopRequireDefault(localize_1$K);

    var _index5 = _interopRequireDefault(match_1$K);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Dutch locale.
     * @language Dutch
     * @iso-639-2 nld
     * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
     * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
     * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
     * @author Edo Rivai [@edorivai]{@link https://github.com/edorivai}
     * @author Niels Keurentjes [@curry684]{@link https://github.com/curry684}
     * @author Stefan Vermaas [@stefanvermaas]{@link https://github.com/stefanvermaas}
     */
    var locale = {
      code: 'nl',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$M = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'minder dan een seconde',
        other: 'minder dan {{count}} seconden'
      },
      xSeconds: {
        one: '1 seconde',
        other: '{{count}} seconden'
      },
      halfAMinute: 'een halve minuut',
      lessThanXMinutes: {
        one: 'minder dan een minuut',
        other: 'minder dan {{count}} minuten'
      },
      xMinutes: {
        one: 'een minuut',
        other: '{{count}} minuten'
      },
      aboutXHours: {
        one: 'ongeveer 1 uur',
        other: 'ongeveer {{count}} uur'
      },
      xHours: {
        one: '1 uur',
        other: '{{count}} uur'
      },
      xDays: {
        one: '1 dag',
        other: '{{count}} dagen'
      },
      aboutXWeeks: {
        one: 'ongeveer 1 week',
        other: 'ongeveer {{count}} weken'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weken'
      },
      aboutXMonths: {
        one: 'ongeveer 1 maand',
        other: 'ongeveer {{count}} maanden'
      },
      xMonths: {
        one: '1 maand',
        other: '{{count}} maanden'
      },
      aboutXYears: {
        one: 'ongeveer 1 jaar',
        other: 'ongeveer {{count}} jaar'
      },
      xYears: {
        one: '1 jaar',
        other: '{{count}} jaar'
      },
      overXYears: {
        one: 'meer dan 1 jaar',
        other: 'meer dan {{count}} jaar'
      },
      almostXYears: {
        one: 'bijna 1 jaar',
        other: 'bijna {{count}} jaar'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'over ' + result;
        } else {
          return result + ' geleden';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$S = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd-MM-y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$L = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'vorige' eeee 'om' p",
      yesterday: "'gisteren om' p",
      today: "'vandaag om' p",
      tomorrow: "'morgen om' p",
      nextWeek: "eeee 'om' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$L = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['v.C.', 'n.C.'],
      abbreviated: ['v.Chr.', 'n.Chr.'],
      wide: ['voor Christus', 'na Christus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['K1', 'K2', 'K3', 'K4'],
      wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
      wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
    };
    var dayValues = {
      narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
      short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
      abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
      wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middag',
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middag',
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'middernacht',
        noon: 'het middag',
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'e';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$L = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)e?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?Chr\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
    };
    var matchDayPatterns = {
      narrow: /^[zmdwv]/i,
      short: /^(zo|ma|di|wo|do|vr|za)/i,
      abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
      wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
      any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var nlBE = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$M);

    var _index2 = _interopRequireDefault(formatLong_1$S);

    var _index3 = _interopRequireDefault(formatRelative_1$L);

    var _index4 = _interopRequireDefault(localize_1$L);

    var _index5 = _interopRequireDefault(match_1$L);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Dutch locale.
     * @language Dutch
     * @iso-639-2 nld
     * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
     * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
     * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
     * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
     */
    var locale = {
      code: 'nl-BE',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$N = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        singular: 'mindre enn eitt sekund',
        plural: 'mindre enn {{count}} sekund'
      },
      xSeconds: {
        singular: 'eitt sekund',
        plural: '{{count}} sekund'
      },
      halfAMinute: 'eit halvt minutt',
      lessThanXMinutes: {
        singular: 'mindre enn eitt minutt',
        plural: 'mindre enn {{count}} minutt'
      },
      xMinutes: {
        singular: 'eitt minutt',
        plural: '{{count}} minutt'
      },
      aboutXHours: {
        singular: 'omtrent ein time',
        plural: 'omtrent {{count}} timar'
      },
      xHours: {
        singular: 'ein time',
        plural: '{{count}} timar'
      },
      xDays: {
        singular: 'ein dag',
        plural: '{{count}} dagar'
      },
      aboutXWeeks: {
        singular: 'omtrent ei veke',
        plural: 'omtrent {{count}} veker'
      },
      xWeeks: {
        singular: 'ei veke',
        plural: '{{count}} veker'
      },
      aboutXMonths: {
        singular: 'omtrent ein månad',
        plural: 'omtrent {{count}} månader'
      },
      xMonths: {
        singular: 'ein månad',
        plural: '{{count}} månader'
      },
      aboutXYears: {
        singular: 'omtrent eitt år',
        plural: 'omtrent {{count}} år'
      },
      xYears: {
        singular: 'eitt år',
        plural: '{{count}} år'
      },
      overXYears: {
        singular: 'over eitt år',
        plural: 'over {{count}} år'
      },
      almostXYears: {
        singular: 'nesten eitt år',
        plural: 'nesten {{count}} år'
      }
    };
    var wordMapping = ['null', 'ein', 'to', 'tre', 'fire', 'fem', 'seks', 'sju', 'åtte', 'ni', 'ti', 'elleve', 'tolv'];

    function formatDistance(token, count, options) {
      options = options || {
        onlyNumeric: false
      };
      var translation = formatDistanceLocale[token];
      var result;

      if (typeof translation === 'string') {
        result = translation;
      } else if (count === 0 || count > 1) {
        if (options.onlyNumeric) {
          result = translation.plural.replace('{{count}}', count);
        } else {
          result = translation.plural.replace('{{count}}', count < 13 ? wordMapping[count] : count);
        }
      } else {
        result = translation.singular;
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'om ' + result;
        } else {
          return result + ' sidan';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$T = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d. MMMM y',
      long: 'd. MMMM y',
      medium: 'd. MMM y',
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$M = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'førre' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$M = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['f.Kr.', 'e.Kr.'],
      abbreviated: ['f.Kr.', 'e.Kr.'],
      wide: ['før Kristus', 'etter Kristus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
      wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
      short: ['su', 'må', 'ty', 'on', 'to', 'fr', 'lau'],
      abbreviated: ['sun', 'mån', 'tys', 'ons', 'tor', 'fre', 'laur'],
      wide: ['sundag', 'måndag', 'tysdag', 'onsdag', 'torsdag', 'fredag', 'laurdag']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på etterm.',
        evening: 'på kvelden',
        night: 'på natta'
      },
      abbreviated: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på etterm.',
        evening: 'på kvelden',
        night: 'på natta'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morgonen',
        afternoon: 'på ettermiddagen',
        evening: 'på kvelden',
        night: 'på natta'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$M = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^e/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(su|må|ty|on|to|fr|la)/i,
      abbreviated: /^(sun|mån|tys|ons|tor|fre|laur)/i,
      wide: /^(sundag|måndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var nn = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$N);

    var _index2 = _interopRequireDefault(formatLong_1$T);

    var _index3 = _interopRequireDefault(formatRelative_1$M);

    var _index4 = _interopRequireDefault(localize_1$M);

    var _index5 = _interopRequireDefault(match_1$M);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Norwegian Nynorsk locale.
     * @language Norwegian Nynorsk
     * @iso-639-2 nno
     * @author Mats Byrkjeland [@draperunner]{@link https://github.com/draperunner}
     */
    var locale = {
      code: 'nn',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$O = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function declensionGroup(scheme, count) {
      if (count === 1) {
        return scheme.one;
      }

      var rem100 = count % 100; // ends with 11-20

      if (rem100 <= 20 && rem100 > 10) {
        return scheme.other;
      }

      var rem10 = rem100 % 10; // ends with 2, 3, 4

      if (rem10 >= 2 && rem10 <= 4) {
        return scheme.twoFour;
      }

      return scheme.other;
    }

    function declension(scheme, count, time) {
      time = time || 'regular';
      var group = declensionGroup(scheme, count);
      var finalText = group[time] || group;
      return finalText.replace('{{count}}', count);
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          regular: 'mniej niż sekunda',
          past: 'mniej niż sekundę',
          future: 'mniej niż sekundę'
        },
        twoFour: 'mniej niż {{count}} sekundy',
        other: 'mniej niż {{count}} sekund'
      },
      xSeconds: {
        one: {
          regular: 'sekunda',
          past: 'sekundę',
          future: 'sekundę'
        },
        twoFour: '{{count}} sekundy',
        other: '{{count}} sekund'
      },
      halfAMinute: {
        one: 'pół minuty',
        twoFour: 'pół minuty',
        other: 'pół minuty'
      },
      lessThanXMinutes: {
        one: {
          regular: 'mniej niż minuta',
          past: 'mniej niż minutę',
          future: 'mniej niż minutę'
        },
        twoFour: 'mniej niż {{count}} minuty',
        other: 'mniej niż {{count}} minut'
      },
      xMinutes: {
        one: {
          regular: 'minuta',
          past: 'minutę',
          future: 'minutę'
        },
        twoFour: '{{count}} minuty',
        other: '{{count}} minut'
      },
      aboutXHours: {
        one: {
          regular: 'około godziny',
          past: 'około godziny',
          future: 'około godzinę'
        },
        twoFour: 'około {{count}} godziny',
        other: 'około {{count}} godzin'
      },
      xHours: {
        one: {
          regular: 'godzina',
          past: 'godzinę',
          future: 'godzinę'
        },
        twoFour: '{{count}} godziny',
        other: '{{count}} godzin'
      },
      xDays: {
        one: {
          regular: 'dzień',
          past: 'dzień',
          future: '1 dzień'
        },
        twoFour: '{{count}} dni',
        other: '{{count}} dni'
      },
      aboutXWeeks: {
        one: 'około tygodnia',
        twoFour: 'około {{count}} tygodni',
        other: 'około {{count}} tygodni'
      },
      xWeeks: {
        one: 'tydzień',
        twoFour: '{{count}} tygodnie',
        other: '{{count}} tygodni'
      },
      aboutXMonths: {
        one: 'około miesiąc',
        twoFour: 'około {{count}} miesiące',
        other: 'około {{count}} miesięcy'
      },
      xMonths: {
        one: 'miesiąc',
        twoFour: '{{count}} miesiące',
        other: '{{count}} miesięcy'
      },
      aboutXYears: {
        one: 'około rok',
        twoFour: 'około {{count}} lata',
        other: 'około {{count}} lat'
      },
      xYears: {
        one: 'rok',
        twoFour: '{{count}} lata',
        other: '{{count}} lat'
      },
      overXYears: {
        one: 'ponad rok',
        twoFour: 'ponad {{count}} lata',
        other: 'ponad {{count}} lat'
      },
      almostXYears: {
        one: 'prawie rok',
        twoFour: 'prawie {{count}} lata',
        other: 'prawie {{count}} lat'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var scheme = formatDistanceLocale[token];

      if (!options.addSuffix) {
        return declension(scheme, count);
      }

      if (options.comparison > 0) {
        return 'za ' + declension(scheme, count, 'future');
      } else {
        return declension(scheme, count, 'past') + ' temu';
      }
    }

    module.exports = exports.default;
    });

    var formatLong_1$U = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, do MMMM y',
      long: 'do MMMM y',
      medium: 'do MMM y',
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$N = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var adjectivesLastWeek = {
      masculine: 'ostatni',
      feminine: 'ostatnia'
    };
    var adjectivesThisWeek = {
      masculine: 'ten',
      feminine: 'ta'
    };
    var adjectivesNextWeek = {
      masculine: 'następny',
      feminine: 'następna'
    };
    var dayGrammaticalGender = {
      0: 'feminine',
      1: 'masculine',
      2: 'masculine',
      3: 'feminine',
      4: 'masculine',
      5: 'masculine',
      6: 'feminine'
    };

    function getAdjectives(token, date, baseDate, options) {
      if ((0, _index.default)(date, baseDate, options)) {
        return adjectivesThisWeek;
      } else if (token === 'lastWeek') {
        return adjectivesLastWeek;
      } else if (token === 'nextWeek') {
        return adjectivesNextWeek;
      } else {
        throw new Error("Cannot determine adjectives for token ".concat(token));
      }
    }

    function getAdjective(token, date, baseDate, options) {
      var day = date.getUTCDay();
      var adjectives = getAdjectives(token, date, baseDate, options);
      var grammaticalGender = dayGrammaticalGender[day];
      return adjectives[grammaticalGender];
    }

    function dayAndTimeWithAdjective(token, date, baseDate, options) {
      var adjective = getAdjective(token, date, baseDate, options);
      return "'".concat(adjective, "' eeee 'o' p");
    }

    var formatRelativeLocale = {
      lastWeek: dayAndTimeWithAdjective,
      yesterday: "'wczoraj o' p",
      today: "'dzisiaj o' p",
      tomorrow: "'jutro o' p",
      nextWeek: dayAndTimeWithAdjective,
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(token, date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$N = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number);
    }

    var eraValues = {
      narrow: ['p.n.e.', 'n.e.'],
      abbreviated: ['p.n.e.', 'n.e.'],
      wide: ['przed naszą erą', 'naszej ery']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['I kw.', 'II kw.', 'III kw.', 'IV kw.'],
      wide: ['I kwartał', 'II kwartał', 'III kwartał', 'IV kwartał']
    };
    var monthValues = {
      narrow: ['S', 'L', 'M', 'K', 'M', 'C', 'L', 'S', 'W', 'P', 'L', 'G'],
      abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
      wide: ['styczeń', 'luty', 'marzec', 'kwiecień', 'maj', 'czerwiec', 'lipiec', 'sierpień', 'wrzesień', 'październik', 'listopad', 'grudzień']
    };
    var monthFormattingValues = {
      narrow: ['s', 'l', 'm', 'k', 'm', 'c', 'l', 's', 'w', 'p', 'l', 'g'],
      abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
      wide: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia']
    };
    var dayValues = {
      narrow: ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'],
      short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
      abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
      wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
    };
    var dayFormattingValues = {
      narrow: ['n', 'p', 'w', 'ś', 'c', 'p', 's'],
      short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
      abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
      wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'półn.',
        noon: 'poł',
        morning: 'rano',
        afternoon: 'popoł.',
        evening: 'wiecz.',
        night: 'noc'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'północ',
        noon: 'południe',
        morning: 'rano',
        afternoon: 'popołudnie',
        evening: 'wieczór',
        night: 'noc'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'północ',
        noon: 'południe',
        morning: 'rano',
        afternoon: 'popołudnie',
        evening: 'wieczór',
        night: 'noc'
      }
    };
    var dayPeriodFormattingValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'o półn.',
        noon: 'w poł.',
        morning: 'rano',
        afternoon: 'po poł.',
        evening: 'wiecz.',
        night: 'w nocy'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'o północy',
        noon: 'w południe',
        morning: 'rano',
        afternoon: 'po południu',
        evening: 'wieczorem',
        night: 'w nocy'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'o północy',
        noon: 'w południe',
        morning: 'rano',
        afternoon: 'po południu',
        evening: 'wieczorem',
        night: 'w nocy'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: monthFormattingValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide',
        formattingValues: dayFormattingValues,
        defaultFormattingWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: dayPeriodFormattingValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$N = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
    };
    var parseEraPatterns = {
      any: [/^p/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
      wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
    };
    var matchMonthPatterns = {
      narrow: /^[slmkcwpg]/i,
      abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
      wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
    };
    var parseMonthPatterns = {
      narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
      any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
    };
    var matchDayPatterns = {
      narrow: /^[npwścs]/i,
      short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
      abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
      wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
      abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
      any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
      any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      },
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var pl = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$O);

    var _index2 = _interopRequireDefault(formatLong_1$U);

    var _index3 = _interopRequireDefault(formatRelative_1$N);

    var _index4 = _interopRequireDefault(localize_1$N);

    var _index5 = _interopRequireDefault(match_1$N);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Polish locale.
     * @language Polish
     * @iso-639-2 pol
     * @author Mateusz Derks [@ertrzyiks]{@link https://github.com/ertrzyiks}
     * @author Just RAG [@justrag]{@link https://github.com/justrag}
     * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
     * @author Mateusz Tokarski [@mutisz]{@link https://github.com/mutisz}
     */
    var locale = {
      code: 'pl',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$P = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'menos de um segundo',
        other: 'menos de {{count}} segundos'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundos'
      },
      halfAMinute: 'meio minuto',
      lessThanXMinutes: {
        one: 'menos de um minuto',
        other: 'menos de {{count}} minutos'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutos'
      },
      aboutXHours: {
        one: 'aproximadamente 1 hora',
        other: 'aproximadamente {{count}} horas'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} horas'
      },
      xDays: {
        one: '1 dia',
        other: '{{count}} dias'
      },
      aboutXWeeks: {
        one: 'aproximadamente 1 semana',
        other: 'aproximadamente {{count}} semanas'
      },
      xWeeks: {
        one: '1 semana',
        other: '{{count}} semanas'
      },
      aboutXMonths: {
        one: 'aproximadamente 1 mês',
        other: 'aproximadamente {{count}} meses'
      },
      xMonths: {
        one: '1 mês',
        other: '{{count}} meses'
      },
      aboutXYears: {
        one: 'aproximadamente 1 ano',
        other: 'aproximadamente {{count}} anos'
      },
      xYears: {
        one: '1 ano',
        other: '{{count}} anos'
      },
      overXYears: {
        one: 'mais de 1 ano',
        other: 'mais de {{count}} anos'
      },
      almostXYears: {
        one: 'quase 1 ano',
        other: 'quase {{count}} anos'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'daqui a ' + result;
        } else {
          return 'há ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$V = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d 'de' MMM 'de' y",
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'às' {{time}}",
      long: "{{date}} 'às' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$O = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'na última' eeee 'às' p",
      yesterday: "'ontem às' p",
      today: "'hoje às' p",
      tomorrow: "'amanhã às' p",
      nextWeek: "eeee 'às' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$O = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var eraValues = {
      narrow: ['aC', 'dC'],
      abbreviated: ['a.C.', 'd.C.'],
      wide: ['antes de Cristo', 'depois de Cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
      wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
    };
    var dayValues = {
      narrow: ['d', 's', 't', 'q', 'q', 's', 's'],
      short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
      abbreviated: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
      wide: ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'noite',
        night: 'madrugada'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'noite',
        night: 'madrugada'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'noite',
        night: 'madrugada'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da noite',
        night: 'da madrugada'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da noite',
        night: 'da madrugada'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da noite',
        night: 'da madrugada'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$O = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(º|ª)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º|ª)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[dstq]/i,
      short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
      wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[áa]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
      any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^meia/i,
        noon: /^meio/i,
        morning: /manh[ãa]/i,
        afternoon: /tarde/i,
        evening: /noite/i,
        night: /madrugada/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var pt = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$P);

    var _index2 = _interopRequireDefault(formatLong_1$V);

    var _index3 = _interopRequireDefault(formatRelative_1$O);

    var _index4 = _interopRequireDefault(localize_1$O);

    var _index5 = _interopRequireDefault(match_1$O);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Portuguese locale.
     * @language Portuguese
     * @iso-639-2 por
     * @author Dário Freire [@dfreire]{@link https://github.com/dfreire}
     * @author Adrián de la Rosa [@adrm]{@link https://github.com/adrm}
     */
    var locale = {
      code: 'pt',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$Q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'menos de um segundo',
        other: 'menos de {{count}} segundos'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundos'
      },
      halfAMinute: 'meio minuto',
      lessThanXMinutes: {
        one: 'menos de um minuto',
        other: 'menos de {{count}} minutos'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutos'
      },
      aboutXHours: {
        one: 'cerca de 1 hora',
        other: 'cerca de {{count}} horas'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} horas'
      },
      xDays: {
        one: '1 dia',
        other: '{{count}} dias'
      },
      aboutXWeeks: {
        one: 'cerca de 1 semana',
        other: 'cerca de {{count}} semanas'
      },
      xWeeks: {
        one: '1 semana',
        other: '{{count}} semanas'
      },
      aboutXMonths: {
        one: 'cerca de 1 mês',
        other: 'cerca de {{count}} meses'
      },
      xMonths: {
        one: '1 mês',
        other: '{{count}} meses'
      },
      aboutXYears: {
        one: 'cerca de 1 ano',
        other: 'cerca de {{count}} anos'
      },
      xYears: {
        one: '1 ano',
        other: '{{count}} anos'
      },
      overXYears: {
        one: 'mais de 1 ano',
        other: 'mais de {{count}} anos'
      },
      almostXYears: {
        one: 'quase 1 ano',
        other: 'quase {{count}} anos'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'em ' + result;
        } else {
          return 'há ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$W = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: 'd MMM y',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'às' {{time}}",
      long: "{{date}} 'às' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$P = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date, _baseDate, _options) {
        var weekday = date.getUTCDay();
        var last = weekday === 0 || weekday === 6 ? 'último' : 'última';
        return "'" + last + "' eeee 'às' p";
      },
      yesterday: "'ontem às' p",
      today: "'hoje às' p",
      tomorrow: "'amanhã às' p",
      nextWeek: "eeee 'às' p",
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$P = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['AC', 'DC'],
      abbreviated: ['AC', 'DC'],
      wide: ['antes de cristo', 'depois de cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
      wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
    };
    var dayValues = {
      narrow: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
      short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sab'],
      abbreviated: ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado'],
      wide: ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noite'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noite'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'manhã',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noite'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da tarde',
        night: 'da noite'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da tarde',
        night: 'da noite'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'meia-noite',
        noon: 'meio-dia',
        morning: 'da manhã',
        afternoon: 'da tarde',
        evening: 'da tarde',
        night: 'da noite'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber);
      var options = dirtyOptions || {};
      var unit = String(options.unit);

      if (unit === 'week' || unit === 'isoWeek') {
        return number + 'ª';
      }

      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$P = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)[ºªo]?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
      wide: /^(antes de cristo|depois de cristo)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^antes de cristo/i, /^depois de cristo/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmajsond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
    };
    var matchDayPatterns = {
      narrow: /^(dom|[23456]ª?|s[aá]b)/i,
      short: /^(dom|[23456]ª?|s[aá]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
      wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
    };
    var parseDayPatterns = {
      short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
      narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn|^meia[-\s]noite/i,
        noon: /^md|^meio[-\s]dia/i,
        morning: /manhã/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noite/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ptBR = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$Q);

    var _index2 = _interopRequireDefault(formatLong_1$W);

    var _index3 = _interopRequireDefault(formatRelative_1$P);

    var _index4 = _interopRequireDefault(localize_1$P);

    var _index5 = _interopRequireDefault(match_1$P);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Portuguese locale (Brazil).
     * @language Portuguese
     * @iso-639-2 por
     * @author Lucas Duailibe [@duailibe]{@link https://github.com/duailibe}
     * @author Yago Carballo [@yagocarballo]{@link https://github.com/YagoCarballo}
     */
    var locale = {
      code: 'pt-BR',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$R = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'mai puțin de o secundă',
        other: 'mai puțin de {{count}} secunde'
      },
      xSeconds: {
        one: '1 secundă',
        other: '{{count}} secunde'
      },
      halfAMinute: 'jumătate de minut',
      lessThanXMinutes: {
        one: 'mai puțin de un minut',
        other: 'mai puțin de {{count}} minute'
      },
      xMinutes: {
        one: '1 minut',
        other: '{{count}} minute'
      },
      aboutXHours: {
        one: 'circa 1 oră',
        other: 'circa {{count}} ore'
      },
      xHours: {
        one: '1 oră',
        other: '{{count}} ore'
      },
      xDays: {
        one: '1 zi',
        other: '{{count}} zile'
      },
      aboutXWeeks: {
        one: 'circa o săptămână',
        other: 'circa {{count}} săptămâni'
      },
      xWeeks: {
        one: '1 săptămână',
        other: '{{count}} săptămâni'
      },
      aboutXMonths: {
        one: 'circa 1 lună',
        other: 'circa {{count}} luni'
      },
      xMonths: {
        one: '1 lună',
        other: '{{count}} luni'
      },
      aboutXYears: {
        one: 'circa 1 an',
        other: 'circa {{count}} ani'
      },
      xYears: {
        one: '1 an',
        other: '{{count}} ani'
      },
      overXYears: {
        one: 'peste 1 an',
        other: 'peste {{count}} ani'
      },
      almostXYears: {
        one: 'aproape 1 an',
        other: 'aproape {{count}} ani'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'în ' + result;
        } else {
          return result + ' în urmă';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$X = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d MMMM yyyy',
      long: 'd MMMM yyyy',
      medium: 'd MMM yyyy',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'la' {{time}}",
      long: "{{date}} 'la' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$Q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'trecută la' p",
      yesterday: "'ieri la' p",
      today: "'astăzi la' p",
      tomorrow: "'mâine la' p",
      nextWeek: "eeee 'viitoare la' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$Q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['Î', 'D'],
      abbreviated: ['Î.d.C.', 'D.C.'],
      wide: ['Înainte de Cristos', 'După Cristos']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['primul trimestru', 'al doilea trimestru', 'al treilea trimestru', 'al patrulea trimestru']
    };
    var monthValues = {
      narrow: ['I', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['ian', 'feb', 'mar', 'apr', 'mai', 'iun', 'iul', 'aug', 'sep', 'oct', 'noi', 'dec'],
      wide: ['ianuarie', 'februarie', 'martie', 'aprilie', 'mai', 'iunie', 'iulie', 'august', 'septembrie', 'octombrie', 'noiembrie', 'decembrie']
    };
    var dayValues = {
      narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
      short: ['du', 'lu', 'ma', 'mi', 'jo', 'vi', 'sâ'],
      abbreviated: ['dum', 'lun', 'mar', 'mie', 'joi', 'vin', 'sâm'],
      wide: ['duminică', 'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbătă']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'ami',
        morning: 'dim',
        afternoon: 'da',
        evening: 's',
        night: 'n'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'miezul nopții',
        noon: 'amiază',
        morning: 'dimineață',
        afternoon: 'după-amiază',
        evening: 'seară',
        night: 'noapte'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'miezul nopții',
        noon: 'amiază',
        morning: 'dimineață',
        afternoon: 'după-amiază',
        evening: 'seară',
        night: 'noapte'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'amiază',
        morning: 'dimineață',
        afternoon: 'după-amiază',
        evening: 'seară',
        night: 'noapte'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'miezul nopții',
        noon: 'amiază',
        morning: 'dimineață',
        afternoon: 'după-amiază',
        evening: 'seară',
        night: 'noapte'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'miezul nopții',
        noon: 'amiază',
        morning: 'dimineață',
        afternoon: 'după-amiază',
        evening: 'seară',
        night: 'noapte'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$Q = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(Î|D)/i,
      abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
      wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
    };
    var parseEraPatterns = {
      any: [/^ÎC/i, /^DC/i],
      wide: [/^(Înainte de Cristos|Înaintea erei noastre)/i, /^(După Cristos|Era noastră)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^trimestrul [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[ifmaasond]/i,
      abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
      wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
    };
    var parseMonthPatterns = {
      narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmjvs]/i,
      short: /^(d|l|ma|mi|j|v|s)/i,
      abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
      wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
      any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /amiaza/i,
        morning: /dimineaţa/i,
        afternoon: /după-amiaza/i,
        evening: /seara/i,
        night: /noaptea/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ro = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$R);

    var _index2 = _interopRequireDefault(formatLong_1$X);

    var _index3 = _interopRequireDefault(formatRelative_1$Q);

    var _index4 = _interopRequireDefault(localize_1$Q);

    var _index5 = _interopRequireDefault(match_1$Q);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Romanian locale.
     * @language Romanian
     * @iso-639-2 ron
     * @author Sergiu Munteanu [@jsergiu]{@link https://github.com/jsergiu}
     * @author Adrian Ocneanu [@aocneanu]{@link https://github.com/aocneanu}
     * @author Mihai Ocneanu [@gandesc]{@link https://github.com/gandesc}
     */
    var locale = {
      code: 'ro',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$S = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function declension(scheme, count) {
      // scheme for count=1 exists
      if (scheme.one !== undefined && count === 1) {
        return scheme.one;
      }

      var rem10 = count % 10;
      var rem100 = count % 100; // 1, 21, 31, ...

      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
      } else {
        return scheme.pluralGenitive.replace('{{count}}', count);
      }
    }

    function buildLocalizeTokenFn(scheme) {
      return function (count, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return 'через ' + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + ' назад';
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }

    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: 'меньше секунды',
          singularNominative: 'меньше {{count}} секунды',
          singularGenitive: 'меньше {{count}} секунд',
          pluralGenitive: 'меньше {{count}} секунд'
        },
        future: {
          one: 'меньше, чем через секунду',
          singularNominative: 'меньше, чем через {{count}} секунду',
          singularGenitive: 'меньше, чем через {{count}} секунды',
          pluralGenitive: 'меньше, чем через {{count}} секунд'
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} секунда',
          singularGenitive: '{{count}} секунды',
          pluralGenitive: '{{count}} секунд'
        },
        past: {
          singularNominative: '{{count}} секунду назад',
          singularGenitive: '{{count}} секунды назад',
          pluralGenitive: '{{count}} секунд назад'
        },
        future: {
          singularNominative: 'через {{count}} секунду',
          singularGenitive: 'через {{count}} секунды',
          pluralGenitive: 'через {{count}} секунд'
        }
      }),
      halfAMinute: function (_, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            return 'через полминуты';
          } else {
            return 'полминуты назад';
          }
        }

        return 'полминуты';
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: 'меньше минуты',
          singularNominative: 'меньше {{count}} минуты',
          singularGenitive: 'меньше {{count}} минут',
          pluralGenitive: 'меньше {{count}} минут'
        },
        future: {
          one: 'меньше, чем через минуту',
          singularNominative: 'меньше, чем через {{count}} минуту',
          singularGenitive: 'меньше, чем через {{count}} минуты',
          pluralGenitive: 'меньше, чем через {{count}} минут'
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} минута',
          singularGenitive: '{{count}} минуты',
          pluralGenitive: '{{count}} минут'
        },
        past: {
          singularNominative: '{{count}} минуту назад',
          singularGenitive: '{{count}} минуты назад',
          pluralGenitive: '{{count}} минут назад'
        },
        future: {
          singularNominative: 'через {{count}} минуту',
          singularGenitive: 'через {{count}} минуты',
          pluralGenitive: 'через {{count}} минут'
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'около {{count}} часа',
          singularGenitive: 'около {{count}} часов',
          pluralGenitive: 'около {{count}} часов'
        },
        future: {
          singularNominative: 'приблизительно через {{count}} час',
          singularGenitive: 'приблизительно через {{count}} часа',
          pluralGenitive: 'приблизительно через {{count}} часов'
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} час',
          singularGenitive: '{{count}} часа',
          pluralGenitive: '{{count}} часов'
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} день',
          singularGenitive: '{{count}} дня',
          pluralGenitive: '{{count}} дней'
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'около {{count}} недели',
          singularGenitive: 'около {{count}} недель',
          pluralGenitive: 'около {{count}} недель'
        },
        future: {
          singularNominative: 'приблизительно через {{count}} неделю',
          singularGenitive: 'приблизительно через {{count}} недели',
          pluralGenitive: 'приблизительно через {{count}} недель'
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} неделя',
          singularGenitive: '{{count}} недели',
          pluralGenitive: '{{count}} недель'
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'около {{count}} месяца',
          singularGenitive: 'около {{count}} месяцев',
          pluralGenitive: 'около {{count}} месяцев'
        },
        future: {
          singularNominative: 'приблизительно через {{count}} месяц',
          singularGenitive: 'приблизительно через {{count}} месяца',
          pluralGenitive: 'приблизительно через {{count}} месяцев'
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} месяц',
          singularGenitive: '{{count}} месяца',
          pluralGenitive: '{{count}} месяцев'
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'около {{count}} года',
          singularGenitive: 'около {{count}} лет',
          pluralGenitive: 'около {{count}} лет'
        },
        future: {
          singularNominative: 'приблизительно через {{count}} год',
          singularGenitive: 'приблизительно через {{count}} года',
          pluralGenitive: 'приблизительно через {{count}} лет'
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} год',
          singularGenitive: '{{count}} года',
          pluralGenitive: '{{count}} лет'
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'больше {{count}} года',
          singularGenitive: 'больше {{count}} лет',
          pluralGenitive: 'больше {{count}} лет'
        },
        future: {
          singularNominative: 'больше, чем через {{count}} год',
          singularGenitive: 'больше, чем через {{count}} года',
          pluralGenitive: 'больше, чем через {{count}} лет'
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'почти {{count}} год',
          singularGenitive: 'почти {{count}} года',
          pluralGenitive: 'почти {{count}} лет'
        },
        future: {
          singularNominative: 'почти через {{count}} год',
          singularGenitive: 'почти через {{count}} года',
          pluralGenitive: 'почти через {{count}} лет'
        }
      })
    };

    function formatDistance(token, count, options) {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    }

    module.exports = exports.default;
    });

    var formatLong_1$Y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, do MMMM y 'г.'",
      long: "do MMMM y 'г.'",
      medium: "d MMM y 'г.'",
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      any: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$R = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var accusativeWeekdays = ['воскресенье', 'понедельник', 'вторник', 'среду', 'четверг', 'пятницу', 'субботу'];

    function lastWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
          return "'в прошлое " + weekday + " в' p";

        case 1:
        case 2:
        case 4:
          return "'в прошлый " + weekday + " в' p";

        case 3:
        case 5:
        case 6:
          return "'в прошлую " + weekday + " в' p";
      }
    }

    function thisWeek(day) {
      var weekday = accusativeWeekdays[day];

      if (day === 2
      /* Tue */
      ) {
          return "'во " + weekday + " в' p";
        } else {
        return "'в " + weekday + " в' p";
      }
    }

    function nextWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
          return "'в следующее " + weekday + " в' p";

        case 1:
        case 2:
        case 4:
          return "'в следующий " + weekday + " в' p";

        case 3:
        case 5:
        case 6:
          return "'в следующую " + weekday + " в' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчера в' p",
      today: "'сегодня в' p",
      tomorrow: "'завтра в' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$R = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['до н.э.', 'н.э.'],
      abbreviated: ['до н. э.', 'н. э.'],
      wide: ['до нашей эры', 'нашей эры']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
      wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
    };
    var monthValues = {
      narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
      abbreviated: ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
      wide: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
    };
    var formattingMonthValues = {
      narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
      abbreviated: ['янв.', 'фев.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
      wide: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
    };
    var dayValues = {
      narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],
      short: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
      abbreviated: ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб'],
      wide: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полн.',
        noon: 'полд.',
        morning: 'утро',
        afternoon: 'день',
        evening: 'веч.',
        night: 'ночь'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полн.',
        noon: 'полд.',
        morning: 'утро',
        afternoon: 'день',
        evening: 'веч.',
        night: 'ночь'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полночь',
        noon: 'полдень',
        morning: 'утро',
        afternoon: 'день',
        evening: 'вечер',
        night: 'ночь'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полн.',
        noon: 'полд.',
        morning: 'утра',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночи'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полн.',
        noon: 'полд.',
        morning: 'утра',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночи'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'полночь',
        noon: 'полдень',
        morning: 'утра',
        afternoon: 'дня',
        evening: 'вечера',
        night: 'ночи'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var suffix;

      if (unit === 'date') {
        suffix = '-е';
      } else if (unit === 'week' || unit === 'minute' || unit === 'second') {
        suffix = '-я';
      } else {
        suffix = '-й';
      }

      return dirtyNumber + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'any',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$R = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((до )?н\.?\s?э\.?)/i,
      abbreviated: /^((до )?н\.?\s?э\.?)/i,
      wide: /^(до нашей эры|нашей эры|наша эра)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
      wide: /^[1234](-?[ыои]?й?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[яфмаисонд]/i,
      abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\.?/i,
      wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
    };
    var parseMonthPatterns = {
      narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^я/i],
      any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
    };
    var matchDayPatterns = {
      narrow: /^[впсч]/i,
      short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
      abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
      wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
    };
    var parseDayPatterns = {
      narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
      abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
      wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^полн/i,
        noon: /^полд/i,
        morning: /^у/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ru = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$S);

    var _index2 = _interopRequireDefault(formatLong_1$Y);

    var _index3 = _interopRequireDefault(formatRelative_1$R);

    var _index4 = _interopRequireDefault(localize_1$R);

    var _index5 = _interopRequireDefault(match_1$R);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Russian locale.
     * @language Russian
     * @iso-639-2 rus
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'ru',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$T = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    // NOTE: should prolly be improved
    // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
    function declensionGroup(scheme, count) {
      if (count === 1) {
        return scheme.one;
      }

      if (count >= 2 && count <= 4) {
        return scheme.twoFour;
      } // if count === null || count === 0 || count >= 5


      return scheme.other;
    }

    function declension(scheme, count, time) {
      var group = declensionGroup(scheme, count);
      var finalText = group[time] || group;
      return finalText.replace('{{count}}', count);
    }

    function extractPreposition(token) {
      var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {
        return !!token.match(new RegExp('^' + preposition));
      });
      return result[0];
    }

    function prefixPreposition(preposition) {
      var translation = '';

      if (preposition === 'almost') {
        translation = 'takmer';
      }

      if (preposition === 'about') {
        translation = 'približne';
      }

      return translation.length > 0 ? translation + ' ' : '';
    }

    function suffixPreposition(preposition) {
      var translation = '';

      if (preposition === 'lessThan') {
        translation = 'menej než';
      }

      if (preposition === 'over') {
        translation = 'viac než';
      }

      return translation.length > 0 ? translation + ' ' : '';
    }

    function lowercaseFirstLetter(string) {
      return string.charAt(0).toLowerCase() + string.slice(1);
    }

    var formatDistanceLocale = {
      xSeconds: {
        one: {
          regular: 'sekunda',
          past: 'sekundou',
          future: 'sekundu'
        },
        twoFour: {
          regular: '{{count}} sekundy',
          past: '{{count}} sekundami',
          future: '{{count}} sekundy'
        },
        other: {
          regular: '{{count}} sekúnd',
          past: '{{count}} sekundami',
          future: '{{count}} sekúnd'
        }
      },
      halfAMinute: {
        other: {
          regular: 'pol minúty',
          past: 'pol minútou',
          future: 'pol minúty'
        }
      },
      xMinutes: {
        one: {
          regular: 'minúta',
          past: 'minútou',
          future: 'minútu'
        },
        twoFour: {
          regular: '{{count}} minúty',
          past: '{{count}} minútami',
          future: '{{count}} minúty'
        },
        other: {
          regular: '{{count}} minút',
          past: '{{count}} minútami',
          future: '{{count}} minút'
        }
      },
      xHours: {
        one: {
          regular: 'hodina',
          past: 'hodinou',
          future: 'hodinu'
        },
        twoFour: {
          regular: '{{count}} hodiny',
          past: '{{count}} hodinami',
          future: '{{count}} hodiny'
        },
        other: {
          regular: '{{count}} hodín',
          past: '{{count}} hodinami',
          future: '{{count}} hodín'
        }
      },
      xDays: {
        one: {
          regular: 'deň',
          past: 'dňom',
          future: 'deň'
        },
        twoFour: {
          regular: '{{count}} dni',
          past: '{{count}} dňami',
          future: '{{count}} dni'
        },
        other: {
          regular: '{{count}} dní',
          past: '{{count}} dňami',
          future: '{{count}} dní'
        }
      },
      xWeeks: {
        one: {
          regular: 'mesiac',
          // TODO
          past: 'mesiacom',
          // TODO
          future: 'mesiac' // TODO

        },
        twoFour: {
          regular: '{{count}} mesiace',
          // TODO
          past: '{{count}} mesiacmi',
          // TODO
          future: '{{count}} mesiace' // TODO

        },
        other: {
          regular: '{{count}} mesiacov',
          // TODO
          past: '{{count}} mesiacmi',
          // TODO
          future: '{{count}} mesiacov' // TODO

        }
      },
      xMonths: {
        one: {
          regular: 'mesiac',
          past: 'mesiacom',
          future: 'mesiac'
        },
        twoFour: {
          regular: '{{count}} mesiace',
          past: '{{count}} mesiacmi',
          future: '{{count}} mesiace'
        },
        other: {
          regular: '{{count}} mesiacov',
          past: '{{count}} mesiacmi',
          future: '{{count}} mesiacov'
        }
      },
      xYears: {
        one: {
          regular: 'rok',
          past: 'rokom',
          future: 'rok'
        },
        twoFour: {
          regular: '{{count}} roky',
          past: '{{count}} rokmi',
          future: '{{count}} roky'
        },
        other: {
          regular: '{{count}} rokov',
          past: '{{count}} rokmi',
          future: '{{count}} rokov'
        }
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var preposition = extractPreposition(token) || '';
      var key = lowercaseFirstLetter(token.substring(preposition.length));
      var scheme = formatDistanceLocale[key];

      if (!options.addSuffix) {
        return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'regular');
      }

      if (options.comparison > 0) {
        return prefixPreposition(preposition) + 'o ' + suffixPreposition(preposition) + declension(scheme, count, 'future');
      } else {
        return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension(scheme, count, 'past');
      }
    }

    module.exports = exports.default;
    });

    var formatLong_1$Z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1986
    var dateFormats = {
      full: 'EEEE d. MMMM y',
      long: 'd. MMMM y',
      medium: 'd. M. y',
      short: 'd. M. y' // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149

    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm' // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994

    };
    var dateTimeFormats = {
      full: '{{date}}, {{time}}',
      long: '{{date}}, {{time}}',
      medium: '{{date}}, {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$S = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
    var accusativeWeekdays = ['nedeľu', 'pondelok', 'utorok', 'stredu', 'štvrtok', 'piatok', 'sobotu'];

    function lastWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        /* Sun */

        case 3:
        /* Wed */

        case 6
        /* Sat */
        :
          return "'minulú " + weekday + " o' p";

        default:
          return "'minulý' eeee 'o' p";
      }
    }

    function thisWeek(day) {
      var weekday = accusativeWeekdays[day];

      if (day === 4
      /* Thu */
      ) {
          return "'vo' eeee 'o' p";
        } else {
        return "'v " + weekday + " o' p";
      }
    }

    function nextWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        /* Sun */

        case 4:
        /* Wed */

        case 6
        /* Sat */
        :
          return "'budúcu' " + weekday + " 'o' p";

        default:
          return "'budúci' eeee 'o' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'včera o' p",
      today: "'dnes o' p",
      tomorrow: "'zajtra o' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$S = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // https://www.unicode.org/cldr/charts/32/summary/sk.html#1772
    var eraValues = {
      narrow: ['pred Kr.', 'po Kr.'],
      abbreviated: ['pred Kr.', 'po Kr.'],
      wide: ['pred Kristom', 'po Kristovi'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1780

    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1. štvrťrok', '2. štvrťrok', '3. štvrťrok', '4. štvrťrok'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1804

    };
    var monthValues = {
      narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
      wide: ['január', 'február', 'marec', 'apríl', 'máj', 'jún', 'júl', 'august', 'september', 'október', 'november', 'december']
    };
    var formattingMonthValues = {
      narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
      wide: ['januára', 'februára', 'marca', 'apríla', 'mája', 'júna', 'júla', 'augusta', 'septembra', 'októbra', 'novembra', 'decembra'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1876

    };
    var dayValues = {
      narrow: ['n', 'p', 'u', 's', 'š', 'p', 's'],
      short: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
      abbreviated: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
      wide: ['nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1932

    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'poln.',
        noon: 'pol.',
        morning: 'ráno',
        afternoon: 'pop.',
        evening: 'več.',
        night: 'noc'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'poln.',
        noon: 'pol.',
        morning: 'ráno',
        afternoon: 'popol.',
        evening: 'večer',
        night: 'noc'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'polnoc',
        noon: 'poludnie',
        morning: 'ráno',
        afternoon: 'popoludnie',
        evening: 'večer',
        night: 'noc'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'o poln.',
        noon: 'nap.',
        morning: 'ráno',
        afternoon: 'pop.',
        evening: 'več.',
        night: 'v n.'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'o poln.',
        noon: 'napol.',
        morning: 'ráno',
        afternoon: 'popol.',
        evening: 'večer',
        night: 'v noci'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'o polnoci',
        noon: 'napoludnie',
        morning: 'ráno',
        afternoon: 'popoludní',
        evening: 'večer',
        night: 'v noci'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues // defaultWidth: 'wide'

      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$S = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\. [šs]tvr[ťt]rok/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
      wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[áa]j/i, /^j[úu]n/i, /^j[úu]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[npusšp]/i,
      short: /^(ne|po|ut|st|št|pi|so)/i,
      abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
      wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^š/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(št|stv)/i, /^pi/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
      abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
      any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /poln/i,
        noon: /^(nap|(na)?pol(\.|u))/i,
        morning: /^r[áa]no/i,
        afternoon: /^pop/i,
        evening: /^ve[čc]/i,
        night: /^(noc|v n\.)/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var sk = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$T);

    var _index2 = _interopRequireDefault(formatLong_1$Z);

    var _index3 = _interopRequireDefault(formatRelative_1$S);

    var _index4 = _interopRequireDefault(localize_1$S);

    var _index5 = _interopRequireDefault(match_1$S);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Slovak locale.
     * @language Slovak
     * @iso-639-2 slk
     * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}
     */
    var locale = {
      code: 'sk',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$U = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var distanceInWordsLocale = {
      lessThanXSeconds: {
        one: 'manj kot {{count}} sekunda',
        two: 'manj kot {{count}} sekundi',
        few: 'manj kot {{count}} sekunde',
        other: 'manj kot {{count}} sekund'
      },
      xSeconds: {
        one: '{{count}} sekunda',
        two: '{{count}} sekundi',
        few: '{{count}} sekunde',
        other: '{{count}} sekund'
      },
      halfAMinute: 'pol minute',
      lessThanXMinutes: {
        one: 'manj kot {{count}} minuta',
        two: 'manj kot {{count}} minuti',
        few: 'manj kot {{count}} minute',
        other: 'manj kot {{count}} minut'
      },
      xMinutes: {
        one: '{{count}} minuta',
        two: '{{count}} minuti',
        few: '{{count}} minute',
        other: '{{count}} minut'
      },
      aboutXHours: {
        one: 'približno {{count}} ura',
        two: 'približno {{count}} uri',
        few: 'približno {{count}} ure',
        other: 'približno {{count}} ur'
      },
      xHours: {
        one: '{{count}} ura',
        two: '{{count}} uri',
        few: '{{count}} ure',
        other: '{{count}} ur'
      },
      xDays: {
        one: '{{count}} dan',
        two: '{{count}} dni',
        few: '{{count}} dni',
        other: '{{count}} dni'
      },
      aboutXWeeks: {
        one: 'približno {{count}} teden',
        two: 'približno {{count}} tedna',
        few: 'približno {{count}} tedne',
        other: 'približno {{count}} tednov'
      },
      xWeeks: {
        one: '{{count}} teden',
        two: '{{count}} tedna',
        few: '{{count}} tedne',
        other: '{{count}} tednov'
      },
      aboutXMonths: {
        one: 'približno {{count}} mesec',
        two: 'približno {{count}} meseca',
        few: 'približno {{count}} mesece',
        other: 'približno {{count}} mesecev'
      },
      xMonths: {
        one: '{{count}} mesec',
        two: '{{count}} meseca',
        few: '{{count}} meseci',
        other: '{{count}} mesecev'
      },
      aboutXYears: {
        one: 'približno {{count}} leto',
        two: 'približno {{count}} leti',
        few: 'približno {{count}} leta',
        other: 'približno {{count}} let'
      },
      xYears: {
        one: '{{count}} leto',
        two: '{{count}} leti',
        few: '{{count}} leta',
        other: '{{count}} let'
      },
      overXYears: {
        one: 'več kot {{count}} leto',
        two: 'več kot {{count}} leti',
        few: 'več kot {{count}} leta',
        other: 'več kot {{count}} let'
      },
      almostXYears: {
        one: 'skoraj {{count}} leto',
        two: 'skoraj {{count}} leti',
        few: 'skoraj {{count}} leta',
        other: 'skoraj {{count}} let'
      }
    };
    var distanceInWordsLocalePast = {
      lessThanXSeconds: {
        one: 'manj kot {{count}} sekundo',
        two: 'manj kot {{count}} sekundama',
        few: 'manj kot {{count}} sekundami',
        other: 'manj kot {{count}} sekundami'
      },
      xSeconds: {
        one: '{{count}} sekundo',
        two: '{{count}} sekundama',
        few: '{{count}} sekundami',
        other: '{{count}} sekundami'
      },
      halfAMinute: 'pol minute',
      lessThanXMinutes: {
        one: 'manj kot {{count}} minuto',
        two: 'manj kot {{count}} minutama',
        few: 'manj kot {{count}} minutami',
        other: 'manj kot {{count}} minutami'
      },
      xMinutes: {
        one: '{{count}} minuto',
        two: '{{count}} minutama',
        few: '{{count}} minutami',
        other: '{{count}} minutami'
      },
      aboutXHours: {
        one: 'približno {{count}} uro',
        two: 'približno {{count}} urama',
        few: 'približno {{count}} urami',
        other: 'približno {{count}} urami'
      },
      xHours: {
        one: '{{count}} uro',
        two: '{{count}} urama',
        few: '{{count}} urami',
        other: '{{count}} urami'
      },
      xDays: {
        one: '{{count}} dnem',
        two: '{{count}} dnevoma',
        few: '{{count}} dnevi',
        other: '{{count}} dnevi'
      },
      aboutXMonths: {
        one: 'približno {{count}} mesecem',
        two: 'približno {{count}} mesecema',
        few: 'približno {{count}} meseci',
        other: 'približno {{count}} meseci'
      },
      xMonths: {
        one: '{{count}} mesecem',
        two: '{{count}} mesecema',
        few: '{{count}} meseci',
        other: '{{count}} meseci'
      },
      aboutXYears: {
        one: 'približno {{count}} letom',
        two: 'približno {{count}} letoma',
        few: 'približno {{count}} leti',
        other: 'približno {{count}} leti'
      },
      xYears: {
        one: '{{count}} letom',
        two: '{{count}} letoma',
        few: '{{count}} leti',
        other: '{{count}} leti'
      },
      overXYears: {
        one: 'več kot {{count}} letom',
        two: 'več kot {{count}} letoma',
        few: 'več kot {{count}} leti',
        other: 'več kot {{count}} leti'
      },
      almostXYears: {
        one: 'skoraj {{count}} letom',
        two: 'skoraj {{count}} letoma',
        few: 'skoraj {{count}} leti',
        other: 'skoraj {{count}} leti'
      }
    };
    var distanceInWordsLocaleFuture = {
      lessThanXSeconds: {
        one: 'manj kot {{count}} sekundo',
        two: 'manj kot {{count}} sekundi',
        few: 'manj kot {{count}} sekunde',
        other: 'manj kot {{count}} sekund'
      },
      xSeconds: {
        one: '{{count}} sekundo',
        two: '{{count}} sekundi',
        few: '{{count}} sekunde',
        other: '{{count}} sekund'
      },
      halfAMinute: 'pol minute',
      lessThanXMinutes: {
        one: 'manj kot {{count}} minuto',
        two: 'manj kot {{count}} minuti',
        few: 'manj kot {{count}} minute',
        other: 'manj kot {{count}} minut'
      },
      xMinutes: {
        one: '{{count}} minuto',
        two: '{{count}} minuti',
        few: '{{count}} minute',
        other: '{{count}} minut'
      },
      aboutXHours: {
        one: 'približno {{count}} uro',
        two: 'približno {{count}} uri',
        few: 'približno {{count}} ure',
        other: 'približno {{count}} ur'
      },
      xHours: {
        one: '{{count}} uro',
        two: '{{count}} uri',
        few: '{{count}} ure',
        other: '{{count}} ur'
      },
      xDays: {
        one: '{{count}} dan',
        two: '{{count}} dni',
        few: '{{count}} dni',
        other: '{{count}} dni'
      },
      aboutXMonths: {
        one: 'približno {{count}} mesec',
        two: 'približno {{count}} meseca',
        few: 'približno {{count}} mesece',
        other: 'približno {{count}} mesecev'
      },
      xMonths: {
        one: '{{count}} mesec',
        two: '{{count}} meseca',
        few: '{{count}} mesece',
        other: '{{count}} mesecev'
      },
      aboutXYears: {
        one: 'približno {{count}} leto',
        two: 'približno {{count}} leti',
        few: 'približno {{count}} leta',
        other: 'približno {{count}} let'
      },
      xYears: {
        one: '{{count}} leto',
        two: '{{count}} leti',
        few: '{{count}} leta',
        other: '{{count}} let'
      },
      overXYears: {
        one: 'več kot {{count}} leto',
        two: 'več kot {{count}} leti',
        few: 'več kot {{count}} leta',
        other: 'več kot {{count}} let'
      },
      almostXYears: {
        one: 'skoraj {{count}} leto',
        two: 'skoraj {{count}} leti',
        few: 'skoraj {{count}} leta',
        other: 'skoraj {{count}} let'
      }
    };

    function getFormFromCount(count) {
      switch (count % 100) {
        case 1:
          return 'one';

        case 2:
          return 'two';

        case 3:
        case 4:
          return 'few';

        default:
          return 'other';
      }
    }

    function formatDistance(token, count, options) {
      options = options || {};
      var localeObject = distanceInWordsLocale;
      var result = '';

      if (options.addSuffix) {
        if (options.comparison > 0) {
          localeObject = distanceInWordsLocaleFuture;
          result += 'čez ';
        } else {
          localeObject = distanceInWordsLocalePast;
          result += 'pred ';
        }
      }

      if (typeof localeObject[token] === 'string') {
        result += localeObject[token];
      } else {
        var form = getFormFromCount(count);
        result += localeObject[token][form].replace('{{count}}', count);
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$_ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, dd. MMMM y',
      long: 'dd. MMMM y',
      medium: 'd. MMM y',
      short: 'd. MM. yy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$T = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'prejšnjo nedeljo ob' p";

          case 3:
            return "'prejšnjo sredo ob' p";

          case 6:
            return "'prejšnjo soboto ob' p";

          default:
            return "'prejšnji' EEEE 'ob' p";
        }
      },
      yesterday: "'včeraj ob' p",
      today: "'danes ob' p",
      tomorrow: "'jutri ob' p",
      nextWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'naslednjo nedeljo ob' p";

          case 3:
            return "'naslednjo sredo ob' p";

          case 6:
            return "'naslednjo soboto ob' p";

          default:
            return "'naslednji' EEEE 'ob' p";
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$T = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number).concat('.');
    }

    var eraValues = {
      narrow: ['pr. n. št.', 'po n. št.'],
      abbreviated: ['pr. n. št.', 'po n. št.'],
      wide: ['pred našim štetjem', 'po našem štetju']
    };
    var monthValues = {
      narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
      wide: ['januar', 'februar', 'marec', 'april', 'maj', 'junij', 'julij', 'avgust', 'september', 'oktober', 'november', 'december']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1. čet.', '2. čet.', '3. čet.', '4. čet.'],
      wide: ['1. četrtletje', '2. četrtletje', '3. četrtletje', '4. četrtletje']
    };
    var dayValues = {
      narrow: ['n', 'p', 't', 's', 'č', 'p', 's'],
      short: ['ned.', 'pon.', 'tor.', 'sre.', 'čet.', 'pet.', 'sob.'],
      abbreviated: ['ned.', 'pon.', 'tor.', 'sre.', 'čet.', 'pet.', 'sob.'],
      wide: ['nedelja', 'ponedeljek', 'torek', 'sreda', 'četrtek', 'petek', 'sobota']
    };
    var dayPeriodValuesStandalone = {
      narrow: {
        am: 'd',
        pm: 'p',
        midnight: '24.00',
        noon: '12.00',
        morning: 'j',
        afternoon: 'p',
        evening: 'v',
        night: 'n'
      },
      abbreviated: {
        am: 'dop.',
        pm: 'pop.',
        midnight: 'poln.',
        noon: 'pold.',
        morning: 'jut.',
        afternoon: 'pop.',
        evening: 'več.',
        night: 'noč'
      },
      wide: {
        am: 'dop.',
        pm: 'pop.',
        midnight: 'polnoč',
        noon: 'poldne',
        morning: 'jutro',
        afternoon: 'popoldne',
        evening: 'večer',
        night: 'noč'
      }
    };
    var dayPeriodValuesFormatting = {
      narrow: {
        am: 'd',
        pm: 'p',
        midnight: '24.00',
        noon: '12.00',
        morning: 'zj',
        afternoon: 'p',
        evening: 'zv',
        night: 'po'
      },
      abbreviated: {
        am: 'dop.',
        pm: 'pop.',
        midnight: 'opoln.',
        noon: 'opold.',
        morning: 'zjut.',
        afternoon: 'pop.',
        evening: 'zveč.',
        night: 'ponoči'
      },
      wide: {
        am: 'dop.',
        pm: 'pop.',
        midnight: 'opolnoči',
        noon: 'opoldne',
        morning: 'zjutraj',
        afternoon: 'popoldan',
        evening: 'zvečer',
        night: 'ponoči'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValuesStandalone,
        defaultWidth: 'wide',
        formattingValues: dayPeriodValuesFormatting,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$T = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      abbreviated: /^(pr\. n\. št\.|po n\. št\.)/i,
      wide: /^(pred Kristusom|pred na[sš]im [sš]tetjem|po Kristusu|po na[sš]em [sš]tetju|na[sš]ega [sš]tetja)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|na[sš]em)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?[čc]et\.?/i,
      wide: /^[1234]\. [čc]etrtletje/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
      wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      abbreviated: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i],
      wide: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[nptsčc]/i,
      short: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
      abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
      wide: /^(nedelja|ponedeljek|torek|sreda|[cč]etrtek|petek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cč]/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cč]/i, /^pe/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
      any: /^(dop\.|pop\.|o?poln(\.|o[cč]i?)|o?pold(\.|ne)|z?ve[cč](\.|er)|(po)?no[cč]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^d/i,
        pm: /^p/i,
        midnight: /^24/i,
        noon: /^12/i,
        morning: /^(z?j)/i,
        afternoon: /^p/i,
        evening: /^(z?v)/i,
        night: /^(n|po)/i
      },
      any: {
        am: /^dop\./i,
        pm: /^pop\./i,
        midnight: /^o?poln/i,
        noon: /^o?pold/i,
        morning: /j/i,
        afternoon: /^pop\./i,
        evening: /^z?ve/i,
        night: /(po)?no/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'wide'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var sl = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$U);

    var _index2 = _interopRequireDefault(formatLong_1$_);

    var _index3 = _interopRequireDefault(formatRelative_1$T);

    var _index4 = _interopRequireDefault(localize_1$T);

    var _index5 = _interopRequireDefault(match_1$T);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Slovenian locale.
     * @language Slovenian
     * @iso-639-2 slv
     * @author Adam Stradovnik [@Neoglyph]{@link https://github.com/Neoglyph}
     * @author Mato Žgajner [@mzgajner]{@link https://github.com/mzgajner}
     */
    var locale = {
      code: 'sl',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$V = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: 'мање од 1 секунде',
          withPrepositionAgo: 'мање од 1 секунде',
          withPrepositionIn: 'мање од 1 секунду'
        },
        dual: 'мање од {{count}} секунде',
        other: 'мање од {{count}} секунди'
      },
      xSeconds: {
        one: {
          standalone: '1 секунда',
          withPrepositionAgo: '1 секунде',
          withPrepositionIn: '1 секунду'
        },
        dual: '{{count}} секунде',
        other: '{{count}} секунди'
      },
      halfAMinute: 'пола минуте',
      lessThanXMinutes: {
        one: {
          standalone: 'мање од 1 минуте',
          withPrepositionAgo: 'мање од 1 минуте',
          withPrepositionIn: 'мање од 1 минуту'
        },
        dual: 'мање од {{count}} минуте',
        other: 'мање од {{count}} минута'
      },
      xMinutes: {
        one: {
          standalone: '1 минута',
          withPrepositionAgo: '1 минуте',
          withPrepositionIn: '1 минуту'
        },
        dual: '{{count}} минуте',
        other: '{{count}} минута'
      },
      aboutXHours: {
        one: {
          standalone: 'око 1 сат',
          withPrepositionAgo: 'око 1 сат',
          withPrepositionIn: 'око 1 сат'
        },
        dual: 'око {{count}} сата',
        other: 'око {{count}} сати'
      },
      xHours: {
        one: {
          standalone: '1 сат',
          withPrepositionAgo: '1 сат',
          withPrepositionIn: '1 сат'
        },
        dual: '{{count}} сата',
        other: '{{count}} сати'
      },
      xDays: {
        one: {
          standalone: '1 дан',
          withPrepositionAgo: '1 дан',
          withPrepositionIn: '1 дан'
        },
        dual: '{{count}} дана',
        other: '{{count}} дана'
      },
      aboutXWeeks: {
        one: {
          standalone: 'око 1 недељу',
          withPrepositionAgo: 'око 1 недељу',
          withPrepositionIn: 'око 1 недељу'
        },
        dual: 'око {{count}} недеље',
        other: 'око {{count}} недеље'
      },
      xWeeks: {
        one: {
          standalone: '1 недељу',
          withPrepositionAgo: '1 недељу',
          withPrepositionIn: '1 недељу'
        },
        dual: '{{count}} недеље',
        other: '{{count}} недеље'
      },
      aboutXMonths: {
        one: {
          standalone: 'око 1 месец',
          withPrepositionAgo: 'око 1 месец',
          withPrepositionIn: 'око 1 месец'
        },
        dual: 'око {{count}} месеца',
        other: 'око {{count}} месеци'
      },
      xMonths: {
        one: {
          standalone: '1 месец',
          withPrepositionAgo: '1 месец',
          withPrepositionIn: '1 месец'
        },
        dual: '{{count}} месеца',
        other: '{{count}} месеци'
      },
      aboutXYears: {
        one: {
          standalone: 'око 1 годину',
          withPrepositionAgo: 'око 1 годину',
          withPrepositionIn: 'око 1 годину'
        },
        dual: 'око {{count}} године',
        other: 'око {{count}} година'
      },
      xYears: {
        one: {
          standalone: '1 година',
          withPrepositionAgo: '1 године',
          withPrepositionIn: '1 годину'
        },
        dual: '{{count}} године',
        other: '{{count}} година'
      },
      overXYears: {
        one: {
          standalone: 'преко 1 годину',
          withPrepositionAgo: 'преко 1 годину',
          withPrepositionIn: 'преко 1 годину'
        },
        dual: 'преко {{count}} године',
        other: 'преко {{count}} година'
      },
      almostXYears: {
        one: {
          standalone: 'готово 1 годину',
          withPrepositionAgo: 'готово 1 годину',
          withPrepositionIn: 'готово 1 годину'
        },
        dual: 'готово {{count}} године',
        other: 'готово {{count}} година'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            result = formatDistanceLocale[token].one.withPrepositionIn;
          } else {
            result = formatDistanceLocale[token].one.withPrepositionAgo;
          }
        } else {
          result = formatDistanceLocale[token].one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
      ) {
          result = formatDistanceLocale[token].dual.replace('{{count}}', count);
        } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'за ' + result;
        } else {
          return 'пре ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$$ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d. MMMM yyyy.',
      long: 'd. MMMM yyyy.',
      medium: 'd. MMM yy.',
      short: 'dd. MM. yy.'
    };
    var timeFormats = {
      full: 'HH:mm:ss (zzzz)',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'у' {{time}}",
      long: "{{date}} 'у' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$U = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'прошле недеље у' p";

          case 3:
            return "'прошле среде у' p";

          case 6:
            return "'прошле суботе у' p";

          default:
            return "'прошли' EEEE 'у' p";
        }
      },
      yesterday: "'јуче у' p",
      today: "'данас у' p",
      tomorrow: "'сутра у' p",
      nextWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'следеће недеље у' p";

          case 3:
            return "'следећу среду у' p";

          case 6:
            return "'следећу суботу у' p";

          default:
            return "'следећи' EEEE 'у' p";
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$U = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number).concat('.');
    }

    var eraValues = {
      narrow: ['пр.н.е.', 'АД'],
      abbreviated: ['пр. Хр.', 'по. Хр.'],
      wide: ['Пре Христа', 'После Христа']
    };
    var monthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['јан', 'феб', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'сеп', 'окт', 'нов', 'дец'],
      wide: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар']
    };
    var formattingMonthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['јан', 'феб', 'мар', 'апр', 'мај', 'јун', 'јул', 'авг', 'сеп', 'окт', 'нов', 'дец'],
      wide: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар']
    };
    var quarterValues = {
      narrow: ['1.', '2.', '3.', '4.'],
      abbreviated: ['1. кв.', '2. кв.', '3. кв.', '4. кв.'],
      wide: ['1. квартал', '2. квартал', '3. квартал', '4. квартал']
    };
    var dayValues = {
      narrow: ['Н', 'П', 'У', 'С', 'Ч', 'П', 'С'],
      short: ['нед', 'пон', 'уто', 'сре', 'чет', 'пет', 'суб'],
      abbreviated: ['нед', 'пон', 'уто', 'сре', 'чет', 'пет', 'суб'],
      wide: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота']
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'АМ',
        pm: 'ПМ',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'поподне',
        evening: 'увече',
        night: 'ноћу'
      },
      abbreviated: {
        am: 'АМ',
        pm: 'ПМ',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'поподне',
        evening: 'увече',
        night: 'ноћу'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'после подне',
        evening: 'увече',
        night: 'ноћу'
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'поподне',
        evening: 'увече',
        night: 'ноћу'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'поподне',
        evening: 'увече',
        night: 'ноћу'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'поноћ',
        noon: 'подне',
        morning: 'ујутру',
        afternoon: 'после подне',
        evening: 'увече',
        night: 'ноћу'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$U = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(пр\.н\.е\.|АД)/i,
      abbreviated: /^(пр\.\s?Хр\.|по\.\s?Хр\.)/i,
      wide: /^(Пре Христа|пре нове ере|После Христа|нова ера)/i
    };
    var parseEraPatterns = {
      any: [/^пр/i, /^(по|нова)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?кв\.?/i,
      wide: /^[1234]\. квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(јан|феб|мар|апр|мај|јун|јул|авг|сеп|окт|нов|дец)/i,
      wide: /^((јануар|јануара)|(фебруар|фебруара)|(март|марта)|(април|априла)|(мја|маја)|(јун|јуна)|(јул|јула)|(август|августа)|(септембар|септембра)|(октобар|октобра)|(новембар|новембра)|(децембар|децембра))/i
    };
    var parseMonthPatterns = {
      narrow: [/(10|11|12|[123456789])/i],
      any: [/^ја/i, /^ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^авг/i, /^с/i, /^о/i, /^н/i, /^д/i]
    };
    var matchDayPatterns = {
      narrow: /^[пусчн]/i,
      short: /^(нед|пон|уто|сре|чет|пет|суб)/i,
      abbreviated: /^(нед|пон|уто|сре|чет|пет|суб)/i,
      wide: /^(недеља|понедељак|уторак|среда|четвртак|петак|субота)/i
    };
    var parseDayPatterns = {
      narrow: [/^п/i, /^у/i, /^с/i, /^ч/i, /^н/i],
      any: [/^нед/i, /^пон/i, /^уто/i, /^сре/i, /^чет/i, /^пет/i, /^суб/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(ам|пм|поноћ|(по)?подне|увече|ноћу|после подне|ујутру)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^поно/i,
        noon: /^под/i,
        morning: /ујутру/i,
        afternoon: /(после\s|по)+подне/i,
        evening: /(увече)/i,
        night: /(ноћу)/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var sr = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$V);

    var _index2 = _interopRequireDefault(formatLong_1$$);

    var _index3 = _interopRequireDefault(formatRelative_1$U);

    var _index4 = _interopRequireDefault(localize_1$U);

    var _index5 = _interopRequireDefault(match_1$U);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Serbian cyrillic locale.
     * @language Serbian
     * @iso-639-2 srp
     * @author Igor Radivojević [@rogyvoje]{@link https://github.com/rogyvoje}
     */
    var locale = {
      code: 'sr',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$W = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: 'manje od 1 sekunde',
          withPrepositionAgo: 'manje od 1 sekunde',
          withPrepositionIn: 'manje od 1 sekundu'
        },
        dual: 'manje od {{count}} sekunde',
        other: 'manje od {{count}} sekundi'
      },
      xSeconds: {
        one: {
          standalone: '1 sekunda',
          withPrepositionAgo: '1 sekunde',
          withPrepositionIn: '1 sekundu'
        },
        dual: '{{count}} sekunde',
        other: '{{count}} sekundi'
      },
      halfAMinute: 'pola minute',
      lessThanXMinutes: {
        one: {
          standalone: 'manje od 1 minute',
          withPrepositionAgo: 'manje od 1 minute',
          withPrepositionIn: 'manje od 1 minutu'
        },
        dual: 'manje od {{count}} minute',
        other: 'manje od {{count}} minuta'
      },
      xMinutes: {
        one: {
          standalone: '1 minuta',
          withPrepositionAgo: '1 minute',
          withPrepositionIn: '1 minutu'
        },
        dual: '{{count}} minute',
        other: '{{count}} minuta'
      },
      aboutXHours: {
        one: {
          standalone: 'oko 1 sat',
          withPrepositionAgo: 'oko 1 sat',
          withPrepositionIn: 'oko 1 sat'
        },
        dual: 'oko {{count}} sata',
        other: 'oko {{count}} sati'
      },
      xHours: {
        one: {
          standalone: '1 sat',
          withPrepositionAgo: '1 sat',
          withPrepositionIn: '1 sat'
        },
        dual: '{{count}} sata',
        other: '{{count}} sati'
      },
      xDays: {
        one: {
          standalone: '1 dan',
          withPrepositionAgo: '1 dan',
          withPrepositionIn: '1 dan'
        },
        dual: '{{count}} dana',
        other: '{{count}} dana'
      },
      aboutXWeeks: {
        one: {
          standalone: 'oko 1 nedelju',
          withPrepositionAgo: 'oko 1 nedelju',
          withPrepositionIn: 'oko 1 nedelju'
        },
        dual: 'oko {{count}} nedelje',
        other: 'oko {{count}} nedelje'
      },
      xWeeks: {
        one: {
          standalone: '1 nedelju',
          withPrepositionAgo: '1 nedelju',
          withPrepositionIn: '1 nedelju'
        },
        dual: '{{count}} nedelje',
        other: '{{count}} nedelje'
      },
      aboutXMonths: {
        one: {
          standalone: 'oko 1 mesec',
          withPrepositionAgo: 'oko 1 mesec',
          withPrepositionIn: 'oko 1 mesec'
        },
        dual: 'oko {{count}} meseca',
        other: 'oko {{count}} meseci'
      },
      xMonths: {
        one: {
          standalone: '1 mesec',
          withPrepositionAgo: '1 mesec',
          withPrepositionIn: '1 mesec'
        },
        dual: '{{count}} meseca',
        other: '{{count}} meseci'
      },
      aboutXYears: {
        one: {
          standalone: 'oko 1 godinu',
          withPrepositionAgo: 'oko 1 godinu',
          withPrepositionIn: 'oko 1 godinu'
        },
        dual: 'oko {{count}} godine',
        other: 'oko {{count}} godina'
      },
      xYears: {
        one: {
          standalone: '1 godina',
          withPrepositionAgo: '1 godine',
          withPrepositionIn: '1 godinu'
        },
        dual: '{{count}} godine',
        other: '{{count}} godina'
      },
      overXYears: {
        one: {
          standalone: 'preko 1 godinu',
          withPrepositionAgo: 'preko 1 godinu',
          withPrepositionIn: 'preko 1 godinu'
        },
        dual: 'preko {{count}} godine',
        other: 'preko {{count}} godina'
      },
      almostXYears: {
        one: {
          standalone: 'gotovo 1 godinu',
          withPrepositionAgo: 'gotovo 1 godinu',
          withPrepositionIn: 'gotovo 1 godinu'
        },
        dual: 'gotovo {{count}} godine',
        other: 'gotovo {{count}} godina'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            result = formatDistanceLocale[token].one.withPrepositionIn;
          } else {
            result = formatDistanceLocale[token].one.withPrepositionAgo;
          }
        } else {
          result = formatDistanceLocale[token].one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
      ) {
          result = formatDistanceLocale[token].dual.replace('{{count}}', count);
        } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'za ' + result;
        } else {
          return 'pre ' + result;
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$10 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, d. MMMM yyyy.',
      long: 'd. MMMM yyyy.',
      medium: 'd. MMM yy.',
      short: 'dd. MM. yy.'
    };
    var timeFormats = {
      full: 'HH:mm:ss (zzzz)',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$V = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'prošle nedelje u' p";

          case 3:
            return "'prošle srede u' p";

          case 6:
            return "'prošle subote u' p";

          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      yesterday: "'juče u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: function (date) {
        var day = date.getUTCDay();

        switch (day) {
          case 0:
            return "'sledeće nedelje u' p";

          case 3:
            return "'sledeću sredu u' p";

          case 6:
            return "'sledeću subotu u' p";

          default:
            return "'sledeći' EEEE 'u' p";
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$V = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return String(number).concat('.');
    }

    var eraValues = {
      narrow: ['pr.n.e.', 'AD'],
      abbreviated: ['pr. Hr.', 'po. Hr.'],
      wide: ['Pre Hrista', 'Posle Hrista']
    };
    var monthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
      wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
    };
    var formattingMonthValues = {
      narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
      abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
      wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
    };
    var quarterValues = {
      narrow: ['1.', '2.', '3.', '4.'],
      abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
      wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
    };
    var dayValues = {
      narrow: ['N', 'P', 'U', 'S', 'Č', 'P', 'S'],
      short: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
      abbreviated: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub'],
      wide: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota']
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'popodne',
        evening: 'uveče',
        night: 'noću'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'popodne',
        evening: 'uveče',
        night: 'noću'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'posle podne',
        evening: 'uveče',
        night: 'noću'
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'popodne',
        evening: 'uveče',
        night: 'noću'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'popodne',
        evening: 'uveče',
        night: 'noću'
      },
      wide: {
        am: 'AM',
        pm: 'PM',
        midnight: 'ponoć',
        noon: 'podne',
        morning: 'ujutru',
        afternoon: 'posle podne',
        evening: 'uveče',
        night: 'noću'
      }
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$V = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchFn_1);

    var _index2 = _interopRequireDefault(buildMatchPatternFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
      wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
      wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
    };
    var parseMonthPatterns = {
      narrow: [/(10|11|12|[123456789])/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[npusčc]/i,
      short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      wide: /^(nedelja|ponedeljak|utorak|sreda|(četvrtak|cetvrtak)|petak|subota)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|posle podne|ujutru)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(posle\s|po)+podne/i,
        evening: /(uvece|uveče)/i,
        night: /(nocu|noću)/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var srLatn = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$W);

    var _index2 = _interopRequireDefault(formatLong_1$10);

    var _index3 = _interopRequireDefault(formatRelative_1$V);

    var _index4 = _interopRequireDefault(localize_1$V);

    var _index5 = _interopRequireDefault(match_1$V);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Serbian latin locale.
     * @language Serbian
     * @iso-639-2 srp
     * @author Igor Radivojević [@rogyvoje]{@link https://github.com/rogyvoje}
     */
    var locale = {
      code: 'sr-Latn',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$X = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        singular: 'mindre än en sekund',
        plural: 'mindre än {{count}} sekunder'
      },
      xSeconds: {
        singular: 'en sekund',
        plural: '{{count}} sekunder'
      },
      halfAMinute: 'en halv minut',
      lessThanXMinutes: {
        singular: 'mindre än en minut',
        plural: 'mindre än {{count}} minuter'
      },
      xMinutes: {
        singular: 'en minut',
        plural: '{{count}} minuter'
      },
      aboutXHours: {
        singular: 'ungefär en timme',
        plural: 'ungefär {{count}} timmar'
      },
      xHours: {
        singular: 'en timme',
        plural: '{{count}} timmar'
      },
      xDays: {
        singular: 'en dag',
        plural: '{{count}} dagar'
      },
      aboutXWeeks: {
        singular: 'ungefär en vecka',
        plural: 'ungefär {{count}} vecka'
      },
      xWeeks: {
        singular: 'en vecka',
        plural: '{{count}} vecka'
      },
      aboutXMonths: {
        singular: 'ungefär en månad',
        plural: 'ungefär {{count}} månader'
      },
      xMonths: {
        singular: 'en månad',
        plural: '{{count}} månader'
      },
      aboutXYears: {
        singular: 'ungefär ett år',
        plural: 'ungefär {{count}} år'
      },
      xYears: {
        singular: 'ett år',
        plural: '{{count}} år'
      },
      overXYears: {
        singular: 'över ett år',
        plural: 'över {{count}} år'
      },
      almostXYears: {
        singular: 'nästan ett år',
        plural: 'nästan {{count}} år'
      }
    };
    var wordMapping = ['noll', 'en', 'två', 'tre', 'fyra', 'fem', 'sex', 'sju', 'åtta', 'nio', 'tio', 'elva', 'tolv'];

    function formatDistance(token, count, options) {
      options = options || {
        onlyNumeric: false
      };
      var translation = formatDistanceLocale[token];
      var result;

      if (typeof translation === 'string') {
        result = translation;
      } else if (count === 0 || count > 1) {
        if (options.onlyNumeric) {
          result = translation.plural.replace('{{count}}', count);
        } else {
          result = translation.plural.replace('{{count}}', count < 13 ? wordMapping[count] : count);
        }
      } else {
        result = translation.singular;
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'om ' + result;
        } else {
          return result + ' sedan';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$11 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE d MMMM y',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'y-MM-dd'
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$W = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'i' EEEE's kl.' p",
      yesterday: "'igår kl.' p",
      today: "'idag kl.' p",
      tomorrow: "'imorgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$W = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['f.Kr.', 'e.Kr.'],
      abbreviated: ['f.Kr.', 'e.Kr.'],
      wide: ['före Kristus', 'efter Kristus']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1:a kvartalet', '2:a kvartalet', '3:e kvartalet', '4:e kvartalet']
    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'maj', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
      wide: ['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
      short: ['sö', 'må', 'ti', 'on', 'to', 'fr', 'lö'],
      abbreviated: ['sön', 'mån', 'tis', 'ons', 'tor', 'fre', 'lör'],
      wide: ['söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag'] // https://www.unicode.org/cldr/charts/32/summary/sv.html#1888

    };
    var dayPeriodValues = {
      narrow: {
        am: 'fm',
        pm: 'em',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'morg.',
        afternoon: 'efterm.',
        evening: 'kväll',
        night: 'natt'
      },
      abbreviated: {
        am: 'f.m.',
        pm: 'e.m.',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'morgon',
        afternoon: 'efterm.',
        evening: 'kväll',
        night: 'natt'
      },
      wide: {
        am: 'förmiddag',
        pm: 'eftermiddag',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'morgon',
        afternoon: 'eftermiddag',
        evening: 'kväll',
        night: 'natt'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'fm',
        pm: 'em',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på efterm.',
        evening: 'på kvällen',
        night: 'på natten'
      },
      abbreviated: {
        am: 'fm',
        pm: 'em',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morg.',
        afternoon: 'på efterm.',
        evening: 'på kvällen',
        night: 'på natten'
      },
      wide: {
        am: 'fm',
        pm: 'em',
        midnight: 'midnatt',
        noon: 'middag',
        morning: 'på morgonen',
        afternoon: 'på eftermiddagen',
        evening: 'på kvällen',
        night: 'på natten'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
          case 2:
            return number + ':a';
        }
      }

      return number + ':e';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$W = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(:a|:e)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^[ev]/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](:a|:e)? kvartalet/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)\.?/i,
      wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(sö|må|ti|on|to|fr|lö)/i,
      abbreviated: /^(sön|mån|tis|ons|tor|fre|lör)/i,
      wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /eftermiddag/i,
        evening: /kväll/i,
        night: /natt/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var sv = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$X);

    var _index2 = _interopRequireDefault(formatLong_1$11);

    var _index3 = _interopRequireDefault(formatRelative_1$W);

    var _index4 = _interopRequireDefault(localize_1$W);

    var _index5 = _interopRequireDefault(match_1$W);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Swedish locale.
     * @language Swedish
     * @iso-639-2 swe
     * @author Johannes Ulén [@ejulen]{@link https://github.com/ejulen}
     * @author Alexander Nanberg [@alexandernanberg]{@link https://github.com/alexandernanberg}
     * @author Henrik Andersson [@limelights]{@link https://github.com/limelights}
     */
    var locale = {
      code: 'sv',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$Y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          default: 'ஒரு வினாடிக்கு குறைவாக',
          in: 'ஒரு வினாடிக்குள்',
          ago: 'ஒரு வினாடிக்கு முன்பு'
        },
        other: {
          default: '{{count}} வினாடிகளுக்கு குறைவாக',
          in: '{{count}} வினாடிகளுக்குள்',
          ago: '{{count}} வினாடிகளுக்கு முன்பு'
        }
      },
      xSeconds: {
        one: {
          default: '1 வினாடி',
          in: '1 வினாடியில்',
          ago: '1 வினாடி முன்பு'
        },
        other: {
          default: '{{count}} விநாடிகள்',
          in: '{{count}} வினாடிகளில்',
          ago: '{{count}} விநாடிகளுக்கு முன்பு'
        }
      },
      halfAMinute: {
        default: 'அரை நிமிடம்',
        in: 'அரை நிமிடத்தில்',
        ago: 'அரை நிமிடம் முன்பு'
      },
      lessThanXMinutes: {
        one: {
          default: 'ஒரு நிமிடத்திற்கும் குறைவாக',
          in: 'ஒரு நிமிடத்திற்குள்',
          ago: 'ஒரு நிமிடத்திற்கு முன்பு'
        },
        other: {
          default: '{{count}} நிமிடங்களுக்கும் குறைவாக',
          in: '{{count}} நிமிடங்களுக்குள்',
          ago: '{{count}} நிமிடங்களுக்கு முன்பு'
        }
      },
      xMinutes: {
        one: {
          default: '1 நிமிடம்',
          in: '1 நிமிடத்தில்',
          ago: '1 நிமிடம் முன்பு'
        },
        other: {
          default: '{{count}} நிமிடங்கள்',
          in: '{{count}} நிமிடங்களில்',
          ago: '{{count}} நிமிடங்களுக்கு முன்பு'
        }
      },
      aboutXHours: {
        one: {
          default: 'சுமார் 1 மணி நேரம்',
          in: 'சுமார் 1 மணி நேரத்தில்',
          ago: 'சுமார் 1 மணி நேரத்திற்கு முன்பு'
        },
        other: {
          default: 'சுமார் {{count}} மணி நேரம்',
          in: 'சுமார் {{count}} மணி நேரத்திற்கு முன்பு',
          ago: 'சுமார் {{count}} மணி நேரத்தில்'
        }
      },
      xHours: {
        one: {
          default: '1 மணி நேரம்',
          in: '1 மணி நேரத்தில்',
          ago: '1 மணி நேரத்திற்கு முன்பு'
        },
        other: {
          default: '{{count}} மணி நேரம்',
          in: '{{count}} மணி நேரத்தில்',
          ago: '{{count}} மணி நேரத்திற்கு முன்பு'
        }
      },
      xDays: {
        one: {
          default: '1 நாள்',
          in: '1 நாளில்',
          ago: '1 நாள் முன்பு'
        },
        other: {
          default: '{{count}} நாட்கள்',
          in: '{{count}} நாட்களில்',
          ago: '{{count}} நாட்களுக்கு முன்பு'
        }
      },
      aboutXWeeks: {
        one: {
          default: 'சுமார் 1 வாரம்',
          in: 'சுமார் 1 வாரத்தில்',
          ago: 'சுமார் 1 வாரம் முன்பு'
        },
        other: {
          default: 'சுமார் {{count}} வாரங்கள்',
          in: 'சுமார் {{count}} வாரங்களில்',
          ago: 'சுமார் {{count}} வாரங்களுக்கு முன்பு'
        }
      },
      xWeeks: {
        one: {
          default: '1 வாரம்',
          in: '1 வாரத்தில்',
          ago: '1 வாரம் முன்பு'
        },
        other: {
          default: '{{count}} வாரங்கள்',
          in: '{{count}} வாரங்களில்',
          ago: '{{count}} வாரங்களுக்கு முன்பு'
        }
      },
      aboutXMonths: {
        one: {
          default: 'சுமார் 1 மாதம்',
          in: 'சுமார் 1 மாதத்தில்',
          ago: 'சுமார் 1 மாதத்திற்கு முன்பு'
        },
        other: {
          default: 'சுமார் {{count}} மாதங்கள்',
          in: 'சுமார் {{count}} மாதங்களில்',
          ago: 'சுமார் {{count}} மாதங்களுக்கு முன்பு'
        }
      },
      xMonths: {
        one: {
          default: '1 மாதம்',
          in: '1 மாதத்தில்',
          ago: '1 மாதம் முன்பு'
        },
        other: {
          default: '{{count}} மாதங்கள்',
          in: '{{count}} மாதங்களில்',
          ago: '{{count}} மாதங்களுக்கு முன்பு'
        }
      },
      aboutXYears: {
        one: {
          default: 'சுமார் 1 வருடம்',
          in: 'சுமார் 1 ஆண்டில்',
          ago: 'சுமார் 1 வருடம் முன்பு'
        },
        other: {
          default: 'சுமார் {{count}} ஆண்டுகள்',
          in: 'சுமார் {{count}} ஆண்டுகளில்',
          ago: 'சுமார் {{count}} ஆண்டுகளுக்கு முன்பு'
        }
      },
      xYears: {
        one: {
          default: '1 வருடம்',
          in: '1 ஆண்டில்',
          ago: '1 வருடம் முன்பு'
        },
        other: {
          default: '{{count}} ஆண்டுகள்',
          in: '{{count}} ஆண்டுகளில்',
          ago: '{{count}} ஆண்டுகளுக்கு முன்பு'
        }
      },
      overXYears: {
        one: {
          default: '1 வருடத்திற்கு மேல்',
          in: '1 வருடத்திற்கும் மேலாக',
          ago: '1 வருடம் முன்பு'
        },
        other: {
          default: '{{count}} ஆண்டுகளுக்கும் மேலாக',
          in: '{{count}} ஆண்டுகளில்',
          ago: '{{count}} ஆண்டுகளுக்கு முன்பு'
        }
      },
      almostXYears: {
        one: {
          default: 'கிட்டத்தட்ட 1 வருடம்',
          in: 'கிட்டத்தட்ட 1 ஆண்டில்',
          ago: 'கிட்டத்தட்ட 1 வருடம் முன்பு'
        },
        other: {
          default: 'கிட்டத்தட்ட {{count}} ஆண்டுகள்',
          in: 'கிட்டத்தட்ட {{count}} ஆண்டுகளில்',
          ago: 'கிட்டத்தட்ட {{count}} ஆண்டுகளுக்கு முன்பு'
        }
      }
    };

    function getFormatDistanceLocaleWithSuffix(resultObj, options) {
      if (options.addSuffix) {
        if (options.comparison > 0) {
          return resultObj.in;
        } else {
          return resultObj.ago;
        }
      }

      return resultObj.default;
    }

    function formatDistance(token, count) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var result;

      if (formatDistanceLocale[token].default) {
        result = getFormatDistanceLocaleWithSuffix(formatDistanceLocale[token], options);
      } else if (count === 1) {
        result = getFormatDistanceLocaleWithSuffix(formatDistanceLocale[token].one, options);
      } else {
        result = getFormatDistanceLocaleWithSuffix(formatDistanceLocale[token].other, options);
      }

      return result.replace('{{count}}', count);
    }

    module.exports = exports.default;
    });

    var formatLong_1$12 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
    // CLDR #1846 - #1849
    var dateFormats = {
      full: 'EEEE, d MMMM, y',
      long: 'd MMMM, y',
      medium: 'd MMM, y',
      short: 'd/M/yy' // CLDR #1850 - #1853

    };
    var timeFormats = {
      full: 'a h:mm:ss zzzz',
      long: 'a h:mm:ss z',
      medium: 'a h:mm:ss',
      short: 'a h:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$X = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'கடந்த' eeee p 'மணிக்கு'",
      yesterday: "'நேற்று ' p 'மணிக்கு'",
      today: "'இன்று ' p 'மணிக்கு'",
      tomorrow: "'நாளை ' p 'மணிக்கு'",
      nextWeek: "eeee p 'மணிக்கு'",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$X = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
    var eraValues = {
      narrow: ['கி.மு.', 'கி.பி.'],
      abbreviated: ['கி.மு.', 'கி.பி.'],
      // CLDR #1624, #1626
      wide: ['கிறிஸ்துவுக்கு முன்', 'அன்னோ டோமினி'] // CLDR #1620, #1622

    };
    var quarterValues = {
      // CLDR #1644 - #1647
      narrow: ['1', '2', '3', '4'],
      // CLDR #1636 - #1639
      abbreviated: ['காலா.1', 'காலா.2', 'காலா.3', 'காலா.4'],
      // CLDR #1628 - #1631
      wide: ['ஒன்றாம் காலாண்டு', 'இரண்டாம் காலாண்டு', 'மூன்றாம் காலாண்டு', 'நான்காம் காலாண்டு']
    };
    var monthValues = {
      // CLDR #700 - #711
      narrow: ['ஜ', 'பி', 'மா', 'ஏ', 'மே', 'ஜூ', 'ஜூ', 'ஆ', 'செ', 'அ', 'ந', 'டி'],
      // CLDR #1676 - #1687
      abbreviated: ['ஜன.', 'பிப்.', 'மார்.', 'ஏப்.', 'மே', 'ஜூன்', 'ஜூலை', 'ஆக.', 'செப்.', 'அக்.', 'நவ.', 'டிச.'],
      // CLDR #1652 - #1663
      wide: ['ஜனவரி', // January
      'பிப்ரவரி', // February
      'மார்ச்', // March
      'ஏப்ரல்', // April
      'மே', // May
      'ஜூன்', // June
      'ஜூலை', // July
      'ஆகஸ்ட்', // August
      'செப்டம்பர்', // September
      'அக்டோபர்', // October
      'நவம்பர்', // November
      'டிசம்பர்' // December
      ]
    };
    var dayValues = {
      // CLDR #1766 - #1772
      narrow: ['ஞா', 'தி', 'செ', 'பு', 'வி', 'வெ', 'ச'],
      // CLDR #1752 - #1758
      short: ['ஞா', 'தி', 'செ', 'பு', 'வி', 'வெ', 'ச'],
      // CLDR #1738 - #1744
      abbreviated: ['ஞாயி.', 'திங்.', 'செவ்.', 'புத.', 'வியா.', 'வெள்.', 'சனி'],
      // CLDR #1724 - #1730
      wide: ['ஞாயிறு', // Sunday
      'திங்கள்', // Monday
      'செவ்வாய்', // Tuesday
      'புதன்', // Wednesday
      'வியாழன்', // Thursday
      'வெள்ளி', // Friday
      'சனி' // Saturday
      ] // CLDR #1780 - #1845

    };
    var dayPeriodValues = {
      narrow: {
        am: 'மு.ப',
        pm: 'பி.ப',
        midnight: 'நள்.',
        noon: 'நண்.',
        morning: 'கா.',
        afternoon: 'மதி.',
        evening: 'மா.',
        night: 'இர.'
      },
      abbreviated: {
        am: 'முற்பகல்',
        pm: 'பிற்பகல்',
        midnight: 'நள்ளிரவு',
        noon: 'நண்பகல்',
        morning: 'காலை',
        afternoon: 'மதியம்',
        evening: 'மாலை',
        night: 'இரவு'
      },
      wide: {
        am: 'முற்பகல்',
        pm: 'பிற்பகல்',
        midnight: 'நள்ளிரவு',
        noon: 'நண்பகல்',
        morning: 'காலை',
        afternoon: 'மதியம்',
        evening: 'மாலை',
        night: 'இரவு'
      } // CLDR #1780 - #1845

    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'மு.ப',
        pm: 'பி.ப',
        midnight: 'நள்.',
        noon: 'நண்.',
        morning: 'கா.',
        afternoon: 'மதி.',
        evening: 'மா.',
        night: 'இர.'
      },
      abbreviated: {
        am: 'முற்பகல்',
        pm: 'பிற்பகல்',
        midnight: 'நள்ளிரவு',
        noon: 'நண்பகல்',
        morning: 'காலை',
        afternoon: 'மதியம்',
        evening: 'மாலை',
        night: 'இரவு'
      },
      wide: {
        am: 'முற்பகல்',
        pm: 'பிற்பகல்',
        midnight: 'நள்ளிரவு',
        noon: 'நண்பகல்',
        morning: 'காலை',
        afternoon: 'மதியம்',
        evening: 'மாலை',
        night: 'இரவு'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'
      // var rem100 = number % 100
      // if (rem100 > 20 || rem100 < 10) {
      //   switch (rem100 % 10) {
      //     case 1:
      //       return number + 'st'
      //     case 2:
      //       return number + 'nd'
      //     case 3:
      //       return number + 'rd'
      //   }
      // }
      // return number + 'th'

      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$X = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(வது)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(கி.மு.|கி.பி.)/i,
      abbreviated: /^(கி\.?\s?மு\.?|கி\.?\s?பி\.?)/,
      wide: /^(கிறிஸ்துவுக்கு\sமுன்|அன்னோ\sடோமினி)/i
    };
    var parseEraPatterns = {
      any: [/கி\.?\s?மு\.?/, /கி\.?\s?பி\.?/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^காலா.[1234]/i,
      wide: /^(ஒன்றாம்|இரண்டாம்|மூன்றாம்|நான்காம்) காலாண்டு/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/(1|காலா.1|ஒன்றாம்)/i, /(2|காலா.2|இரண்டாம்)/i, /(3|காலா.3|மூன்றாம்)/i, /(4|காலா.4|நான்காம்)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ஜ|பி|மா|ஏ|மே|ஜூ|ஆ|செ|அ|ந|டி)$/i,
      abbreviated: /^(ஜன.|பிப்.|மார்.|ஏப்.|மே|ஜூன்|ஜூலை|ஆக.|செப்.|அக்.|நவ.|டிச.)/i,
      wide: /^(ஜனவரி|பிப்ரவரி|மார்ச்|ஏப்ரல்|மே|ஜூன்|ஜூலை|ஆகஸ்ட்|செப்டம்பர்|அக்டோபர்|நவம்பர்|டிசம்பர்)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ஜ$/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூ/i, /^ஜூ/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i],
      any: [/^ஜன/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூன்/i, /^ஜூலை/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i]
    };
    var matchDayPatterns = {
      narrow: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
      short: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
      abbreviated: /^(ஞாயி.|திங்.|செவ்.|புத.|வியா.|வெள்.|சனி)/i,
      wide: /^(ஞாயிறு|திங்கள்|செவ்வாய்|புதன்|வியாழன்|வெள்ளி|சனி)/i
    };
    var parseDayPatterns = {
      narrow: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i],
      any: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(மு.ப|பி.ப|நள்|நண்|காலை|மதியம்|மாலை|இரவு)/i,
      any: /^(மு.ப|பி.ப|முற்பகல்|பிற்பகல்|நள்ளிரவு|நண்பகல்|காலை|மதியம்|மாலை|இரவு)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^மு/i,
        pm: /^பி/i,
        midnight: /^நள்/i,
        noon: /^நண்/i,
        morning: /காலை/i,
        afternoon: /மதியம்/i,
        evening: /மாலை/i,
        night: /இரவு/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ta = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$Y);

    var _index2 = _interopRequireDefault(formatLong_1$12);

    var _index3 = _interopRequireDefault(formatRelative_1$X);

    var _index4 = _interopRequireDefault(localize_1$X);

    var _index5 = _interopRequireDefault(match_1$X);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Tamil locale (India).
     * @language Tamil
     * @iso-639-2 tam
     * @author Sibiraj [@sibiraj-s]{@link https://github.com/sibiraj-s}
     */
    var locale = {
      code: 'ta',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$Z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: 'సెకను కన్నా తక్కువ',
          other: '{{count}} సెకన్ల కన్నా తక్కువ'
        },
        withPreposition: {
          one: 'సెకను',
          other: '{{count}} సెకన్ల'
        }
      },
      xSeconds: {
        standalone: {
          one: 'ఒక సెకను',
          // CLDR #1314
          other: '{{count}} సెకన్ల'
        },
        withPreposition: {
          one: 'ఒక సెకను',
          other: '{{count}} సెకన్ల'
        }
      },
      halfAMinute: {
        standalone: 'అర నిమిషం',
        withPreposition: 'అర నిమిషం'
      },
      lessThanXMinutes: {
        standalone: {
          one: 'ఒక నిమిషం కన్నా తక్కువ',
          other: '{{count}} నిమిషాల కన్నా తక్కువ'
        },
        withPreposition: {
          one: 'ఒక నిమిషం',
          other: '{{count}} నిమిషాల'
        }
      },
      xMinutes: {
        standalone: {
          one: 'ఒక నిమిషం',
          // CLDR #1311
          other: '{{count}} నిమిషాలు'
        },
        withPreposition: {
          one: 'ఒక నిమిషం',
          // CLDR #1311
          other: '{{count}} నిమిషాల'
        }
      },
      aboutXHours: {
        standalone: {
          one: 'సుమారు ఒక గంట',
          other: 'సుమారు {{count}} గంటలు'
        },
        withPreposition: {
          one: 'సుమారు ఒక గంట',
          other: 'సుమారు {{count}} గంటల'
        }
      },
      xHours: {
        standalone: {
          one: 'ఒక గంట',
          // CLDR #1308
          other: '{{count}} గంటలు'
        },
        withPreposition: {
          one: 'ఒక గంట',
          other: '{{count}} గంటల'
        }
      },
      xDays: {
        standalone: {
          one: 'ఒక రోజు',
          // CLDR #1292
          other: '{{count}} రోజులు'
        },
        withPreposition: {
          one: 'ఒక రోజు',
          other: '{{count}} రోజుల'
        }
      },
      aboutXWeeks: {
        standalone: {
          one: 'సుమారు ఒక వారం',
          other: 'సుమారు {{count}} వారాలు'
        },
        withPreposition: {
          one: 'సుమారు ఒక వారం',
          other: 'సుమారు {{count}} వారాలల'
        }
      },
      xWeeks: {
        standalone: {
          one: 'ఒక వారం',
          other: '{{count}} వారాలు'
        },
        withPreposition: {
          one: 'ఒక వారం',
          other: '{{count}} వారాలల'
        }
      },
      aboutXMonths: {
        standalone: {
          one: 'సుమారు ఒక నెల',
          other: 'సుమారు {{count}} నెలలు'
        },
        withPreposition: {
          one: 'సుమారు ఒక నెల',
          other: 'సుమారు {{count}} నెలల'
        }
      },
      xMonths: {
        standalone: {
          one: 'ఒక నెల',
          // CLDR #1281
          other: '{{count}} నెలలు'
        },
        withPreposition: {
          one: 'ఒక నెల',
          other: '{{count}} నెలల'
        }
      },
      aboutXYears: {
        standalone: {
          one: 'సుమారు ఒక సంవత్సరం',
          other: 'సుమారు {{count}} సంవత్సరాలు'
        },
        withPreposition: {
          one: 'సుమారు ఒక సంవత్సరం',
          other: 'సుమారు {{count}} సంవత్సరాల'
        }
      },
      xYears: {
        standalone: {
          one: 'ఒక సంవత్సరం',
          // CLDR #1275
          other: '{{count}} సంవత్సరాలు'
        },
        withPreposition: {
          one: 'ఒక సంవత్సరం',
          other: '{{count}} సంవత్సరాల'
        }
      },
      overXYears: {
        standalone: {
          one: 'ఒక సంవత్సరం పైగా',
          other: '{{count}} సంవత్సరాలకు పైగా'
        },
        withPreposition: {
          one: 'ఒక సంవత్సరం',
          other: '{{count}} సంవత్సరాల'
        }
      },
      almostXYears: {
        standalone: {
          one: 'దాదాపు ఒక సంవత్సరం',
          other: 'దాదాపు {{count}} సంవత్సరాలు'
        },
        withPreposition: {
          one: 'దాదాపు ఒక సంవత్సరం',
          other: 'దాదాపు {{count}} సంవత్సరాల'
        }
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var usageGroup = options.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      var result;

      if (typeof usageGroup === 'string') {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + 'లో';
        } else {
          return result + ' క్రితం';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$13 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
    // CLDR #1807 - #1811
    var dateFormats = {
      full: 'd, MMMM y, EEEE',
      long: 'd MMMM, y',
      medium: 'd MMM, y',
      short: 'dd-MM-yy' // CLDR #1807 - #1811

    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a' // CLDR #1815 - #1818

    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}'కి'",
      long: "{{date}} {{time}}'కి'",
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$Y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
    var formatRelativeLocale = {
      lastWeek: "'గత' eeee p",
      // CLDR #1384
      yesterday: "'నిన్న' p",
      // CLDR #1393
      today: "'ఈ రోజు' p",
      // CLDR #1394
      tomorrow: "'రేపు' p",
      // CLDR #1395
      nextWeek: "'తదుపరి' eeee p",
      // CLDR #1386
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$Y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
    // Source: https://dsal.uchicago.edu/dictionaries/brown/
    // CLDR #1605 - #1608
    var eraValues = {
      narrow: ['క్రీ.పూ.', 'క్రీ.శ.'],
      abbreviated: ['క్రీ.పూ.', 'క్రీ.శ.'],
      wide: ['క్రీస్తు పూర్వం', 'క్రీస్తుశకం'] // CLDR #1613 - #1628

    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['త్రై1', 'త్రై2', 'త్రై3', 'త్రై4'],
      wide: ['1వ త్రైమాసికం', '2వ త్రైమాసికం', '3వ త్రైమాసికం', '4వ త్రైమాసికం'] // CLDR #1637 - #1708

    };
    var monthValues = {
      narrow: ['జ', 'ఫి', 'మా', 'ఏ', 'మే', 'జూ', 'జు', 'ఆ', 'సె', 'అ', 'న', 'డి'],
      abbreviated: ['జన', 'ఫిబ్ర', 'మార్చి', 'ఏప్రి', 'మే', 'జూన్', 'జులై', 'ఆగ', 'సెప్టెం', 'అక్టో', 'నవం', 'డిసెం'],
      wide: ['జనవరి', 'ఫిబ్రవరి', 'మార్చి', 'ఏప్రిల్', 'మే', 'జూన్', 'జులై', 'ఆగస్టు', 'సెప్టెంబర్', 'అక్టోబర్', 'నవంబర్', 'డిసెంబర్'] // CLDR #1709 - #1764

    };
    var dayValues = {
      narrow: ['ఆ', 'సో', 'మ', 'బు', 'గు', 'శు', 'శ'],
      short: ['ఆది', 'సోమ', 'మంగళ', 'బుధ', 'గురు', 'శుక్ర', 'శని'],
      abbreviated: ['ఆది', 'సోమ', 'మంగళ', 'బుధ', 'గురు', 'శుక్ర', 'శని'],
      wide: ['ఆదివారం', 'సోమవారం', 'మంగళవారం', 'బుధవారం', 'గురువారం', 'శుక్రవారం', 'శనివారం'] // CLDR #1767 - #1806

    };
    var dayPeriodValues = {
      narrow: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      },
      abbreviated: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      },
      wide: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      },
      abbreviated: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      },
      wide: {
        am: 'పూర్వాహ్నం',
        pm: 'అపరాహ్నం',
        midnight: 'అర్ధరాత్రి',
        noon: 'మిట్టమధ్యాహ్నం',
        morning: 'ఉదయం',
        afternoon: 'మధ్యాహ్నం',
        evening: 'సాయంత్రం',
        night: 'రాత్రి'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + 'వ';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$Y = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(వ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(క్రీ\.పూ\.|క్రీ\.శ\.)/i,
      abbreviated: /^(క్రీ\.?\s?పూ\.?|ప్ర\.?\s?శ\.?\s?పూ\.?|క్రీ\.?\s?శ\.?|సా\.?\s?శ\.?)/i,
      wide: /^(క్రీస్తు పూర్వం|ప్రస్తుత శకానికి పూర్వం|క్రీస్తు శకం|ప్రస్తుత శకం)/i
    };
    var parseEraPatterns = {
      any: [/^(పూ|శ)/i, /^సా/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^త్రై[1234]/i,
      wide: /^[1234](వ)? త్రైమాసికం/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(జూ|జు|జ|ఫి|మా|ఏ|మే|ఆ|సె|అ|న|డి)/i,
      abbreviated: /^(జన|ఫిబ్ర|మార్చి|ఏప్రి|మే|జూన్|జులై|ఆగ|సెప్|అక్టో|నవ|డిసె)/i,
      wide: /^(జనవరి|ఫిబ్రవరి|మార్చి|ఏప్రిల్|మే|జూన్|జులై|ఆగస్టు|సెప్టెంబర్|అక్టోబర్|నవంబర్|డిసెంబర్)/i
    };
    var parseMonthPatterns = {
      narrow: [/^జ/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూ/i, /^జు/i, /^ఆ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i],
      any: [/^జన/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూన్/i, /^జులై/i, /^ఆగ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i]
    };
    var matchDayPatterns = {
      narrow: /^(ఆ|సో|మ|బు|గు|శు|శ)/i,
      short: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
      abbreviated: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
      wide: /^(ఆదివారం|సోమవారం|మంగళవారం|బుధవారం|గురువారం|శుక్రవారం|శనివారం)/i
    };
    var parseDayPatterns = {
      narrow: [/^ఆ/i, /^సో/i, /^మ/i, /^బు/i, /^గు/i, /^శు/i, /^శ/i],
      any: [/^ఆది/i, /^సోమ/i, /^మం/i, /^బుధ/i, /^గురు/i, /^శుక్ర/i, /^శని/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i,
      any: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^పూర్వాహ్నం/i,
        pm: /^అపరాహ్నం/i,
        midnight: /^అర్ధ/i,
        noon: /^మిట్ట/i,
        morning: /ఉదయం/i,
        afternoon: /మధ్యాహ్నం/i,
        evening: /సాయంత్రం/i,
        night: /రాత్రి/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var te = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$Z);

    var _index2 = _interopRequireDefault(formatLong_1$13);

    var _index3 = _interopRequireDefault(formatRelative_1$Y);

    var _index4 = _interopRequireDefault(localize_1$Y);

    var _index5 = _interopRequireDefault(match_1$Y);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Telugu locale
     * @language Telugu
     * @iso-639-2 tel
     * @author Kranthi Lakum [@kranthilakum]{@link https://github.com/kranthilakum}
     */
    var locale = {
      code: 'te',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$_ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'น้อยกว่า 1 วินาที',
        other: 'น้อยกว่า {{count}} วินาที'
      },
      xSeconds: {
        one: '1 วินาที',
        other: '{{count}} วินาที'
      },
      halfAMinute: 'ครึ่งนาที',
      lessThanXMinutes: {
        one: 'น้อยกว่า 1 นาที',
        other: 'น้อยกว่า {{count}} นาที'
      },
      xMinutes: {
        one: '1 นาที',
        other: '{{count}} นาที'
      },
      aboutXHours: {
        one: 'ประมาณ 1 ชั่วโมง',
        other: 'ประมาณ {{count}} ชั่วโมง'
      },
      xHours: {
        one: '1 ชั่วโมง',
        other: '{{count}} ชั่วโมง'
      },
      xDays: {
        one: '1 วัน',
        other: '{{count}} วัน'
      },
      aboutXWeeks: {
        one: 'ประมาณ 1 สัปดาห์',
        other: 'ประมาณ {{count}} สัปดาห์'
      },
      xWeeks: {
        one: '1 สัปดาห์',
        other: '{{count}} สัปดาห์'
      },
      aboutXMonths: {
        one: 'ประมาณ 1 เดือน',
        other: 'ประมาณ {{count}} เดือน'
      },
      xMonths: {
        one: '1 เดือน',
        other: '{{count}} เดือน'
      },
      aboutXYears: {
        one: 'ประมาณ 1 ปี',
        other: 'ประมาณ {{count}} ปี'
      },
      xYears: {
        one: '1 ปี',
        other: '{{count}} ปี'
      },
      overXYears: {
        one: 'มากกว่า 1 ปี',
        other: 'มากกว่า {{count}} ปี'
      },
      almostXYears: {
        one: 'เกือบ 1 ปี',
        other: 'เกือบ {{count}} ปี'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          if (token === 'halfAMinute') {
            return 'ใน' + result;
          } else {
            return 'ใน ' + result;
          }
        } else {
          return result + 'ที่ผ่านมา';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$14 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'วันEEEEที่ do MMMM y',
      long: 'do MMMM y',
      medium: 'd MMM y',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'H:mm:ss น. zzzz',
      long: 'H:mm:ss น. z',
      medium: 'H:mm:ss น.',
      short: 'H:mm น.'
    };
    var dateTimeFormats = {
      full: "{{date}} 'เวลา' {{time}}",
      long: "{{date}} 'เวลา' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'medium'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$Z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee'ที่แล้วเวลา' p",
      yesterday: "'เมื่อวานนี้เวลา' p",
      today: "'วันนี้เวลา' p",
      tomorrow: "'พรุ่งนี้เวลา' p",
      nextWeek: "eeee 'เวลา' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$Z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['B', 'คศ'],
      abbreviated: ['BC', 'ค.ศ.'],
      wide: ['ปีก่อนคริสตกาล', 'คริสต์ศักราช']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['ไตรมาสแรก', 'ไตรมาสที่สอง', 'ไตรมาสที่สาม', 'ไตรมาสที่สี่']
    };
    var dayValues = {
      narrow: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
      short: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
      abbreviated: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
      wide: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์']
    };
    var monthValues = {
      narrow: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
      abbreviated: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
      wide: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'เช้า',
        afternoon: 'บ่าย',
        evening: 'เย็น',
        night: 'กลางคืน'
      },
      abbreviated: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'เช้า',
        afternoon: 'บ่าย',
        evening: 'เย็น',
        night: 'กลางคืน'
      },
      wide: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'เช้า',
        afternoon: 'บ่าย',
        evening: 'เย็น',
        night: 'กลางคืน'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'ตอนเช้า',
        afternoon: 'ตอนกลางวัน',
        evening: 'ตอนเย็น',
        night: 'ตอนกลางคืน'
      },
      abbreviated: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'ตอนเช้า',
        afternoon: 'ตอนกลางวัน',
        evening: 'ตอนเย็น',
        night: 'ตอนกลางคืน'
      },
      wide: {
        am: 'ก่อนเที่ยง',
        pm: 'หลังเที่ยง',
        midnight: 'เที่ยงคืน',
        noon: 'เที่ยง',
        morning: 'ตอนเช้า',
        afternoon: 'ตอนกลางวัน',
        evening: 'ตอนเย็น',
        night: 'ตอนกลางคืน'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$Z = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^\d+/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([bB]|[aA]|คศ)/i,
      abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
      wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
    };
    var parseEraPatterns = {
      any: [/^[bB]/i, /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^ไตรมาส(ที่)? ?[1234]/i
    };
    var parseQuarterPatterns = {
      any: [/(1|แรก|หนึ่ง)/i, /(2|สอง)/i, /(3|สาม)/i, /(4|สี่)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
      abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
      wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
    };
    var parseMonthPatterns = {
      wide: [/^มก/i, /^กุม/i, /^มี/i, /^เม/i, /^พฤษ/i, /^มิ/i, /^กรก/i, /^ส/i, /^กัน/i, /^ต/i, /^พฤศ/i, /^ธ/i],
      any: [/^ม\.?ค\.?/i, /^ก\.?พ\.?/i, /^มี\.?ค\.?/i, /^เม\.?ย\.?/i, /^พ\.?ค\.?/i, /^มิ\.?ย\.?/i, /^ก\.?ค\.?/i, /^ส\.?ค\.?/i, /^ก\.?ย\.?/i, /^ต\.?ค\.?/i, /^พ\.?ย\.?/i, /^ธ\.?ค\.?/i]
    };
    var matchDayPatterns = {
      narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
    };
    var parseDayPatterns = {
      wide: [/^อา/i, /^จั/i, /^อั/i, /^พุธ/i, /^พฤ/i, /^ศ/i, /^เส/i],
      any: [/^อา/i, /^จ/i, /^อ/i, /^พ(?!ฤ)/i, /^พฤ/i, /^ศ/i, /^ส/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ก่อนเที่ยง/i,
        pm: /^หลังเที่ยง/i,
        midnight: /^เที่ยงคืน/i,
        noon: /^เที่ยง/i,
        morning: /เช้า/i,
        afternoon: /บ่าย/i,
        evening: /เย็น/i,
        night: /กลางคืน/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var th = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$_);

    var _index2 = _interopRequireDefault(formatLong_1$14);

    var _index3 = _interopRequireDefault(formatRelative_1$Z);

    var _index4 = _interopRequireDefault(localize_1$Z);

    var _index5 = _interopRequireDefault(match_1$Z);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Thai locale.
     * @language Thai
     * @iso-639-2 tha
     * @author Athiwat Hirunworawongkun [@athivvat]{@link https://github.com/athivvat}
     * @author [@hawkup]{@link https://github.com/hawkup}
     * @author  Jirawat I. [@nodtem66]{@link https://github.com/nodtem66}
     */
    var locale = {
      code: 'th',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$$ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'bir saniyeden az',
        other: '{{count}} saniyeden az'
      },
      xSeconds: {
        one: '1 saniye',
        other: '{{count}} saniye'
      },
      halfAMinute: 'yarım dakika',
      lessThanXMinutes: {
        one: 'bir dakikadan az',
        other: '{{count}} dakikadan az'
      },
      xMinutes: {
        one: '1 dakika',
        other: '{{count}} dakika'
      },
      aboutXHours: {
        one: 'yaklaşık 1 saat',
        other: 'yaklaşık {{count}} saat'
      },
      xHours: {
        one: '1 saat',
        other: '{{count}} saat'
      },
      xDays: {
        one: '1 gün',
        other: '{{count}} gün'
      },
      aboutXWeeks: {
        one: 'yaklaşık 1 hafta',
        other: 'yaklaşık {{count}} hafta'
      },
      xWeeks: {
        one: '1 hafta',
        other: '{{count}} hafta'
      },
      aboutXMonths: {
        one: 'yaklaşık 1 ay',
        other: 'yaklaşık {{count}} ay'
      },
      xMonths: {
        one: '1 ay',
        other: '{{count}} ay'
      },
      aboutXYears: {
        one: 'yaklaşık 1 yıl',
        other: 'yaklaşık {{count}} yıl'
      },
      xYears: {
        one: '1 yıl',
        other: '{{count}} yıl'
      },
      overXYears: {
        one: '1 yıldan fazla',
        other: '{{count}} yıldan fazla'
      },
      almostXYears: {
        one: 'neredeyse 1 yıl',
        other: 'neredeyse {{count}} yıl'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' sonra';
        } else {
          return result + ' önce';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$15 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'd MMMM y EEEE',
      long: 'd MMMM y',
      medium: 'd MMM y',
      short: 'dd.MM.yyyy'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'saat' {{time}}",
      long: "{{date}} 'saat' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$_ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'geçen hafta' eeee 'saat' p",
      yesterday: "'dün saat' p",
      today: "'bugün saat' p",
      tomorrow: "'yarın saat' p",
      nextWeek: "eeee 'saat' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$_ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      abbreviated: ['MÖ', 'MS'],
      narrow: ['MÖ', 'MS'],
      wide: ['Milattan Önce', 'Milattan Sonra']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1Ç', '2Ç', '3Ç', '4Ç'],
      wide: ['İlk çeyrek', 'İkinci Çeyrek', 'Üçüncü çeyrek', 'Son çeyrek']
    };
    var monthValues = {
      narrow: ['O', 'Ş', 'M', 'N', 'M', 'H', 'T', 'A', 'E', 'E', 'K', 'A'],
      abbreviated: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
      wide: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık']
    };
    var dayValues = {
      narrow: ['P', 'P', 'S', 'Ç', 'P', 'C', 'C'],
      short: ['Pz', 'Pt', 'Sa', 'Ça', 'Pe', 'Cu', 'Ct'],
      abbreviated: ['Paz', 'Pts', 'Sal', 'Çar', 'Per', 'Cum', 'Cts'],
      wide: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'öö',
        pm: 'ös',
        midnight: 'gy',
        noon: 'ö',
        morning: 'sa',
        afternoon: 'ös',
        evening: 'ak',
        night: 'ge'
      },
      abbreviated: {
        am: 'ÖÖ',
        pm: 'ÖS',
        midnight: 'gece yarısı',
        noon: 'öğle',
        morning: 'sabah',
        afternoon: 'öğleden sonra',
        evening: 'akşam',
        night: 'gece'
      },
      wide: {
        am: 'Ö.Ö.',
        pm: 'Ö.S.',
        midnight: 'gece yarısı',
        noon: 'öğle',
        morning: 'sabah',
        afternoon: 'öğleden sonra',
        evening: 'akşam',
        night: 'gece'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'öö',
        pm: 'ös',
        midnight: 'gy',
        noon: 'ö',
        morning: 'sa',
        afternoon: 'ös',
        evening: 'ak',
        night: 'ge'
      },
      abbreviated: {
        am: 'ÖÖ',
        pm: 'ÖS',
        midnight: 'gece yarısı',
        noon: 'öğlen',
        morning: 'sabahleyin',
        afternoon: 'öğleden sonra',
        evening: 'akşamleyin',
        night: 'geceleyin'
      },
      wide: {
        am: 'ö.ö.',
        pm: 'ö.s.',
        midnight: 'gece yarısı',
        noon: 'öğlen',
        morning: 'sabahleyin',
        afternoon: 'öğleden sonra',
        evening: 'akşamleyin',
        night: 'geceleyin'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      return number + '.';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaulFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$_ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(mö|ms)/i,
      abbreviated: /^(mö|ms)/i,
      wide: /^(milattan önce|milattan sonra)/i
    };
    var parseEraPatterns = {
      any: [/(^mö|^milattan önce)/i, /(^ms|^milattan sonra)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]ç/i,
      wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i],
      abbreviated: [/1ç/i, /2ç/i, /3ç/i, /4ç/i],
      wide: [/^(i|İ)lk çeyrek/i, /(i|İ)kinci çeyrek/i, /üçüncü çeyrek/i, /son çeyrek/i]
    };
    var matchMonthPatterns = {
      narrow: /^[oşmnhtaek]/i,
      abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
      wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
    };
    var parseMonthPatterns = {
      narrow: [/^o/i, /^ş/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
      any: [/^o/i, /^ş/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^ağ/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
    };
    var matchDayPatterns = {
      narrow: /^[psçc]/i,
      short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
      abbreviated: /^(paz|pts|sal|çar|per|cum|cts)/i,
      wide: /^(pazar|pazartesi|salı|çarşamba|perşembe|cuma|cumartesi)/i
    };
    var parseDayPatterns = {
      narrow: [/^p/i, /^p/i, /^s/i, /^ç/i, /^p/i, /^c/i, /^c/i],
      any: [/^pz/i, /^pt/i, /^sa/i, /^ça/i, /^pe/i, /^cu/i, /^ct/i],
      wide: [/^pazar/i, /^pazartesi/i, /^salı/i, /^çarşamba/i, /^perşembe/i, /^cuma/i, /cumartesi/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
      any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ö\.?ö\.?/i,
        pm: /^ö\.?s\.?/i,
        midnight: /^(gy|gece yarısı)/i,
        noon: /^öğ/i,
        morning: /^sa/i,
        afternoon: /^öğleden sonra/i,
        evening: /^ak/i,
        night: /^ge/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var tr = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$$);

    var _index2 = _interopRequireDefault(formatLong_1$15);

    var _index3 = _interopRequireDefault(formatRelative_1$_);

    var _index4 = _interopRequireDefault(localize_1$_);

    var _index5 = _interopRequireDefault(match_1$_);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Turkish locale.
     * @language Turkish
     * @iso-639-2 tur
     * @author Alpcan Aydın [@alpcanaydin]{@link https://github.com/alpcanaydin}
     * @author Berkay Sargın [@berkaey]{@link https://github.com/berkaey}
     * @author Ismail Demirbilek [@dbtek]{@link https://github.com/dbtek}
     * @author İsmail Kayar [@ikayar]{@link https://github.com/ikayar}
     *
     *
     */
    var locale = {
      code: 'tr',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$10 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'بىر سىكۇنت ئىچىدە',
        other: 'سىكۇنت ئىچىدە {{count}}'
      },
      xSeconds: {
        one: 'بىر سىكۇنت',
        other: 'سىكۇنت {{count}}'
      },
      halfAMinute: 'يىرىم مىنۇت',
      lessThanXMinutes: {
        one: 'بىر مىنۇت ئىچىدە',
        other: 'مىنۇت ئىچىدە {{count}}'
      },
      xMinutes: {
        one: 'بىر مىنۇت',
        other: 'مىنۇت {{count}}'
      },
      aboutXHours: {
        one: 'تەخمىنەن بىر سائەت',
        other: 'سائەت {{count}} تەخمىنەن'
      },
      xHours: {
        one: 'بىر سائەت',
        other: 'سائەت {{count}}'
      },
      xDays: {
        one: 'بىر كۈن',
        other: 'كۈن {{count}}'
      },
      aboutXWeeks: {
        one: 'تەخمىنەن بىرھەپتە',
        other: 'ھەپتە {{count}} تەخمىنەن'
      },
      xWeeks: {
        one: 'بىرھەپتە',
        other: 'ھەپتە {{count}}'
      },
      aboutXMonths: {
        one: 'تەخمىنەن بىر ئاي',
        other: 'ئاي {{count}} تەخمىنەن'
      },
      xMonths: {
        one: 'بىر ئاي',
        other: 'ئاي {{count}}'
      },
      aboutXYears: {
        one: 'تەخمىنەن بىر يىل',
        other: 'يىل {{count}} تەخمىنەن'
      },
      xYears: {
        one: 'بىر يىل',
        other: 'يىل {{count}}'
      },
      overXYears: {
        one: 'بىر يىلدىن ئارتۇق',
        other: 'يىلدىن ئارتۇق {{count}}'
      },
      almostXYears: {
        one: 'ئاساسەن بىر يىل',
        other: 'يىل {{count}} ئاساسەن'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result;
        } else {
          return result + ' بولدى';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$16 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'دە' {{time}}",
      long: "{{date}} 'دە' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$$ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'ئ‍ۆتكەن' eeee 'دە' p",
      yesterday: "'تۈنۈگۈن دە' p",
      today: "'بۈگۈن دە' p",
      tomorrow: "'ئەتە دە' p",
      nextWeek: "eeee 'دە' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$$ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['ب', 'ك'],
      abbreviated: ['ب', 'ك'],
      wide: ['مىيلادىدىن بۇرۇن', 'مىيلادىدىن كىيىن']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1', '2', '3', '4'],
      wide: ['بىرىنجى چارەك', 'ئىككىنجى چارەك', 'ئۈچىنجى چارەك', 'تۆتىنجى چارەك'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['ي', 'ف', 'م', 'ا', 'م', 'ى', 'ى', 'ا', 'س', 'ۆ', 'ن', 'د'],
      abbreviated: ['يانۋار', 'فېۋىرال', 'مارت', 'ئاپرىل', 'ماي', 'ئىيۇن', 'ئىيول', 'ئاۋغۇست', 'سىنتەبىر', 'ئۆكتەبىر', 'نويابىر', 'دىكابىر'],
      wide: ['يانۋار', 'فېۋىرال', 'مارت', 'ئاپرىل', 'ماي', 'ئىيۇن', 'ئىيول', 'ئاۋغۇست', 'سىنتەبىر', 'ئۆكتەبىر', 'نويابىر', 'دىكابىر']
    };
    var dayValues = {
      narrow: ['ي', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
      short: ['ي', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
      abbreviated: ['يەكشەنبە', 'دۈشەنبە', 'سەيشەنبە', 'چارشەنبە', 'پەيشەنبە', 'جۈمە', 'شەنبە'],
      wide: ['يەكشەنبە', 'دۈشەنبە', 'سەيشەنبە', 'چارشەنبە', 'پەيشەنبە', 'جۈمە', 'شەنبە']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەن',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشىم',
        night: 'كىچە'
      },
      abbreviated: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەن',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشىم',
        night: 'كىچە'
      },
      wide: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەن',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشىم',
        night: 'كىچە'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەندە',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشامدا',
        night: 'كىچىدە'
      },
      abbreviated: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەندە',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشامدا',
        night: 'كىچىدە'
      },
      wide: {
        am: 'ئە',
        pm: 'چ',
        midnight: 'ك',
        noon: 'چ',
        morning: 'ئەتىگەندە',
        afternoon: 'چۈشتىن كىيىن',
        evening: 'ئاخشامدا',
        night: 'كىچىدە'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      return String(dirtyNumber);
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$$ = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ب|ك)/i,
      wide: /^(مىيلادىدىن بۇرۇن|مىيلادىدىن كىيىن)/i
    };
    var parseEraPatterns = {
      any: [/^بۇرۇن/i, /^كىيىن/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^چ[1234]/i,
      wide: /^چارەك [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[يفمئامئ‍ئاسۆند]/i,
      abbreviated: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i,
      wide: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i
    };
    var parseMonthPatterns = {
      narrow: [/^ي/i, /^ف/i, /^م/i, /^ا/i, /^م/i, /^ى‍/i, /^ى‍/i, /^ا‍/i, /^س/i, /^ۆ/i, /^ن/i, /^د/i],
      any: [/^يان/i, /^فېۋ/i, /^مار/i, /^ئاپ/i, /^ماي/i, /^ئىيۇن/i, /^ئىيول/i, /^ئاۋ/i, /^سىن/i, /^ئۆك/i, /^نوي/i, /^دىك/i]
    };
    var matchDayPatterns = {
      narrow: /^[دسچپجشي]/i,
      short: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
      abbreviated: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
      wide: /^(يەكشەنبە|دۈشەنبە|سەيشەنبە|چارشەنبە|پەيشەنبە|جۈمە|شەنبە)/i
    };
    var parseDayPatterns = {
      narrow: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
      any: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i,
      any: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ئە/i,
        pm: /^چ/i,
        midnight: /^ك/i,
        noon: /^چ/i,
        morning: /ئەتىگەن/i,
        afternoon: /چۈشتىن كىيىن/i,
        evening: /ئاخشىم/i,
        night: /كىچە/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var ug = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$10);

    var _index2 = _interopRequireDefault(formatLong_1$16);

    var _index3 = _interopRequireDefault(formatRelative_1$$);

    var _index4 = _interopRequireDefault(localize_1$$);

    var _index5 = _interopRequireDefault(match_1$$);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Uighur locale
     * @language Uighur
     * @iso-639-2 uig
     * @author Abduwaly M. [@abduwaly]{@link https://github.com/abduwaly}
     */
    var locale = {
      code: 'ug',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$11 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;

    function declension(scheme, count) {
      // scheme for count=1 exists
      if (scheme.one !== undefined && count === 1) {
        return scheme.one;
      }

      var rem10 = count % 10;
      var rem100 = count % 100; // 1, 21, 31, ...

      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
      } else {
        return scheme.pluralGenitive.replace('{{count}}', count);
      }
    }

    function buildLocalizeTokenFn(scheme) {
      return function (count, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return 'за ' + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + ' тому';
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }

    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: 'менше секунди',
          singularNominative: 'менше {{count}} секунди',
          singularGenitive: 'менше {{count}} секунд',
          pluralGenitive: 'менше {{count}} секунд'
        },
        future: {
          one: 'менше, ніж за секунду',
          singularNominative: 'менше, ніж за {{count}} секунду',
          singularGenitive: 'менше, ніж за {{count}} секунди',
          pluralGenitive: 'менше, ніж за {{count}} секунд'
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} секунда',
          singularGenitive: '{{count}} секунди',
          pluralGenitive: '{{count}} секунд'
        },
        past: {
          singularNominative: '{{count}} секунду тому',
          singularGenitive: '{{count}} секунди тому',
          pluralGenitive: '{{count}} секунд тому'
        },
        future: {
          singularNominative: 'за {{count}} секунду',
          singularGenitive: 'за {{count}} секунди',
          pluralGenitive: 'за {{count}} секунд'
        }
      }),
      halfAMinute: function (_, options) {
        if (options.addSuffix) {
          if (options.comparison > 0) {
            return 'за півхвилини';
          } else {
            return 'півхвилини тому';
          }
        }

        return 'півхвилини';
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: 'менше хвилини',
          singularNominative: 'менше {{count}} хвилини',
          singularGenitive: 'менше {{count}} хвилин',
          pluralGenitive: 'менше {{count}} хвилин'
        },
        future: {
          one: 'менше, ніж за хвилину',
          singularNominative: 'менше, ніж за {{count}} хвилину',
          singularGenitive: 'менше, ніж за {{count}} хвилини',
          pluralGenitive: 'менше, ніж за {{count}} хвилин'
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} хвилина',
          singularGenitive: '{{count}} хвилини',
          pluralGenitive: '{{count}} хвилин'
        },
        past: {
          singularNominative: '{{count}} хвилину тому',
          singularGenitive: '{{count}} хвилини тому',
          pluralGenitive: '{{count}} хвилин тому'
        },
        future: {
          singularNominative: 'за {{count}} хвилину',
          singularGenitive: 'за {{count}} хвилини',
          pluralGenitive: 'за {{count}} хвилин'
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'близько {{count}} години',
          singularGenitive: 'близько {{count}} годин',
          pluralGenitive: 'близько {{count}} годин'
        },
        future: {
          singularNominative: 'приблизно за {{count}} годину',
          singularGenitive: 'приблизно за {{count}} години',
          pluralGenitive: 'приблизно за {{count}} годин'
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} годину',
          singularGenitive: '{{count}} години',
          pluralGenitive: '{{count}} годин'
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} день',
          singularGenitive: '{{count}} дня',
          pluralGenitive: '{{count}} днів'
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'близько {{count}} тижня',
          singularGenitive: 'близько {{count}} тижнів',
          pluralGenitive: 'близько {{count}} тижнів'
        },
        future: {
          singularNominative: 'приблизно за {{count}} тиждень',
          singularGenitive: 'приблизно за {{count}} тижні',
          pluralGenitive: 'приблизно за {{count}} тижні'
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} тиждень',
          singularGenitive: '{{count}} тижня',
          pluralGenitive: '{{count}} тижні'
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'близько {{count}} місяця',
          singularGenitive: 'близько {{count}} місяців',
          pluralGenitive: 'близько {{count}} місяців'
        },
        future: {
          singularNominative: 'приблизно за {{count}} місяць',
          singularGenitive: 'приблизно за {{count}} місяця',
          pluralGenitive: 'приблизно за {{count}} місяців'
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} місяць',
          singularGenitive: '{{count}} місяця',
          pluralGenitive: '{{count}} місяців'
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'близько {{count}} року',
          singularGenitive: 'близько {{count}} років',
          pluralGenitive: 'близько {{count}} років'
        },
        future: {
          singularNominative: 'приблизно за {{count}} рік',
          singularGenitive: 'приблизно за {{count}} роки',
          pluralGenitive: 'приблизно за {{count}} років'
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: '{{count}} рік',
          singularGenitive: '{{count}} роки',
          pluralGenitive: '{{count}} років'
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'більше {{count}} року',
          singularGenitive: 'більше {{count}} років',
          pluralGenitive: 'більше {{count}} років'
        },
        future: {
          singularNominative: 'більше, ніж за {{count}} рік',
          singularGenitive: 'більше, ніж за {{count}} роки',
          pluralGenitive: 'більше, ніж за {{count}} років'
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: 'майже {{count}} рік',
          singularGenitive: 'майже {{count}} роки',
          pluralGenitive: 'майже {{count}} років'
        },
        future: {
          singularNominative: 'майже за {{count}} рік',
          singularGenitive: 'майже за {{count}} роки',
          pluralGenitive: 'майже за {{count}} років'
        }
      })
    };

    function formatDistance(token, count, options) {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    }

    module.exports = exports.default;
    });

    var formatLong_1$17 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "EEEE, do MMMM y 'р.'",
      long: "do MMMM y 'р.'",
      medium: "d MMM y 'р.'",
      short: 'dd.MM.y'
    };
    var timeFormats = {
      full: 'H:mm:ss zzzz',
      long: 'H:mm:ss z',
      medium: 'H:mm:ss',
      short: 'H:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'о' {{time}}",
      long: "{{date}} 'о' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$10 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var accusativeWeekdays = ['неділю', 'понеділок', 'вівторок', 'середу', 'четвер', 'п’ятницю', 'суботу'];

    function lastWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у минулу " + weekday + " о' p";

        case 1:
        case 2:
        case 4:
          return "'у минулий " + weekday + " о' p";
      }
    }

    function thisWeek(day) {
      var weekday = accusativeWeekdays[day];
      return "'у " + weekday + " о' p";
    }

    function nextWeek(day) {
      var weekday = accusativeWeekdays[day];

      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у наступну " + weekday + " о' p";

        case 1:
        case 2:
        case 4:
          return "'у наступний " + weekday + " о' p";
      }
    }

    var formatRelativeLocale = {
      lastWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчора о' p",
      today: "'сьогодні о' p",
      tomorrow: "'завтра о' p",
      nextWeek: function (date, baseDate, options) {
        var day = date.getUTCDay();

        if ((0, _index.default)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: 'P'
    };

    function formatRelative(token, date, baseDate, options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(date, baseDate, options);
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$10 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['до н.е.', 'н.е.'],
      abbreviated: ['до н. е.', 'н. е.'],
      wide: ['до нашої ери', 'нашої ери']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
      wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
    };
    var monthValues = {
      // ДСТУ 3582:2013
      narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
      abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
      wide: ['січень', 'лютий', 'березень', 'квітень', 'травень', 'червень', 'липень', 'серпень', 'вересень', 'жовтень', 'листопад', 'грудень']
    };
    var formattingMonthValues = {
      narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
      abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
      wide: ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня']
    };
    var dayValues = {
      narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
      short: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
      abbreviated: ['нед', 'пон', 'вів', 'сер', 'чтв', 'птн', 'суб'],
      wide: ['неділя', 'понеділок', 'вівторок', 'середа', 'четвер', 'п’ятниця', 'субота']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'півн.',
        noon: 'пол.',
        morning: 'ранок',
        afternoon: 'день',
        evening: 'веч.',
        night: 'ніч'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'півн.',
        noon: 'пол.',
        morning: 'ранок',
        afternoon: 'день',
        evening: 'веч.',
        night: 'ніч'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'північ',
        noon: 'полудень',
        morning: 'ранок',
        afternoon: 'день',
        evening: 'вечір',
        night: 'ніч'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'півн.',
        noon: 'пол.',
        morning: 'ранку',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночі'
      },
      abbreviated: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'півн.',
        noon: 'пол.',
        morning: 'ранку',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночі'
      },
      wide: {
        am: 'ДП',
        pm: 'ПП',
        midnight: 'північ',
        noon: 'полудень',
        morning: 'ранку',
        afternoon: 'дня',
        evening: 'веч.',
        night: 'ночі'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var suffix;

      if (unit === 'date') {
        if (dirtyNumber === 3 || dirtyNumber === 23) {
          suffix = '-є';
        } else {
          suffix = '-е';
        }
      } else if (unit === 'minute' || unit === 'second' || unit === 'hour') {
        suffix = '-а';
      } else {
        suffix = '-й';
      }

      return dirtyNumber + suffix;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'any',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$10 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(-?(е|й|є|а|я))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((до )?н\.?\s?е\.?)/i,
      abbreviated: /^((до )?н\.?\s?е\.?)/i,
      wide: /^(до нашої ери|нашої ери|наша ера)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
      wide: /^[1234](-?[иі]?й?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[слбктчвжг]/i,
      abbreviated: /^(січ|лют|бер|берез|кві|трав?|чер|лип|сер|вер|жов|лис(топ)?|груд)\.?/i,
      wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопада?|грудень|грудня)/i
    };
    var parseMonthPatterns = {
      narrow: [/^с/i, /^л/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^с/i, /^в/i, /^ж/i, /^л/i, /^г/i],
      any: [/^сі/i, /^лю/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^лип/i, /^се/i, /^в/i, /^ж/i, /^лис/i, /^г/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
      abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
      wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н/i, /^п[он]/i, /^в/i, /^с[ер]/i, /^ч/i, /^п\W*?[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
      abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
      wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^півн/i,
        noon: /^пол/i,
        morning: /^р/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var uk = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$11);

    var _index2 = _interopRequireDefault(formatLong_1$17);

    var _index3 = _interopRequireDefault(formatRelative_1$10);

    var _index4 = _interopRequireDefault(localize_1$10);

    var _index5 = _interopRequireDefault(match_1$10);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Ukrainian locale.
     * @language Ukrainian
     * @iso-639-2 ukr
     * @author Andrii Korzh [@korzhyk]{@link https://github.com/korzhyk}
     * @author Andriy Shcherbyak [@shcherbyakdev]{@link https://github.com/shcherbyakdev}
     */
    var locale = {
      code: 'uk',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$12 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'sekunddan kam',
        other: '{{count}} sekunddan kam'
      },
      xSeconds: {
        one: '1 sekund',
        other: '{{count}} sekund'
      },
      halfAMinute: 'yarim minut',
      lessThanXMinutes: {
        one: 'bir minutdan kam',
        other: '{{count}} minutdan kam'
      },
      xMinutes: {
        one: '1 minut',
        other: '{{count}} minut'
      },
      aboutXHours: {
        one: 'tahminan 1 soat',
        other: 'tahminan {{count}} soat'
      },
      xHours: {
        one: '1 soat',
        other: '{{count}} soat'
      },
      xDays: {
        one: '1 kun',
        other: '{{count}} kun'
      },
      aboutXWeeks: {
        one: 'tahminan 1 hafta',
        other: 'tahminan {{count}} hafta'
      },
      xWeeks: {
        one: '1 hafta',
        other: '{{count}} hafta'
      },
      aboutXMonths: {
        one: 'tahminan 1 oy',
        other: 'tahminan {{count}} oy'
      },
      xMonths: {
        one: '1 oy',
        other: '{{count}} oy'
      },
      aboutXYears: {
        one: 'tahminan 1 yil',
        other: 'tahminan {{count}} yil'
      },
      xYears: {
        one: '1 yil',
        other: '{{count}} yil'
      },
      overXYears: {
        one: "1 yildan ko'p",
        other: "{{count}} yildan ko'p"
      },
      almostXYears: {
        one: 'deyarli 1 yil',
        other: 'deyarli {{count}} yil'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' dan keyin';
        } else {
          return result + ' oldin';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$18 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: 'EEEE, do MMMM, y',
      long: 'do MMMM, y',
      medium: 'd MMM, y',
      short: 'dd/MM/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss zzzz',
      long: 'h:mm:ss z',
      medium: 'h:mm:ss',
      short: 'h:mm'
    };
    var dateTimeFormats = {
      any: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'any'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$11 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'oldingi' eeee p 'da'",
      yesterday: "'kecha' p 'da'",
      today: "'bugun' p 'da'",
      tomorrow: "'ertaga' p 'da'",
      nextWeek: "eeee p 'da'",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$11 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['M.A', 'M.'],
      abbreviated: ['M.A', 'M.'],
      wide: ['Miloddan Avvalgi', 'Milodiy']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['CH.1', 'CH.2', 'CH.3', 'CH.4'],
      wide: ['1-chi chorak', '2-chi chorak', '3-chi chorak', '4-chi chorak'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['Y', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'Iyun', 'Iyul', 'Avg', 'Sen', 'Okt', 'Noy', 'Dek'],
      wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'Iyun', 'Iyul', 'Avgust', 'Sentabr', 'Oktabr', 'Noyabr', 'Dekabr']
    };
    var dayValues = {
      narrow: ['Y', 'D', 'S', 'CH', 'P', 'J', 'SH'],
      short: ['Ya', 'Du', 'Se', 'Cho', 'Pa', 'Ju', 'Sha'],
      abbreviated: ['Yak', 'Dush', 'Sesh', 'Chor', 'Pay', 'Jum', 'Shan'],
      wide: ['Yakshanba', 'Dushanba', 'Seshanba', 'Chorshanba', 'Payshanba', 'Juma', 'Shanba']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'y.t',
        noon: 'p.',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'yarim tun',
        noon: 'peshin',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'yarim tun',
        noon: 'peshin',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'y.t',
        noon: 'p.',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'yarim tun',
        noon: 'peshin',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'yarim tun',
        noon: 'peshin',
        morning: 'ertalab',
        afternoon: 'tushdan keyin',
        evening: 'kechqurun',
        night: 'tun'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$11 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)(chi)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(m\.a|m\.)/i,
      abbreviated: /^(m\.a\.?\s?m\.?)/i,
      wide: /^(miloddan avval|miloddan keyin)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](chi)? chorak/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[yfmasond]/i,
      abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
      wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
    };
    var parseMonthPatterns = {
      narrow: [/^y/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ya/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^iyun/i, /^iyul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[ydschj]/i,
      short: /^(ya|du|se|cho|pa|ju|sha)/i,
      abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
      wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
    };
    var parseDayPatterns = {
      narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
      any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
      any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^y\.t/i,
        noon: /^pe/i,
        morning: /ertalab/i,
        afternoon: /tushdan keyin/i,
        evening: /kechqurun/i,
        night: /tun/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var uz = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$12);

    var _index2 = _interopRequireDefault(formatLong_1$18);

    var _index3 = _interopRequireDefault(formatRelative_1$11);

    var _index4 = _interopRequireDefault(localize_1$11);

    var _index5 = _interopRequireDefault(match_1$11);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Uzbek locale.
     * @language Uzbek
     * @iso-639-2 uzb
     * @author Mukhammadali [@mukhammadali]{@link https://github.com/Mukhammadali}
     */
    var locale = {
      code: 'uz',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$13 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'dưới 1 giây',
        other: 'dưới {{count}} giây'
      },
      xSeconds: {
        one: '1 giây',
        other: '{{count}} giây'
      },
      halfAMinute: 'nửa phút',
      lessThanXMinutes: {
        one: 'dưới 1 phút',
        other: 'dưới {{count}} phút'
      },
      xMinutes: {
        one: '1 phút',
        other: '{{count}} phút'
      },
      aboutXHours: {
        one: 'khoảng 1 giờ',
        other: 'khoảng {{count}} giờ'
      },
      xHours: {
        one: '1 giờ',
        other: '{{count}} giờ'
      },
      xDays: {
        one: '1 ngày',
        other: '{{count}} ngày'
      },
      aboutXWeeks: {
        one: 'khoảng 1 tuần',
        other: 'khoảng {{count}} tuần'
      },
      xWeeks: {
        one: '1 tuần',
        other: '{{count}} tuần'
      },
      aboutXMonths: {
        one: 'khoảng 1 tháng',
        other: 'khoảng {{count}} tháng'
      },
      xMonths: {
        one: '1 tháng',
        other: '{{count}} tháng'
      },
      aboutXYears: {
        one: 'khoảng 1 năm',
        other: 'khoảng {{count}} năm'
      },
      xYears: {
        one: '1 năm',
        other: '{{count}} năm'
      },
      overXYears: {
        one: 'hơn 1 năm',
        other: 'hơn {{count}} năm'
      },
      almostXYears: {
        one: 'gần 1 năm',
        other: 'gần {{count}} năm'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + ' nữa';
        } else {
          return result + ' trước';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$19 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      // thứ Sáu, ngày 25 tháng 08 năm 2017
      full: "EEEE, 'ngày' d MMMM 'năm' y",
      // ngày 25 tháng 08 năm 2017
      long: "'ngày' d MMMM 'năm' y",
      // 25 thg 08 năm 2017
      medium: "d MMM 'năm' y",
      // 25/08/2017
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
      full: '{{date}} {{time}}',
      // ngày 25 tháng 08 năm 2017 23:25
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$12 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "eeee 'tuần trước vào lúc' p",
      yesterday: "'hôm qua vào lúc' p",
      today: "'hôm nay vào lúc' p",
      tomorrow: "'ngày mai vào lúc' p",
      nextWeek: "eeee 'tới vào lúc' p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$12 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Vietnamese locale reference: http://www.localeplanet.com/icu/vi-VN/index.html
    // Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134
    var eraValues = {
      narrow: ['TCN', 'SCN'],
      abbreviated: ['trước CN', 'sau CN'],
      wide: ['trước Công Nguyên', 'sau Công Nguyên']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['Quý 1', 'Quý 2', 'Quý 3', 'Quý 4']
    };
    var formattingQuarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      // I notice many news outlet use this "quý II/2018"
      wide: ['quý I', 'quý II', 'quý III', 'quý IV'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
      abbreviated: ['Thg 1', 'Thg 2', 'Thg 3', 'Thg 4', 'Thg 5', 'Thg 6', 'Thg 7', 'Thg 8', 'Thg 9', 'Thg 10', 'Thg 11', 'Thg 12'],
      wide: ['Tháng Một', 'Tháng Hai', 'Tháng Ba', 'Tháng Tư', 'Tháng Năm', 'Tháng Sáu', 'Tháng Bảy', 'Tháng Tám', 'Tháng Chín', 'Tháng Mười', 'Tháng Mười Một', 'Tháng Mười Hai'] // In Vietnamese date formatting, month number less than 10 expected to have leading zero

    };
    var formattingMonthValues = {
      narrow: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
      abbreviated: ['thg 1', 'thg 2', 'thg 3', 'thg 4', 'thg 5', 'thg 6', 'thg 7', 'thg 8', 'thg 9', 'thg 10', 'thg 11', 'thg 12'],
      wide: ['tháng 01', 'tháng 02', 'tháng 03', 'tháng 04', 'tháng 05', 'tháng 06', 'tháng 07', 'tháng 08', 'tháng 09', 'tháng 10', 'tháng 11', 'tháng 12']
    };
    var dayValues = {
      narrow: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
      short: ['CN', 'Th 2', 'Th 3', 'Th 4', 'Th 5', 'Th 6', 'Th 7'],
      abbreviated: ['CN', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'],
      wide: ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'] // Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
      // `abbreviated` are just like English but I'm leaving the `wide`
      // format being localized with abbreviations found in some systems (SÁng / CHiều);
      // however, personally, I don't think `Chiều` sounds appropriate for `PM`

    };
    var dayPeriodValues = {
      // narrow date period is extremely rare in Vietnamese
      // I used abbreviated form for noon, morning and afternoon
      // which are regconizable by Vietnamese, others cannot be any shorter
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'nửa đêm',
        noon: 'tr',
        morning: 'sg',
        afternoon: 'ch',
        evening: 'tối',
        night: 'đêm'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'nửa đêm',
        noon: 'trưa',
        morning: 'sáng',
        afternoon: 'chiều',
        evening: 'tối',
        night: 'đêm'
      },
      wide: {
        am: 'SA',
        pm: 'CH',
        midnight: 'nửa đêm',
        noon: 'trưa',
        morning: 'sáng',
        afternoon: 'chiều',
        evening: 'tối',
        night: 'đêm'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'am',
        pm: 'pm',
        midnight: 'nửa đêm',
        noon: 'tr',
        morning: 'sg',
        afternoon: 'ch',
        evening: 'tối',
        night: 'đêm'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'nửa đêm',
        noon: 'trưa',
        morning: 'sáng',
        afternoon: 'chiều',
        evening: 'tối',
        night: 'đêm'
      },
      wide: {
        am: 'SA',
        pm: 'CH',
        midnight: 'nửa đêm',
        noon: 'giữa trưa',
        morning: 'vào buổi sáng',
        afternoon: 'vào buổi chiều',
        evening: 'vào buổi tối',
        night: 'vào ban đêm'
      } // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'month', 'quarter', 'week', 'isoWeek', 'dayOfYear',
      // 'dayOfMonth' or 'dayOfWeek'

    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var options = dirtyOptions || {};
      var unit = String(options.unit);
      var number = parseInt(dirtyNumber, 10);

      if (unit === 'quarter') {
        // many news outlets use "quý I"...
        switch (number) {
          case 1:
            return 'I';

          case 2:
            return 'II';

          case 3:
            return 'III';

          case 4:
            return 'IV';
        }
      } else if (unit === 'day') {
        // day of week in Vietnamese has ordinal number meaning,
        // so we should use them, else it'll sound weird
        switch (number) {
          case 1:
            return 'thứ 2';
          // meaning 2nd day but it's the first day of the week :D

          case 2:
            return 'thứ 3';
          // meaning 3rd day

          case 3:
            return 'thứ 4';
          // meaning 4th day and so on

          case 4:
            return 'thứ 5';

          case 5:
            return 'thứ 6';

          case 6:
            return 'thứ 7';

          case 7:
            return 'chủ nhật';
          // meaning Sunday, there's no 8th day :D
        }
      } else if (unit === 'week') {
        if (number === 1) {
          return 'thứ nhất';
        } else {
          return 'thứ ' + number;
        }
      } else if (unit === 'dayOfYear') {
        if (number === 1) {
          return 'đầu tiên';
        } else {
          return 'thứ ' + number;
        }
      } // there are no different forms of ordinal numbers in Vietnamese


      return number;
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide',
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$12 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(\d+)/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(tcn|scn)/i,
      abbreviated: /^(trước CN|sau CN)/i,
      wide: /^(trước Công Nguyên|sau Công Nguyên)/i
    };
    var parseEraPatterns = {
      any: [/^t/i, /^s/i]
    };
    var matchQuarterPatterns = {
      narrow: /^([1234]|i{1,3}v?)/i,
      abbreviated: /^q([1234]|i{1,3}v?)/i,
      wide: /^quý ([1234]|i{1,3}v?)/i
    };
    var parseQuarterPatterns = {
      any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
    };
    var matchMonthPatterns = {
      // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
      // note the order of '1' since it is a sub-string of '10', so must be lower priority
      narrow: /^(0?[2-9]|10|11|12|0?1)/i,
      // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
      abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
      // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
      wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
    };
    var parseMonthPatterns = {
      narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
      abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
      wide: [/^tháng ?(Một|0?1(?!\d))/i, /^tháng ?(Hai|0?2)/i, /^tháng ?(Ba|0?3)/i, /^tháng ?(Tư|0?4)/i, /^tháng ?(Năm|0?5)/i, /^tháng ?(Sáu|0?6)/i, /^tháng ?(Bảy|0?7)/i, /^tháng ?(Tám|0?8)/i, /^tháng ?(Chín|0?9)/i, /^tháng ?(Mười|10)/i, /^tháng ?(Mười ?Một|11)/i, /^tháng ?(Mười ?Hai|12)/i]
    };
    var matchDayPatterns = {
      narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
      short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
    };
    var parseDayPatterns = {
      narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      wide: [/(Chủ|Chúa) ?Nhật/i, /Hai/i, /Ba/i, /Tư/i, /Năm/i, /Sáu/i, /Bảy/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
      abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
      wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(a|sa)/i,
        pm: /^(p|ch[^i]*)/i,
        midnight: /nửa đêm/i,
        noon: /trưa/i,
        morning: /sáng/i,
        afternoon: /chiều/i,
        evening: /tối/i,
        night: /^đêm/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var vi = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$13);

    var _index2 = _interopRequireDefault(formatLong_1$19);

    var _index3 = _interopRequireDefault(formatRelative_1$12);

    var _index4 = _interopRequireDefault(localize_1$12);

    var _index5 = _interopRequireDefault(match_1$12);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Vietnamese locale (Vietnam).
     * @language Vietnamese
     * @iso-639-2 vie
     * @author Thanh Tran [@trongthanh]{@link https://github.com/trongthanh}
     * @author Leroy Hopson [@lihop]{@link https://github.com/lihop}
     */
    var locale = {
      code: 'vi',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
        /* First week of new year contains Jan 1st  */

      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$14 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: '不到 1 秒',
        other: '不到 {{count}} 秒'
      },
      xSeconds: {
        one: '1 秒',
        other: '{{count}} 秒'
      },
      halfAMinute: '半分钟',
      lessThanXMinutes: {
        one: '不到 1 分钟',
        other: '不到 {{count}} 分钟'
      },
      xMinutes: {
        one: '1 分钟',
        other: '{{count}} 分钟'
      },
      xHours: {
        one: '1 小时',
        other: '{{count}} 小时'
      },
      aboutXHours: {
        one: '大约 1 小时',
        other: '大约 {{count}} 小时'
      },
      xDays: {
        one: '1 天',
        other: '{{count}} 天'
      },
      aboutXWeeks: {
        one: '大约 1 个星期',
        other: '大约 {{count}} 个星期'
      },
      xWeeks: {
        one: '1 个星期',
        other: '{{count}} 个星期'
      },
      aboutXMonths: {
        one: '大约 1 个月',
        other: '大约 {{count}} 个月'
      },
      xMonths: {
        one: '1 个月',
        other: '{{count}} 个月'
      },
      aboutXYears: {
        one: '大约 1 年',
        other: '大约 {{count}} 年'
      },
      xYears: {
        one: '1 年',
        other: '{{count}} 年'
      },
      overXYears: {
        one: '超过 1 年',
        other: '超过 {{count}} 年'
      },
      almostXYears: {
        one: '将近 1 年',
        other: '将近 {{count}} 年'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + '内';
        } else {
          return result + '前';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$1a = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "y'年'M'月'd'日' EEEE",
      long: "y'年'M'月'd'日'",
      medium: 'yyyy-MM-dd',
      short: 'yy-MM-dd'
    };
    var timeFormats = {
      full: 'zzzz a h:mm:ss',
      long: 'z a h:mm:ss',
      medium: 'a h:mm:ss',
      short: 'a h:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$13 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;

    var _index = _interopRequireDefault(isSameUTCWeek_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function checkWeek(_date, _baseDate, _options, baseFormat) {
      if ((0, _index.default)(_date, _baseDate, _options)) {
        return baseFormat; // in same week
      } else if (_date.getTime() > _baseDate.getTime()) {
        return "'下个'" + baseFormat; // in next week
      }

      return "'上个'" + baseFormat; // in last week
    }

    var formatRelativeLocale = {
      lastWeek: checkWeek,
      // days before yesterday, maybe in this week or last week
      yesterday: "'昨天' p",
      today: "'今天' p",
      tomorrow: "'明天' p",
      nextWeek: checkWeek,
      // days after tomorrow, maybe in this week or next week
      other: 'PP p'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      var format = formatRelativeLocale[token];

      if (typeof format === 'function') {
        return format(_date, _baseDate, _options, 'eeee p');
      }

      return format;
    }

    module.exports = exports.default;
    });

    var localize_1$13 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['前', '公元'],
      abbreviated: ['前', '公元'],
      wide: ['公元前', '公元']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['第一刻', '第二刻', '第三刻', '第四刻'],
      wide: ['第一刻钟', '第二刻钟', '第三刻钟', '第四刻钟']
    };
    var monthValues = {
      narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
      abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
      wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
    };
    var dayValues = {
      narrow: ['日', '一', '二', '三', '四', '五', '六'],
      short: ['日', '一', '二', '三', '四', '五', '六'],
      abbreviated: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
      wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
    };
    var dayPeriodValues = {
      narrow: {
        am: '上',
        pm: '下',
        midnight: '凌晨',
        noon: '午',
        morning: '早',
        afternoon: '下午',
        evening: '晚',
        night: '夜'
      },
      abbreviated: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜间'
      },
      wide: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜间'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: '上',
        pm: '下',
        midnight: '凌晨',
        noon: '午',
        morning: '早',
        afternoon: '下午',
        evening: '晚',
        night: '夜'
      },
      abbreviated: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜间'
      },
      wide: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜间'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'
      var number = Number(dirtyNumber);
      var options = dirtyOptions || {};
      var unit = String(options.unit);

      switch (unit) {
        case 'date':
          return number.toString() + '日';

        case 'hour':
          return number.toString() + '时';

        case 'minute':
          return number.toString() + '分';

        case 'second':
          return number.toString() + '秒';

        default:
          return '第 ' + number.toString();
      }
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$13 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|时|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(前)/i,
      abbreviated: /^(前)/i,
      wide: /^(公元前|公元)/i
    };
    var parseEraPatterns = {
      any: [/^(前)/i, /^(公元)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^第[一二三四]刻/i,
      wide: /^第[一二三四]刻钟/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
      abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
      wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
    };
    var parseMonthPatterns = {
      narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
      any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
    };
    var matchDayPatterns = {
      narrow: /^[一二三四五六日]/i,
      short: /^[一二三四五六日]/i,
      abbreviated: /^周[一二三四五六日]/i,
      wide: /^星期[一二三四五六日]/i
    };
    var parseDayPatterns = {
      any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var zhCN = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$14);

    var _index2 = _interopRequireDefault(formatLong_1$1a);

    var _index3 = _interopRequireDefault(formatRelative_1$13);

    var _index4 = _interopRequireDefault(localize_1$13);

    var _index5 = _interopRequireDefault(match_1$13);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Chinese Simplified locale.
     * @language Chinese Simplified
     * @iso-639-2 zho
     * @author Changyu Geng [@KingMario]{@link https://github.com/KingMario}
     * @author Song Shuoyun [@fnlctrl]{@link https://github.com/fnlctrl}
     * @author sabrinaM [@sabrinamiao]{@link https://github.com/sabrinamiao}
     * @author Carney Wu [@cubicwork]{@link https://github.com/cubicwork}
     * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
     */
    var locale = {
      code: 'zh-CN',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatDistance_1$15 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: '少於 1 秒',
        other: '少於 {{count}} 秒'
      },
      xSeconds: {
        one: '1 秒',
        other: '{{count}} 秒'
      },
      halfAMinute: '半分鐘',
      lessThanXMinutes: {
        one: '少於 1 分鐘',
        other: '少於 {{count}} 分鐘'
      },
      xMinutes: {
        one: '1 分鐘',
        other: '{{count}} 分鐘'
      },
      xHours: {
        one: '1 小時',
        other: '{{count}} 小時'
      },
      aboutXHours: {
        one: '大約 1 小時',
        other: '大約 {{count}} 小時'
      },
      xDays: {
        one: '1 天',
        other: '{{count}} 天'
      },
      aboutXWeeks: {
        one: '大約 1 个星期',
        other: '大約 {{count}} 个星期'
      },
      xWeeks: {
        one: '1 个星期',
        other: '{{count}} 个星期'
      },
      aboutXMonths: {
        one: '大約 1 個月',
        other: '大約 {{count}} 個月'
      },
      xMonths: {
        one: '1 個月',
        other: '{{count}} 個月'
      },
      aboutXYears: {
        one: '大約 1 年',
        other: '大約 {{count}} 年'
      },
      xYears: {
        one: '1 年',
        other: '{{count}} 年'
      },
      overXYears: {
        one: '超過 1 年',
        other: '超過 {{count}} 年'
      },
      almostXYears: {
        one: '將近 1 年',
        other: '將近 {{count}} 年'
      }
    };

    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return result + '內';
        } else {
          return result + '前';
        }
      }

      return result;
    }

    module.exports = exports.default;
    });

    var formatLong_1$1b = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildFormatLongFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var dateFormats = {
      full: "y'年'M'月'd'日' EEEE",
      long: "y'年'M'月'd'日'",
      medium: 'yyyy-MM-dd',
      short: 'yy-MM-dd'
    };
    var timeFormats = {
      full: 'zzzz a h:mm:ss',
      long: 'z a h:mm:ss',
      medium: 'a h:mm:ss',
      short: 'a h:mm'
    };
    var dateTimeFormats = {
      full: '{{date}} {{time}}',
      long: '{{date}} {{time}}',
      medium: '{{date}} {{time}}',
      short: '{{date}} {{time}}'
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
    });

    var formatRelative_1$14 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'上個' eeee p",
      yesterday: "'昨天' p",
      today: "'今天' p",
      tomorrow: "'明天' p",
      nextWeek: "'下個' eeee p",
      other: 'P'
    };

    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    module.exports = exports.default;
    });

    var localize_1$14 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildLocalizeFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var eraValues = {
      narrow: ['前', '公元'],
      abbreviated: ['前', '公元'],
      wide: ['公元前', '公元']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['第一刻', '第二刻', '第三刻', '第四刻'],
      wide: ['第一刻鐘', '第二刻鐘', '第三刻鐘', '第四刻鐘']
    };
    var monthValues = {
      narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
      abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
      wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
    };
    var dayValues = {
      narrow: ['日', '一', '二', '三', '四', '五', '六'],
      short: ['日', '一', '二', '三', '四', '五', '六'],
      abbreviated: ['週日', '週一', '週二', '週三', '週四', '週五', '週六'],
      wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
    };
    var dayPeriodValues = {
      narrow: {
        am: '上',
        pm: '下',
        midnight: '凌晨',
        noon: '午',
        morning: '早',
        afternoon: '下午',
        evening: '晚',
        night: '夜'
      },
      abbreviated: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜間'
      },
      wide: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜間'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: '上',
        pm: '下',
        midnight: '凌晨',
        noon: '午',
        morning: '早',
        afternoon: '下午',
        evening: '晚',
        night: '夜'
      },
      abbreviated: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜間'
      },
      wide: {
        am: '上午',
        pm: '下午',
        midnight: '凌晨',
        noon: '中午',
        morning: '早晨',
        afternoon: '中午',
        evening: '晚上',
        night: '夜間'
      }
    };

    function ordinalNumber(dirtyNumber, dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var options = dirtyOptions || {};
      var unit = String(options.unit);

      switch (unit) {
        case 'date':
          return number.toString() + '日';

        case 'hour':
          return number.toString() + '時';

        case 'minute':
          return number.toString() + '分';

        case 'second':
          return number.toString() + '秒';

        default:
          return '第 ' + number.toString();
      }
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
    });

    var match_1$14 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(buildMatchPatternFn_1);

    var _index2 = _interopRequireDefault(buildMatchFn_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(前)/i,
      abbreviated: /^(前)/i,
      wide: /^(公元前|公元)/i
    };
    var parseEraPatterns = {
      any: [/^(前)/i, /^(公元)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^第[一二三四]刻/i,
      wide: /^第[一二三四]刻鐘/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
      abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
      wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
    };
    var parseMonthPatterns = {
      narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
      any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
    };
    var matchDayPatterns = {
      narrow: /^[一二三四五六日]/i,
      short: /^[一二三四五六日]/i,
      abbreviated: /^週[一二三四五六日]/i,
      wide: /^星期[一二三四五六日]/i
    };
    var parseDayPatterns = {
      any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
    });

    var zhTW = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _index = _interopRequireDefault(formatDistance_1$15);

    var _index2 = _interopRequireDefault(formatLong_1$1b);

    var _index3 = _interopRequireDefault(formatRelative_1$14);

    var _index4 = _interopRequireDefault(localize_1$14);

    var _index5 = _interopRequireDefault(match_1$14);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @type {Locale}
     * @category Locales
     * @summary Chinese Traditional locale.
     * @language Chinese Traditional
     * @iso-639-2 zho
     * @author tonypai [@tpai]{@link https://github.com/tpai}
     * @author Jack Hsu [@jackhsu978]{@link https://github.com/jackhsu978}
     * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
     */
    var locale = {
      code: 'zh-TW',
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 4
      }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
    });

    var locale$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "af", {
      enumerable: true,
      get: function () {
        return _index.default;
      }
    });
    Object.defineProperty(exports, "arDZ", {
      enumerable: true,
      get: function () {
        return _index2.default;
      }
    });
    Object.defineProperty(exports, "arMA", {
      enumerable: true,
      get: function () {
        return _index3.default;
      }
    });
    Object.defineProperty(exports, "arSA", {
      enumerable: true,
      get: function () {
        return _index4.default;
      }
    });
    Object.defineProperty(exports, "az", {
      enumerable: true,
      get: function () {
        return _index5.default;
      }
    });
    Object.defineProperty(exports, "be", {
      enumerable: true,
      get: function () {
        return _index6.default;
      }
    });
    Object.defineProperty(exports, "bg", {
      enumerable: true,
      get: function () {
        return _index7.default;
      }
    });
    Object.defineProperty(exports, "bn", {
      enumerable: true,
      get: function () {
        return _index8.default;
      }
    });
    Object.defineProperty(exports, "ca", {
      enumerable: true,
      get: function () {
        return _index9.default;
      }
    });
    Object.defineProperty(exports, "cs", {
      enumerable: true,
      get: function () {
        return _index10.default;
      }
    });
    Object.defineProperty(exports, "cy", {
      enumerable: true,
      get: function () {
        return _index11.default;
      }
    });
    Object.defineProperty(exports, "da", {
      enumerable: true,
      get: function () {
        return _index12.default;
      }
    });
    Object.defineProperty(exports, "de", {
      enumerable: true,
      get: function () {
        return _index13.default;
      }
    });
    Object.defineProperty(exports, "el", {
      enumerable: true,
      get: function () {
        return _index14.default;
      }
    });
    Object.defineProperty(exports, "enAU", {
      enumerable: true,
      get: function () {
        return _index15.default;
      }
    });
    Object.defineProperty(exports, "enCA", {
      enumerable: true,
      get: function () {
        return _index16.default;
      }
    });
    Object.defineProperty(exports, "enGB", {
      enumerable: true,
      get: function () {
        return _index17.default;
      }
    });
    Object.defineProperty(exports, "enIN", {
      enumerable: true,
      get: function () {
        return _index18.default;
      }
    });
    Object.defineProperty(exports, "enNZ", {
      enumerable: true,
      get: function () {
        return _index19.default;
      }
    });
    Object.defineProperty(exports, "enUS", {
      enumerable: true,
      get: function () {
        return _index20.default;
      }
    });
    Object.defineProperty(exports, "enZA", {
      enumerable: true,
      get: function () {
        return _index21.default;
      }
    });
    Object.defineProperty(exports, "eo", {
      enumerable: true,
      get: function () {
        return _index22.default;
      }
    });
    Object.defineProperty(exports, "es", {
      enumerable: true,
      get: function () {
        return _index23.default;
      }
    });
    Object.defineProperty(exports, "et", {
      enumerable: true,
      get: function () {
        return _index24.default;
      }
    });
    Object.defineProperty(exports, "eu", {
      enumerable: true,
      get: function () {
        return _index25.default;
      }
    });
    Object.defineProperty(exports, "faIR", {
      enumerable: true,
      get: function () {
        return _index26.default;
      }
    });
    Object.defineProperty(exports, "fi", {
      enumerable: true,
      get: function () {
        return _index27.default;
      }
    });
    Object.defineProperty(exports, "fr", {
      enumerable: true,
      get: function () {
        return _index28.default;
      }
    });
    Object.defineProperty(exports, "frCA", {
      enumerable: true,
      get: function () {
        return _index29.default;
      }
    });
    Object.defineProperty(exports, "frCH", {
      enumerable: true,
      get: function () {
        return _index30.default;
      }
    });
    Object.defineProperty(exports, "gd", {
      enumerable: true,
      get: function () {
        return _index31.default;
      }
    });
    Object.defineProperty(exports, "gl", {
      enumerable: true,
      get: function () {
        return _index32.default;
      }
    });
    Object.defineProperty(exports, "gu", {
      enumerable: true,
      get: function () {
        return _index33.default;
      }
    });
    Object.defineProperty(exports, "he", {
      enumerable: true,
      get: function () {
        return _index34.default;
      }
    });
    Object.defineProperty(exports, "hi", {
      enumerable: true,
      get: function () {
        return _index35.default;
      }
    });
    Object.defineProperty(exports, "hr", {
      enumerable: true,
      get: function () {
        return _index36.default;
      }
    });
    Object.defineProperty(exports, "hu", {
      enumerable: true,
      get: function () {
        return _index37.default;
      }
    });
    Object.defineProperty(exports, "hy", {
      enumerable: true,
      get: function () {
        return _index38.default;
      }
    });
    Object.defineProperty(exports, "id", {
      enumerable: true,
      get: function () {
        return _index39.default;
      }
    });
    Object.defineProperty(exports, "is", {
      enumerable: true,
      get: function () {
        return _index40.default;
      }
    });
    Object.defineProperty(exports, "it", {
      enumerable: true,
      get: function () {
        return _index41.default;
      }
    });
    Object.defineProperty(exports, "ja", {
      enumerable: true,
      get: function () {
        return _index42.default;
      }
    });
    Object.defineProperty(exports, "ka", {
      enumerable: true,
      get: function () {
        return _index43.default;
      }
    });
    Object.defineProperty(exports, "kk", {
      enumerable: true,
      get: function () {
        return _index44.default;
      }
    });
    Object.defineProperty(exports, "kn", {
      enumerable: true,
      get: function () {
        return _index45.default;
      }
    });
    Object.defineProperty(exports, "ko", {
      enumerable: true,
      get: function () {
        return _index46.default;
      }
    });
    Object.defineProperty(exports, "lb", {
      enumerable: true,
      get: function () {
        return _index47.default;
      }
    });
    Object.defineProperty(exports, "lt", {
      enumerable: true,
      get: function () {
        return _index48.default;
      }
    });
    Object.defineProperty(exports, "lv", {
      enumerable: true,
      get: function () {
        return _index49.default;
      }
    });
    Object.defineProperty(exports, "mk", {
      enumerable: true,
      get: function () {
        return _index50.default;
      }
    });
    Object.defineProperty(exports, "ms", {
      enumerable: true,
      get: function () {
        return _index51.default;
      }
    });
    Object.defineProperty(exports, "mt", {
      enumerable: true,
      get: function () {
        return _index52.default;
      }
    });
    Object.defineProperty(exports, "nb", {
      enumerable: true,
      get: function () {
        return _index53.default;
      }
    });
    Object.defineProperty(exports, "nl", {
      enumerable: true,
      get: function () {
        return _index54.default;
      }
    });
    Object.defineProperty(exports, "nlBE", {
      enumerable: true,
      get: function () {
        return _index55.default;
      }
    });
    Object.defineProperty(exports, "nn", {
      enumerable: true,
      get: function () {
        return _index56.default;
      }
    });
    Object.defineProperty(exports, "pl", {
      enumerable: true,
      get: function () {
        return _index57.default;
      }
    });
    Object.defineProperty(exports, "pt", {
      enumerable: true,
      get: function () {
        return _index58.default;
      }
    });
    Object.defineProperty(exports, "ptBR", {
      enumerable: true,
      get: function () {
        return _index59.default;
      }
    });
    Object.defineProperty(exports, "ro", {
      enumerable: true,
      get: function () {
        return _index60.default;
      }
    });
    Object.defineProperty(exports, "ru", {
      enumerable: true,
      get: function () {
        return _index61.default;
      }
    });
    Object.defineProperty(exports, "sk", {
      enumerable: true,
      get: function () {
        return _index62.default;
      }
    });
    Object.defineProperty(exports, "sl", {
      enumerable: true,
      get: function () {
        return _index63.default;
      }
    });
    Object.defineProperty(exports, "sr", {
      enumerable: true,
      get: function () {
        return _index64.default;
      }
    });
    Object.defineProperty(exports, "srLatn", {
      enumerable: true,
      get: function () {
        return _index65.default;
      }
    });
    Object.defineProperty(exports, "sv", {
      enumerable: true,
      get: function () {
        return _index66.default;
      }
    });
    Object.defineProperty(exports, "ta", {
      enumerable: true,
      get: function () {
        return _index67.default;
      }
    });
    Object.defineProperty(exports, "te", {
      enumerable: true,
      get: function () {
        return _index68.default;
      }
    });
    Object.defineProperty(exports, "th", {
      enumerable: true,
      get: function () {
        return _index69.default;
      }
    });
    Object.defineProperty(exports, "tr", {
      enumerable: true,
      get: function () {
        return _index70.default;
      }
    });
    Object.defineProperty(exports, "ug", {
      enumerable: true,
      get: function () {
        return _index71.default;
      }
    });
    Object.defineProperty(exports, "uk", {
      enumerable: true,
      get: function () {
        return _index72.default;
      }
    });
    Object.defineProperty(exports, "uz", {
      enumerable: true,
      get: function () {
        return _index73.default;
      }
    });
    Object.defineProperty(exports, "vi", {
      enumerable: true,
      get: function () {
        return _index74.default;
      }
    });
    Object.defineProperty(exports, "zhCN", {
      enumerable: true,
      get: function () {
        return _index75.default;
      }
    });
    Object.defineProperty(exports, "zhTW", {
      enumerable: true,
      get: function () {
        return _index76.default;
      }
    });

    var _index = _interopRequireDefault(af);

    var _index2 = _interopRequireDefault(arDZ);

    var _index3 = _interopRequireDefault(arMA);

    var _index4 = _interopRequireDefault(arSA);

    var _index5 = _interopRequireDefault(az);

    var _index6 = _interopRequireDefault(be);

    var _index7 = _interopRequireDefault(bg);

    var _index8 = _interopRequireDefault(bn);

    var _index9 = _interopRequireDefault(ca);

    var _index10 = _interopRequireDefault(cs);

    var _index11 = _interopRequireDefault(cy);

    var _index12 = _interopRequireDefault(da);

    var _index13 = _interopRequireDefault(de);

    var _index14 = _interopRequireDefault(el);

    var _index15 = _interopRequireDefault(enAU);

    var _index16 = _interopRequireDefault(enCA);

    var _index17 = _interopRequireDefault(enGB);

    var _index18 = _interopRequireDefault(enIN);

    var _index19 = _interopRequireDefault(enNZ);

    var _index20 = _interopRequireDefault(enUS);

    var _index21 = _interopRequireDefault(enZA);

    var _index22 = _interopRequireDefault(eo);

    var _index23 = _interopRequireDefault(es);

    var _index24 = _interopRequireDefault(et);

    var _index25 = _interopRequireDefault(eu);

    var _index26 = _interopRequireDefault(faIR);

    var _index27 = _interopRequireDefault(fi);

    var _index28 = _interopRequireDefault(fr);

    var _index29 = _interopRequireDefault(frCA);

    var _index30 = _interopRequireDefault(frCH);

    var _index31 = _interopRequireDefault(gd);

    var _index32 = _interopRequireDefault(gl);

    var _index33 = _interopRequireDefault(gu);

    var _index34 = _interopRequireDefault(he);

    var _index35 = _interopRequireDefault(hi);

    var _index36 = _interopRequireDefault(hr);

    var _index37 = _interopRequireDefault(hu);

    var _index38 = _interopRequireDefault(hy);

    var _index39 = _interopRequireDefault(id);

    var _index40 = _interopRequireDefault(is);

    var _index41 = _interopRequireDefault(it);

    var _index42 = _interopRequireDefault(ja);

    var _index43 = _interopRequireDefault(ka);

    var _index44 = _interopRequireDefault(kk);

    var _index45 = _interopRequireDefault(kn);

    var _index46 = _interopRequireDefault(ko);

    var _index47 = _interopRequireDefault(lb);

    var _index48 = _interopRequireDefault(lt);

    var _index49 = _interopRequireDefault(lv);

    var _index50 = _interopRequireDefault(mk);

    var _index51 = _interopRequireDefault(ms);

    var _index52 = _interopRequireDefault(mt);

    var _index53 = _interopRequireDefault(nb);

    var _index54 = _interopRequireDefault(nl);

    var _index55 = _interopRequireDefault(nlBE);

    var _index56 = _interopRequireDefault(nn);

    var _index57 = _interopRequireDefault(pl);

    var _index58 = _interopRequireDefault(pt);

    var _index59 = _interopRequireDefault(ptBR);

    var _index60 = _interopRequireDefault(ro);

    var _index61 = _interopRequireDefault(ru);

    var _index62 = _interopRequireDefault(sk);

    var _index63 = _interopRequireDefault(sl);

    var _index64 = _interopRequireDefault(sr);

    var _index65 = _interopRequireDefault(srLatn);

    var _index66 = _interopRequireDefault(sv);

    var _index67 = _interopRequireDefault(ta);

    var _index68 = _interopRequireDefault(te);

    var _index69 = _interopRequireDefault(th);

    var _index70 = _interopRequireDefault(tr);

    var _index71 = _interopRequireDefault(ug);

    var _index72 = _interopRequireDefault(uk);

    var _index73 = _interopRequireDefault(uz);

    var _index74 = _interopRequireDefault(vi);

    var _index75 = _interopRequireDefault(zhCN);

    var _index76 = _interopRequireDefault(zhTW);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    });

    var index = /*@__PURE__*/getDefaultExportFromCjs(locale$1);

    var locales = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), locale$1, {
        'default': index
    }));

    const capitalize = (s) => {
        if (typeof s !== 'string')
            return '';
        return s.charAt(0).toUpperCase() + s.slice(1);
    };
    const copyToClipboard = (text) => {
        if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed"; // Prevent scrolling to bottom of page in MS Edge.
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy"); // Security exception may be thrown by some browsers.
            }
            catch (ex) {
                console.warn("Copy to clipboard failed.", ex);
                return false;
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
    };
    const buildCalendarMonth = (month, year, dateFormat, firstDayOfTheWeek, locale) => {
        let weeksInMonth = getWeeksInMonth(new Date(year, month), { weekStartsOn: firstDayOfTheWeek });
        let currentDay = startOfWeek(new Date(year, month), { weekStartsOn: firstDayOfTheWeek });
        locale = locale.replace('-', '');
        const days = {
            0: capitalize(locales[locale].localize.day(0, { width: 'abbreviated' })),
            1: capitalize(locales[locale].localize.day(1, { width: 'abbreviated' })),
            2: capitalize(locales[locale].localize.day(2, { width: 'abbreviated' })),
            3: capitalize(locales[locale].localize.day(3, { width: 'abbreviated' })),
            4: capitalize(locales[locale].localize.day(4, { width: 'abbreviated' })),
            5: capitalize(locales[locale].localize.day(5, { width: 'abbreviated' })),
            6: capitalize(locales[locale].localize.day(6, { width: 'abbreviated' })),
        };
        let result = `<table><thead><tr>${(firstDayOfTheWeek === 1 ? '' : `<th>${days[0]}</th>`)}<th>${days[1]}</th><th>${days[2]}</th><th>${days[3]}</th><th>${days[4]}</th><th>${days[5]}</th><th>${days[6]}</th>${(firstDayOfTheWeek === 1 ? `<th>${days[0]}</th>` : '')}</tr></thead><tbody>`;
        for (let i = 1; i <= weeksInMonth; i++) {
            result += '<tr>';
            for (let j = 0; j < 7; j++) {
                result += `${isSameMonth(currentDay, new Date(year, month, 1)) ? '<td>' : '<td class="outofmonth">'}<a data-ref="${format(currentDay, dateFormat)}" href="#/page/${format(currentDay, dateFormat)}" class="page-ref">${format(currentDay, 'd')}</a></td>`;
                currentDay = addDays(currentDay, 1);
            }
            result += '</tr>';
        }
        return `
<div class="logseq-tools-calendar"><h2>${capitalize(format(new Date(year, month, 1), 'LLLL', { locale: locales[locale] }))} ${year}</h2>
${result}</tbody></table></div>
`;
    };
    const buildCalendarMonths = (startDate, endDate, dateFormat, firstDayOfTheWeek, locale) => {
        let result = '';
        endDate = addMonths(endDate, 1);
        while (!isSameMonth(startDate, endDate)) {
            result += buildCalendarMonth(startDate.getMonth(), startDate.getFullYear(), dateFormat, firstDayOfTheWeek, locale);
            startDate = addMonths(startDate, 1);
        }
        return `<div class="logseq-tools-multiple-calendars">${result}</div>`;
    };
    const loadCss = async (url, callback) => {
        const response = await fetch(url);
        callback(await response.text());
    };

    /* src/MiniCalendar/CalendarCss.svelte generated by Svelte v3.32.3 */
    const file$1 = "src/MiniCalendar/CalendarCss.svelte";

    // (81:8) {:else}
    function create_else_block(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Click here to copy this to clipboard";
    			add_location(span, file$1, 81, 12, 1720);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(81:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (79:8) {#if copied}
    function create_if_block$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "🎉 Copied! Now you can paste it to your css file";
    			add_location(span, file$1, 79, 12, 1630);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(79:8) {#if copied}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let p;
    	let t1;
    	let div;
    	let button;
    	let t2;
    	let pre;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*copied*/ ctx[0]) return create_if_block$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "To make your calendar prettier, add this to your css file:";
    			t1 = space();
    			div = element("div");
    			button = element("button");
    			if_block.c();
    			t2 = space();
    			pre = element("pre");
    			pre.textContent = `${/*calendarCss*/ ctx[1]}`;
    			add_location(p, file$1, 75, 0, 1423);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "btn btn-info mb-3");
    			add_location(button, file$1, 77, 4, 1532);
    			attr_dev(pre, "class", "svelte-z43eqx");
    			add_location(pre, file$1, 84, 4, 1802);
    			attr_dev(div, "class", "css-to-copy d-grid gap-1 svelte-z43eqx");
    			add_location(div, file$1, 76, 0, 1489);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			if_block.m(button, null);
    			append_dev(div, t2);
    			append_dev(div, pre);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*copy*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CalendarCss", slots, []);

    	const calendarCss = `
#contents span.opacity-50 {
    opacity: 0;
}

#contents .logseq-tools-calendar h2 {
    margin-top: -25px;
}

.logseq-tools-multiple-calendars {
    display: flex;
    flex-wrap: wrap;
    padding: 0 15px;
}

:not(#contents) .logseq-tools-multiple-calendars .logseq-tools-calendar {
    flex: 0 50%;
    box-sizing: border-box;
    padding: 0 15px;
}

.logseq-tools-calendar tr {
    background: none !important;
}

.logseq-tools-calendar th,
.logseq-tools-calendar td,
.logseq-tools-calendar tr {
    border: none;
}

.logseq-tools-calendar th,
.logseq-tools-calendar td {
    text-align: center;
}


/* pages from other months */

.logseq-tools-calendar .outofmonth {
    opacity: .3;
}

.logseq-tools-calendar .today {
    font-weight: 900;
    color: var(--ls-link-text-color);
}

.logseq-tools-calendar .page-exists {
    border-bottom: 1px solid var(--ls-link-ref-text-color);
}

.logseq-tools-calendar .today.page-exists {
    border-bottom-color: var(--ls-link-text-color);
}


/* if you want to add different styling for pages that not exists yet */

.logseq-tools-calendar .page-ref:not(.page-exists):not(.today) {
    /* color: violet; */
}
    `;

    	let copied = false;

    	const copy = () => {
    		copyToClipboard(calendarCss);
    		$$invalidate(0, copied = true);

    		setTimeout(
    			() => {
    				$$invalidate(0, copied = false);
    			},
    			4000
    		);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CalendarCss> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		copyToClipboard,
    		calendarCss,
    		copied,
    		copy
    	});

    	$$self.$inject_state = $$props => {
    		if ("copied" in $$props) $$invalidate(0, copied = $$props.copied);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [copied, calendarCss, copy];
    }

    class CalendarCss extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CalendarCss",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/MiniCalendar/Output.svelte generated by Svelte v3.32.3 */
    const file$2 = "src/MiniCalendar/Output.svelte";

    // (22:8) {:else}
    function create_else_block$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Click here to copy generated output to clipboard";
    			add_location(span, file$2, 22, 12, 580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(22:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:8) {#if copied}
    function create_if_block$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "🎉 Copied! Now you can paste it somewhere in your Logseq";
    			add_location(span, file$2, 20, 12, 482);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(20:8) {#if copied}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div1;
    	let button;
    	let t;
    	let div0;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*copied*/ ctx[1]) return create_if_block$2;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			if_block.c();
    			t = space();
    			div0 = element("div");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "btn btn-info mb-3");
    			add_location(button, file$2, 18, 4, 384);
    			attr_dev(div0, "class", "output");
    			add_location(div0, file$2, 26, 4, 675);
    			attr_dev(div1, "class", "d-grid gap-2 mini-calendar-output-wrapper py-4 px-4 svelte-1jcba2h");
    			add_location(div1, file$2, 16, 0, 301);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			if_block.m(button, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);
    			div0.innerHTML = /*calendarHtml*/ ctx[0];

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*copy*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (dirty & /*calendarHtml*/ 1) div0.innerHTML = /*calendarHtml*/ ctx[0];		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Output", slots, []);
    	let { calendarHtml } = $$props;
    	const dispatch = createEventDispatcher();
    	let copied = false;

    	const copy = () => {
    		dispatch("click");
    		$$invalidate(1, copied = true);

    		setTimeout(
    			() => {
    				$$invalidate(1, copied = false);
    			},
    			4000
    		);
    	};

    	const writable_props = ["calendarHtml"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Output> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("calendarHtml" in $$props) $$invalidate(0, calendarHtml = $$props.calendarHtml);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		calendarHtml,
    		dispatch,
    		copied,
    		copy
    	});

    	$$self.$inject_state = $$props => {
    		if ("calendarHtml" in $$props) $$invalidate(0, calendarHtml = $$props.calendarHtml);
    		if ("copied" in $$props) $$invalidate(1, copied = $$props.copied);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [calendarHtml, copied, copy];
    }

    class Output extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { calendarHtml: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Output",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*calendarHtml*/ ctx[0] === undefined && !("calendarHtml" in props)) {
    			console.warn("<Output> was created without expected prop 'calendarHtml'");
    		}
    	}

    	get calendarHtml() {
    		throw new Error("<Output>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set calendarHtml(value) {
    		throw new Error("<Output>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/FirstDayOfTheWeek.svelte generated by Svelte v3.32.3 */
    const file$3 = "src/MiniCalendar/FirstDayOfTheWeek.svelte";

    function create_fragment$4(ctx) {
    	let div2;
    	let div0;
    	let label;
    	let t1;
    	let div1;
    	let select;
    	let option0;
    	let t2;
    	let option0_selected_value;
    	let option1;
    	let t3;
    	let option1_selected_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Start week on";
    			t1 = space();
    			div1 = element("div");
    			select = element("select");
    			option0 = element("option");
    			t2 = text("Sunday\n            ");
    			option1 = element("option");
    			t3 = text("Monday");
    			attr_dev(label, "for", "year");
    			attr_dev(label, "class", "col-form-label");
    			add_location(label, file$3, 13, 8, 328);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$3, 12, 4, 297);
    			option0.__value = "0";
    			option0.value = option0.__value;
    			option0.selected = option0_selected_value = /*firstDayOfTheWeek*/ ctx[0] === 0 ? true : false;
    			add_location(option0, file$3, 17, 12, 510);
    			option1.__value = "1";
    			option1.value = option1.__value;
    			option1.selected = option1_selected_value = /*firstDayOfTheWeek*/ ctx[0] > 0 ? true : false;
    			add_location(option1, file$3, 20, 12, 636);
    			attr_dev(select, "class", "form-select");
    			if (/*firstDayOfTheWeek*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[1].call(select));
    			add_location(select, file$3, 16, 8, 438);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$3, 15, 4, 407);
    			attr_dev(div2, "class", "row g-2 align-items-center");
    			add_location(div2, file$3, 11, 0, 252);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, label);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, select);
    			append_dev(select, option0);
    			append_dev(option0, t2);
    			append_dev(select, option1);
    			append_dev(option1, t3);
    			select_option(select, /*firstDayOfTheWeek*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[1]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*firstDayOfTheWeek*/ 1 && option0_selected_value !== (option0_selected_value = /*firstDayOfTheWeek*/ ctx[0] === 0 ? true : false)) {
    				prop_dev(option0, "selected", option0_selected_value);
    			}

    			if (dirty & /*firstDayOfTheWeek*/ 1 && option1_selected_value !== (option1_selected_value = /*firstDayOfTheWeek*/ ctx[0] > 0 ? true : false)) {
    				prop_dev(option1, "selected", option1_selected_value);
    			}

    			if (dirty & /*firstDayOfTheWeek*/ 1) {
    				select_option(select, /*firstDayOfTheWeek*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FirstDayOfTheWeek", slots, []);
    	const dispatch = createEventDispatcher();
    	let { firstDayOfTheWeek } = $$props;
    	const writable_props = ["firstDayOfTheWeek"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FirstDayOfTheWeek> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		firstDayOfTheWeek = select_value(this);
    		$$invalidate(0, firstDayOfTheWeek);
    	}

    	$$self.$$set = $$props => {
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(0, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		firstDayOfTheWeek
    	});

    	$$self.$inject_state = $$props => {
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(0, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*firstDayOfTheWeek*/ 1) {
    			dispatch("firstDayOfTheWeekChange", {
    				firstDayOfTheWeek: parseInt(firstDayOfTheWeek)
    			});
    		}
    	};

    	return [firstDayOfTheWeek, select_change_handler];
    }

    class FirstDayOfTheWeek extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { firstDayOfTheWeek: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FirstDayOfTheWeek",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*firstDayOfTheWeek*/ ctx[0] === undefined && !("firstDayOfTheWeek" in props)) {
    			console.warn("<FirstDayOfTheWeek> was created without expected prop 'firstDayOfTheWeek'");
    		}
    	}

    	get firstDayOfTheWeek() {
    		throw new Error("<FirstDayOfTheWeek>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstDayOfTheWeek(value) {
    		throw new Error("<FirstDayOfTheWeek>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/DateFormat.svelte generated by Svelte v3.32.3 */
    const file$4 = "src/MiniCalendar/DateFormat.svelte";

    function create_fragment$5(ctx) {
    	let div3;
    	let div0;
    	let label;
    	let t1;
    	let div1;
    	let input;
    	let t2;
    	let div2;
    	let span;
    	let t3;
    	let html_tag;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Daily note title format";
    			t1 = space();
    			div1 = element("div");
    			input = element("input");
    			t2 = space();
    			div2 = element("div");
    			span = element("span");
    			t3 = text("Preview: ");
    			attr_dev(label, "for", "date-format");
    			attr_dev(label, "class", "col-form-label");
    			add_location(label, file$4, 23, 8, 748);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$4, 22, 4, 717);
    			attr_dev(input, "class", "form-control");
    			attr_dev(input, "id", "date-format");
    			add_location(input, file$4, 26, 8, 874);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$4, 25, 4, 843);
    			html_tag = new HtmlTag(null);
    			attr_dev(span, "class", "form-text");
    			add_location(span, file$4, 29, 8, 992);
    			attr_dev(div2, "class", "col-auto");
    			add_location(div2, file$4, 28, 4, 961);
    			attr_dev(div3, "class", "row g-2 align-items-center");
    			add_location(div3, file$4, 21, 0, 672);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, label);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*dateFormat*/ ctx[0]);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, span);
    			append_dev(span, t3);
    			html_tag.m(/*dateFormatPreview*/ ctx[1], span);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dateFormat*/ 1 && input.value !== /*dateFormat*/ ctx[0]) {
    				set_input_value(input, /*dateFormat*/ ctx[0]);
    			}

    			if (dirty & /*dateFormatPreview*/ 2) html_tag.p(/*dateFormatPreview*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("DateFormat", slots, []);
    	const dispatch = createEventDispatcher();
    	let { dateFormat } = $$props;
    	let dateFormatPreview = format(new Date(), dateFormat);
    	const writable_props = ["dateFormat"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DateFormat> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		dateFormat = this.value;
    		$$invalidate(0, dateFormat);
    	}

    	$$self.$$set = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		format,
    		dispatch,
    		dateFormat,
    		dateFormatPreview
    	});

    	$$self.$inject_state = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("dateFormatPreview" in $$props) $$invalidate(1, dateFormatPreview = $$props.dateFormatPreview);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*dateFormat*/ 1) {
    			if (dateFormat.length >= 2) {
    				try {
    					$$invalidate(1, dateFormatPreview = format(new Date(), dateFormat));
    					dispatch("dateFormatChange", { dateFormat });
    				} catch(error) {
    					$$invalidate(1, dateFormatPreview = `<span class="validation-error">${error.message}</span>`);
    				}
    			} else {
    				$$invalidate(1, dateFormatPreview = `<span class="validation-error">This is not a valid format, add more characters</span>`);
    			}
    		}
    	};

    	return [dateFormat, dateFormatPreview, input_input_handler];
    }

    class DateFormat extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { dateFormat: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DateFormat",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dateFormat*/ ctx[0] === undefined && !("dateFormat" in props)) {
    			console.warn("<DateFormat> was created without expected prop 'dateFormat'");
    		}
    	}

    	get dateFormat() {
    		throw new Error("<DateFormat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateFormat(value) {
    		throw new Error("<DateFormat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/LocaleSelector.svelte generated by Svelte v3.32.3 */
    const file$5 = "src/MiniCalendar/LocaleSelector.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (18:12) {#each options as option, i}
    function create_each_block(ctx) {
    	let option;
    	let t0_value = /*option*/ ctx[4] + "";
    	let t0;
    	let t1;
    	let option_selected_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text(t0_value);
    			t1 = space();
    			option.__value = /*option*/ ctx[4];
    			option.value = option.__value;
    			option.selected = option_selected_value = /*locale*/ ctx[0] === /*option*/ ctx[4] ? true : false;
    			add_location(option, file$5, 18, 16, 1043);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*locale, options*/ 3 && option_selected_value !== (option_selected_value = /*locale*/ ctx[0] === /*option*/ ctx[4] ? true : false)) {
    				prop_dev(option, "selected", option_selected_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(18:12) {#each options as option, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div2;
    	let div0;
    	let label;
    	let t1;
    	let div1;
    	let select;
    	let mounted;
    	let dispose;
    	let each_value = /*options*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Locale for month and day name:";
    			t1 = space();
    			div1 = element("div");
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(label, "for", "year");
    			attr_dev(label, "class", "col-form-label");
    			add_location(label, file$5, 13, 8, 811);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$5, 12, 4, 780);
    			attr_dev(select, "class", "form-select");
    			if (/*locale*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
    			add_location(select, file$5, 16, 8, 937);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$5, 15, 4, 906);
    			attr_dev(div2, "class", "row g-2 align-items-center");
    			add_location(div2, file$5, 11, 0, 735);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, label);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*locale*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*options, locale*/ 3) {
    				each_value = /*options*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*locale, options*/ 3) {
    				select_option(select, /*locale*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("LocaleSelector", slots, []);

    	const options = [
    		"af",
    		"ar-DZ",
    		"ar-MA",
    		"ar-SA",
    		"ar",
    		"az",
    		"be",
    		"bg",
    		"bn",
    		"ca",
    		"cs",
    		"cy",
    		"da",
    		"de",
    		"el",
    		"en-AU",
    		"en-CA",
    		"en-GB",
    		"en-IN",
    		"en-NZ",
    		"en-US",
    		"en-ZA",
    		"eo",
    		"es",
    		"et",
    		"eu",
    		"fa-IR",
    		"fi",
    		"fil",
    		"fr-CA",
    		"fr-CH",
    		"fr",
    		"gd",
    		"gl",
    		"gu",
    		"he",
    		"hi",
    		"hr",
    		"hu",
    		"hy",
    		"id",
    		"is",
    		"it",
    		"ja",
    		"ka",
    		"kk",
    		"kn",
    		"ko",
    		"lb",
    		"lt",
    		"lv",
    		"mk",
    		"ms",
    		"mt",
    		"nb",
    		"nl-BE",
    		"nl",
    		"nn",
    		"pl",
    		"pt-BR",
    		"pt",
    		"ro",
    		"ru",
    		"sk",
    		"sl",
    		"sr-Latn",
    		"sr",
    		"sv",
    		"ta",
    		"te",
    		"th",
    		"tr",
    		"ug",
    		"uk",
    		"uz",
    		"vi",
    		"zh-CN",
    		"zh-TW"
    	];

    	const dispatch = createEventDispatcher();
    	let { locale } = $$props;
    	const writable_props = ["locale"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LocaleSelector> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		locale = select_value(this);
    		$$invalidate(0, locale);
    		$$invalidate(1, options);
    	}

    	$$self.$$set = $$props => {
    		if ("locale" in $$props) $$invalidate(0, locale = $$props.locale);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		options,
    		dispatch,
    		locale
    	});

    	$$self.$inject_state = $$props => {
    		if ("locale" in $$props) $$invalidate(0, locale = $$props.locale);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*locale*/ 1) {
    			dispatch("localeChange", { locale });
    		}
    	};

    	return [locale, options, select_change_handler];
    }

    class LocaleSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { locale: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LocaleSelector",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*locale*/ ctx[0] === undefined && !("locale" in props)) {
    			console.warn("<LocaleSelector> was created without expected prop 'locale'");
    		}
    	}

    	get locale() {
    		throw new Error("<LocaleSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set locale(value) {
    		throw new Error("<LocaleSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/Month.svelte generated by Svelte v3.32.3 */
    const file$6 = "src/MiniCalendar/Month.svelte";

    function create_fragment$7(ctx) {
    	let div5;
    	let form;
    	let div4;
    	let div3;
    	let div0;
    	let label;
    	let t1;
    	let div1;
    	let input0;
    	let t2;
    	let div2;
    	let input1;
    	let t3;
    	let firstdayoftheweek;
    	let t4;
    	let dateformat;
    	let t5;
    	let localeselector;
    	let t6;
    	let hr;
    	let t7;
    	let calendarcss;
    	let t8;
    	let div6;
    	let output;
    	let current;
    	let mounted;
    	let dispose;

    	firstdayoftheweek = new FirstDayOfTheWeek({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1]
    			},
    			$$inline: true
    		});

    	firstdayoftheweek.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[7]);

    	dateformat = new DateFormat({
    			props: { dateFormat: /*dateFormat*/ ctx[0] },
    			$$inline: true
    		});

    	dateformat.$on("dateFormatChange", /*onDateFormatChange*/ ctx[6]);

    	localeselector = new LocaleSelector({
    			props: { locale: /*locale*/ ctx[2] },
    			$$inline: true
    		});

    	localeselector.$on("localeChange", /*onLocaleChange*/ ctx[8]);
    	calendarcss = new CalendarCss({ $$inline: true });

    	output = new Output({
    			props: { calendarHtml: /*calendarHtml*/ ctx[5] },
    			$$inline: true
    		});

    	output.$on("click", /*onCopyButtonClick*/ ctx[10]);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			form = element("form");
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Date:";
    			t1 = space();
    			div1 = element("div");
    			input0 = element("input");
    			t2 = space();
    			div2 = element("div");
    			input1 = element("input");
    			t3 = space();
    			create_component(firstdayoftheweek.$$.fragment);
    			t4 = space();
    			create_component(dateformat.$$.fragment);
    			t5 = space();
    			create_component(localeselector.$$.fragment);
    			t6 = space();
    			hr = element("hr");
    			t7 = space();
    			create_component(calendarcss.$$.fragment);
    			t8 = space();
    			div6 = element("div");
    			create_component(output.$$.fragment);
    			attr_dev(label, "for", "month");
    			attr_dev(label, "class", "col-form-label");
    			add_location(label, file$6, 67, 20, 2172);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$6, 66, 16, 2129);
    			attr_dev(input0, "id", "month");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "min", "1");
    			attr_dev(input0, "max", "12");
    			add_location(input0, file$6, 70, 20, 2310);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$6, 69, 16, 2267);
    			attr_dev(input1, "id", "year");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1971");
    			attr_dev(input1, "max", "2050");
    			add_location(input1, file$6, 73, 20, 2502);
    			attr_dev(div2, "class", "col-auto");
    			add_location(div2, file$6, 72, 16, 2459);
    			attr_dev(div3, "class", "row g-2 align-items-center");
    			add_location(div3, file$6, 65, 12, 2072);
    			attr_dev(div4, "class", "row");
    			add_location(div4, file$6, 63, 8, 2041);
    			attr_dev(form, "class", "mt-1 mb-3 mx-3");
    			add_location(form, file$6, 61, 4, 2002);
    			add_location(hr, file$6, 87, 4, 2947);
    			attr_dev(div5, "class", "col-xs-12 col-md-6");
    			add_location(div5, file$6, 59, 0, 1964);
    			attr_dev(div6, "class", "col-xs-12 col-md-6");
    			add_location(div6, file$6, 93, 0, 2982);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, form);
    			append_dev(form, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, label);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*month*/ ctx[4]);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, input1);
    			set_input_value(input1, /*year*/ ctx[3]);
    			append_dev(div4, t3);
    			mount_component(firstdayoftheweek, div4, null);
    			append_dev(div4, t4);
    			mount_component(dateformat, div4, null);
    			append_dev(div4, t5);
    			mount_component(localeselector, div4, null);
    			append_dev(div5, t6);
    			append_dev(div5, hr);
    			append_dev(div5, t7);
    			mount_component(calendarcss, div5, null);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			mount_component(output, div6, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[11]),
    					listen_dev(input0, "change", /*onMonthChange*/ ctx[9], false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[12])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*month*/ 16 && to_number(input0.value) !== /*month*/ ctx[4]) {
    				set_input_value(input0, /*month*/ ctx[4]);
    			}

    			if (dirty & /*year*/ 8 && to_number(input1.value) !== /*year*/ ctx[3]) {
    				set_input_value(input1, /*year*/ ctx[3]);
    			}

    			const firstdayoftheweek_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) firstdayoftheweek_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			firstdayoftheweek.$set(firstdayoftheweek_changes);
    			const dateformat_changes = {};
    			if (dirty & /*dateFormat*/ 1) dateformat_changes.dateFormat = /*dateFormat*/ ctx[0];
    			dateformat.$set(dateformat_changes);
    			const localeselector_changes = {};
    			if (dirty & /*locale*/ 4) localeselector_changes.locale = /*locale*/ ctx[2];
    			localeselector.$set(localeselector_changes);
    			const output_changes = {};
    			if (dirty & /*calendarHtml*/ 32) output_changes.calendarHtml = /*calendarHtml*/ ctx[5];
    			output.$set(output_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(firstdayoftheweek.$$.fragment, local);
    			transition_in(dateformat.$$.fragment, local);
    			transition_in(localeselector.$$.fragment, local);
    			transition_in(calendarcss.$$.fragment, local);
    			transition_in(output.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(firstdayoftheweek.$$.fragment, local);
    			transition_out(dateformat.$$.fragment, local);
    			transition_out(localeselector.$$.fragment, local);
    			transition_out(calendarcss.$$.fragment, local);
    			transition_out(output.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_component(firstdayoftheweek);
    			destroy_component(dateformat);
    			destroy_component(localeselector);
    			destroy_component(calendarcss);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			destroy_component(output);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Month", slots, []);

    	let { dateFormat } = $$props,
    		{ firstDayOfTheWeek } = $$props,
    		{ locale } = $$props;

    	const dispatch = createEventDispatcher();
    	const today = new Date();
    	const thisMonth = today.getMonth() + 1;
    	const thisYear = today.getFullYear();

    	const onDateFormatChange = event => {
    		$$invalidate(0, dateFormat = event.detail.dateFormat);
    		dispatch("dateFormatChange", { dateFormat });
    		updateCalendarHtml();
    	};

    	const onFirstDayOfTheWeekChange = event => {
    		$$invalidate(1, firstDayOfTheWeek = event.detail.firstDayOfTheWeek);
    		dispatch("firstDayOfTheWeekChange", { firstDayOfTheWeek });
    		updateCalendarHtml();
    	};

    	const onLocaleChange = event => {
    		$$invalidate(2, locale = event.detail.locale);
    		dispatch("localeChange", { locale });
    		updateCalendarHtml();
    	};

    	let month = localStorage.getItem("month")
    	? parseInt(localStorage.getItem("month"))
    	: thisMonth;

    	const onMonthChange = event => {
    		localStorage.setItem("month", event.currentTarget.value);
    		updateCalendarHtml();
    	};

    	let year = localStorage.getItem("year")
    	? parseInt(localStorage.getItem("year"))
    	: thisYear;

    	let calendarHtml = buildCalendarMonth(month - 1, year, dateFormat, firstDayOfTheWeek, locale);

    	const updateCalendarHtml = () => {
    		$$invalidate(5, calendarHtml = buildCalendarMonth(month - 1, year, dateFormat, firstDayOfTheWeek, locale));
    	};

    	const onCopyButtonClick = () => {
    		copyToClipboard(buildCalendarMonth(month - 1, year, dateFormat, firstDayOfTheWeek, locale));
    	};

    	const writable_props = ["dateFormat", "firstDayOfTheWeek", "locale"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Month> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		month = to_number(this.value);
    		$$invalidate(4, month);
    	}

    	function input1_input_handler() {
    		year = to_number(this.value);
    		$$invalidate(3, year);
    	}

    	$$self.$$set = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		copyToClipboard,
    		buildCalendarMonth,
    		CalendarCss,
    		Output,
    		FirstDayOfTheWeek,
    		DateFormat,
    		LocaleSelector,
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		dispatch,
    		today,
    		thisMonth,
    		thisYear,
    		onDateFormatChange,
    		onFirstDayOfTheWeekChange,
    		onLocaleChange,
    		month,
    		onMonthChange,
    		year,
    		calendarHtml,
    		updateCalendarHtml,
    		onCopyButtonClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    		if ("month" in $$props) $$invalidate(4, month = $$props.month);
    		if ("year" in $$props) $$invalidate(3, year = $$props.year);
    		if ("calendarHtml" in $$props) $$invalidate(5, calendarHtml = $$props.calendarHtml);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*year*/ 8) {
    			{
    				localStorage.setItem("year", year);
    				updateCalendarHtml();
    			}
    		}
    	};

    	return [
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		year,
    		month,
    		calendarHtml,
    		onDateFormatChange,
    		onFirstDayOfTheWeekChange,
    		onLocaleChange,
    		onMonthChange,
    		onCopyButtonClick,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class Month extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			dateFormat: 0,
    			firstDayOfTheWeek: 1,
    			locale: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Month",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dateFormat*/ ctx[0] === undefined && !("dateFormat" in props)) {
    			console.warn("<Month> was created without expected prop 'dateFormat'");
    		}

    		if (/*firstDayOfTheWeek*/ ctx[1] === undefined && !("firstDayOfTheWeek" in props)) {
    			console.warn("<Month> was created without expected prop 'firstDayOfTheWeek'");
    		}

    		if (/*locale*/ ctx[2] === undefined && !("locale" in props)) {
    			console.warn("<Month> was created without expected prop 'locale'");
    		}
    	}

    	get dateFormat() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateFormat(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get firstDayOfTheWeek() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstDayOfTheWeek(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get locale() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set locale(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/MultipleMonths.svelte generated by Svelte v3.32.3 */
    const file$7 = "src/MiniCalendar/MultipleMonths.svelte";

    function create_fragment$8(ctx) {
    	let div9;
    	let form;
    	let div8;
    	let div3;
    	let div0;
    	let label0;
    	let t1;
    	let div1;
    	let input0;
    	let t2;
    	let div2;
    	let input1;
    	let t3;
    	let div7;
    	let div4;
    	let label1;
    	let t5;
    	let div5;
    	let input2;
    	let t6;
    	let div6;
    	let input3;
    	let t7;
    	let firstdayoftheweek;
    	let t8;
    	let dateformat;
    	let t9;
    	let localeselector;
    	let t10;
    	let hr;
    	let t11;
    	let calendarcss;
    	let t12;
    	let div10;
    	let output;
    	let current;
    	let mounted;
    	let dispose;

    	firstdayoftheweek = new FirstDayOfTheWeek({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1]
    			},
    			$$inline: true
    		});

    	firstdayoftheweek.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[12]);

    	dateformat = new DateFormat({
    			props: { dateFormat: /*dateFormat*/ ctx[0] },
    			$$inline: true
    		});

    	dateformat.$on("dateFormatChange", /*onDateFormatChange*/ ctx[13]);

    	localeselector = new LocaleSelector({
    			props: { locale: /*locale*/ ctx[2] },
    			$$inline: true
    		});

    	localeselector.$on("localeChange", /*onLocaleChange*/ ctx[14]);
    	calendarcss = new CalendarCss({ $$inline: true });

    	output = new Output({
    			props: { calendarHtml: /*calendarHtml*/ ctx[7] },
    			$$inline: true
    		});

    	output.$on("click", /*onCopyButtonClick*/ ctx[15]);

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			form = element("form");
    			div8 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Start date:";
    			t1 = space();
    			div1 = element("div");
    			input0 = element("input");
    			t2 = space();
    			div2 = element("div");
    			input1 = element("input");
    			t3 = space();
    			div7 = element("div");
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "End date:";
    			t5 = space();
    			div5 = element("div");
    			input2 = element("input");
    			t6 = space();
    			div6 = element("div");
    			input3 = element("input");
    			t7 = space();
    			create_component(firstdayoftheweek.$$.fragment);
    			t8 = space();
    			create_component(dateformat.$$.fragment);
    			t9 = space();
    			create_component(localeselector.$$.fragment);
    			t10 = space();
    			hr = element("hr");
    			t11 = space();
    			create_component(calendarcss.$$.fragment);
    			t12 = space();
    			div10 = element("div");
    			create_component(output.$$.fragment);
    			attr_dev(label0, "for", "start-month");
    			attr_dev(label0, "class", "col-form-label");
    			add_location(label0, file$7, 90, 20, 3150);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$7, 89, 16, 3107);
    			attr_dev(input0, "id", "start-month");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "min", "1");
    			attr_dev(input0, "max", "12");
    			add_location(input0, file$7, 93, 20, 3300);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$7, 92, 16, 3257);
    			attr_dev(input1, "id", "start-year");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1971");
    			attr_dev(input1, "max", "2050");
    			add_location(input1, file$7, 96, 20, 3508);
    			attr_dev(div2, "class", "col-auto");
    			add_location(div2, file$7, 95, 16, 3465);
    			attr_dev(div3, "class", "row g-2 align-items-center");
    			add_location(div3, file$7, 88, 12, 3050);
    			attr_dev(label1, "for", "end-month");
    			attr_dev(label1, "class", "col-form-label");
    			add_location(label1, file$7, 102, 20, 3791);
    			attr_dev(div4, "class", "col-auto");
    			add_location(div4, file$7, 101, 16, 3748);
    			attr_dev(input2, "id", "end-month");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "min", "1");
    			attr_dev(input2, "max", "12");
    			add_location(input2, file$7, 105, 20, 3937);
    			attr_dev(div5, "class", "col-auto");
    			add_location(div5, file$7, 104, 16, 3894);
    			attr_dev(input3, "id", "end-year");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "type", "number");
    			attr_dev(input3, "min", "1971");
    			attr_dev(input3, "max", "2050");
    			add_location(input3, file$7, 108, 20, 4139);
    			attr_dev(div6, "class", "col-auto");
    			add_location(div6, file$7, 107, 16, 4096);
    			attr_dev(div7, "class", "row g-2 align-items-center");
    			add_location(div7, file$7, 100, 12, 3691);
    			attr_dev(div8, "class", "row");
    			add_location(div8, file$7, 86, 8, 3019);
    			attr_dev(form, "class", "mt-1 mb-3 mx-3");
    			add_location(form, file$7, 84, 4, 2980);
    			add_location(hr, file$7, 122, 4, 4627);
    			attr_dev(div9, "class", "col-xs-12 col-md-6");
    			add_location(div9, file$7, 82, 0, 2942);
    			attr_dev(div10, "class", "col-xs-12 col-md-6");
    			add_location(div10, file$7, 128, 0, 4662);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, form);
    			append_dev(form, div8);
    			append_dev(div8, div3);
    			append_dev(div3, div0);
    			append_dev(div0, label0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*startMonth*/ ctx[3]);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, input1);
    			set_input_value(input1, /*startYear*/ ctx[4]);
    			append_dev(div8, t3);
    			append_dev(div8, div7);
    			append_dev(div7, div4);
    			append_dev(div4, label1);
    			append_dev(div7, t5);
    			append_dev(div7, div5);
    			append_dev(div5, input2);
    			set_input_value(input2, /*endMonth*/ ctx[5]);
    			append_dev(div7, t6);
    			append_dev(div7, div6);
    			append_dev(div6, input3);
    			set_input_value(input3, /*endYear*/ ctx[6]);
    			append_dev(div8, t7);
    			mount_component(firstdayoftheweek, div8, null);
    			append_dev(div8, t8);
    			mount_component(dateformat, div8, null);
    			append_dev(div8, t9);
    			mount_component(localeselector, div8, null);
    			append_dev(div9, t10);
    			append_dev(div9, hr);
    			append_dev(div9, t11);
    			mount_component(calendarcss, div9, null);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div10, anchor);
    			mount_component(output, div10, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[16]),
    					listen_dev(input0, "change", /*onStartMonthChange*/ ctx[8], false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[17]),
    					listen_dev(input1, "change", /*onStartYearChange*/ ctx[9], false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[18]),
    					listen_dev(input2, "change", /*onEndMonthChange*/ ctx[10], false, false, false),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[19]),
    					listen_dev(input3, "change", /*onEndYearChange*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*startMonth*/ 8 && to_number(input0.value) !== /*startMonth*/ ctx[3]) {
    				set_input_value(input0, /*startMonth*/ ctx[3]);
    			}

    			if (dirty & /*startYear*/ 16 && to_number(input1.value) !== /*startYear*/ ctx[4]) {
    				set_input_value(input1, /*startYear*/ ctx[4]);
    			}

    			if (dirty & /*endMonth*/ 32 && to_number(input2.value) !== /*endMonth*/ ctx[5]) {
    				set_input_value(input2, /*endMonth*/ ctx[5]);
    			}

    			if (dirty & /*endYear*/ 64 && to_number(input3.value) !== /*endYear*/ ctx[6]) {
    				set_input_value(input3, /*endYear*/ ctx[6]);
    			}

    			const firstdayoftheweek_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) firstdayoftheweek_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			firstdayoftheweek.$set(firstdayoftheweek_changes);
    			const dateformat_changes = {};
    			if (dirty & /*dateFormat*/ 1) dateformat_changes.dateFormat = /*dateFormat*/ ctx[0];
    			dateformat.$set(dateformat_changes);
    			const localeselector_changes = {};
    			if (dirty & /*locale*/ 4) localeselector_changes.locale = /*locale*/ ctx[2];
    			localeselector.$set(localeselector_changes);
    			const output_changes = {};
    			if (dirty & /*calendarHtml*/ 128) output_changes.calendarHtml = /*calendarHtml*/ ctx[7];
    			output.$set(output_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(firstdayoftheweek.$$.fragment, local);
    			transition_in(dateformat.$$.fragment, local);
    			transition_in(localeselector.$$.fragment, local);
    			transition_in(calendarcss.$$.fragment, local);
    			transition_in(output.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(firstdayoftheweek.$$.fragment, local);
    			transition_out(dateformat.$$.fragment, local);
    			transition_out(localeselector.$$.fragment, local);
    			transition_out(calendarcss.$$.fragment, local);
    			transition_out(output.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    			destroy_component(firstdayoftheweek);
    			destroy_component(dateformat);
    			destroy_component(localeselector);
    			destroy_component(calendarcss);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div10);
    			destroy_component(output);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MultipleMonths", slots, []);

    	let { dateFormat } = $$props,
    		{ firstDayOfTheWeek } = $$props,
    		{ locale } = $$props;

    	const dispatch = createEventDispatcher();
    	const today = new Date();
    	const thisMonth = today.getMonth() + 1;
    	const thisYear = today.getFullYear();
    	let startMonth = thisMonth;
    	let startYear = thisYear;
    	let startDate = new Date(startYear, startMonth - 1, 1);
    	let endDate = addMonths(startDate, 2);
    	let endMonth = endDate.getMonth() + 1;
    	let endYear = endDate.getFullYear();
    	const startBeforeOrEqualEnd = (startDate, endDate) => isBefore(startDate, endDate) || isSameMonth(startDate, endDate);
    	let calendarHtml = buildCalendarMonths(startDate, endDate, dateFormat, firstDayOfTheWeek, locale);

    	const updateCalendarHtml = () => {
    		if (startBeforeOrEqualEnd(startDate, endDate)) {
    			$$invalidate(7, calendarHtml = buildCalendarMonths(startDate, endDate, dateFormat, firstDayOfTheWeek, locale));
    		} else {
    			$$invalidate(7, calendarHtml = `<span class="validation-error">Start date after end date - are you sure? :)</span>`);
    		}
    	};

    	const onStartMonthChange = event => {
    		startDate = new Date(startYear, event.currentTarget.value - 1, 1);
    		updateCalendarHtml();
    	};

    	const onStartYearChange = event => {
    		startDate = new Date(event.currentTarget.value, startMonth - 1, 1);
    		updateCalendarHtml();
    	};

    	const onEndMonthChange = event => {
    		endDate = new Date(endYear, event.currentTarget.value - 1, 1);
    		updateCalendarHtml();
    	};

    	const onEndYearChange = event => {
    		endDate = new Date(event.currentTarget.value, endMonth - 1, 1);
    		updateCalendarHtml();
    	};

    	const onFirstDayOfTheWeekChange = event => {
    		$$invalidate(1, firstDayOfTheWeek = event.detail.firstDayOfTheWeek);
    		dispatch("firstDayOfTheWeekChange", { firstDayOfTheWeek });
    		updateCalendarHtml();
    	};

    	const onDateFormatChange = event => {
    		$$invalidate(0, dateFormat = event.detail.dateFormat);
    		dispatch("dateFormatChange", { dateFormat });
    		updateCalendarHtml();
    	};

    	const onLocaleChange = event => {
    		$$invalidate(2, locale = event.detail.locale);
    		dispatch("localeChange", { locale });
    		updateCalendarHtml();
    	};

    	const onCopyButtonClick = () => {
    		if (startBeforeOrEqualEnd(startDate, endDate)) {
    			copyToClipboard(buildCalendarMonths(startDate, endDate, dateFormat, firstDayOfTheWeek, locale));
    		} else {
    			alert("Start date after end date - are you sure? :)");
    		}
    	};

    	const writable_props = ["dateFormat", "firstDayOfTheWeek", "locale"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MultipleMonths> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		startMonth = to_number(this.value);
    		$$invalidate(3, startMonth);
    	}

    	function input1_input_handler() {
    		startYear = to_number(this.value);
    		$$invalidate(4, startYear);
    	}

    	function input2_input_handler() {
    		endMonth = to_number(this.value);
    		$$invalidate(5, endMonth);
    	}

    	function input3_input_handler() {
    		endYear = to_number(this.value);
    		$$invalidate(6, endYear);
    	}

    	$$self.$$set = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		addMonths,
    		isBefore,
    		isSameMonth,
    		copyToClipboard,
    		buildCalendarMonths,
    		CalendarCss,
    		Output,
    		FirstDayOfTheWeek,
    		DateFormat,
    		LocaleSelector,
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		dispatch,
    		today,
    		thisMonth,
    		thisYear,
    		startMonth,
    		startYear,
    		startDate,
    		endDate,
    		endMonth,
    		endYear,
    		startBeforeOrEqualEnd,
    		calendarHtml,
    		updateCalendarHtml,
    		onStartMonthChange,
    		onStartYearChange,
    		onEndMonthChange,
    		onEndYearChange,
    		onFirstDayOfTheWeekChange,
    		onDateFormatChange,
    		onLocaleChange,
    		onCopyButtonClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    		if ("startMonth" in $$props) $$invalidate(3, startMonth = $$props.startMonth);
    		if ("startYear" in $$props) $$invalidate(4, startYear = $$props.startYear);
    		if ("startDate" in $$props) startDate = $$props.startDate;
    		if ("endDate" in $$props) endDate = $$props.endDate;
    		if ("endMonth" in $$props) $$invalidate(5, endMonth = $$props.endMonth);
    		if ("endYear" in $$props) $$invalidate(6, endYear = $$props.endYear);
    		if ("calendarHtml" in $$props) $$invalidate(7, calendarHtml = $$props.calendarHtml);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		startMonth,
    		startYear,
    		endMonth,
    		endYear,
    		calendarHtml,
    		onStartMonthChange,
    		onStartYearChange,
    		onEndMonthChange,
    		onEndYearChange,
    		onFirstDayOfTheWeekChange,
    		onDateFormatChange,
    		onLocaleChange,
    		onCopyButtonClick,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler
    	];
    }

    class MultipleMonths extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			dateFormat: 0,
    			firstDayOfTheWeek: 1,
    			locale: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultipleMonths",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dateFormat*/ ctx[0] === undefined && !("dateFormat" in props)) {
    			console.warn("<MultipleMonths> was created without expected prop 'dateFormat'");
    		}

    		if (/*firstDayOfTheWeek*/ ctx[1] === undefined && !("firstDayOfTheWeek" in props)) {
    			console.warn("<MultipleMonths> was created without expected prop 'firstDayOfTheWeek'");
    		}

    		if (/*locale*/ ctx[2] === undefined && !("locale" in props)) {
    			console.warn("<MultipleMonths> was created without expected prop 'locale'");
    		}
    	}

    	get dateFormat() {
    		throw new Error("<MultipleMonths>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateFormat(value) {
    		throw new Error("<MultipleMonths>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get firstDayOfTheWeek() {
    		throw new Error("<MultipleMonths>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstDayOfTheWeek(value) {
    		throw new Error("<MultipleMonths>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get locale() {
    		throw new Error("<MultipleMonths>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set locale(value) {
    		throw new Error("<MultipleMonths>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar/Year.svelte generated by Svelte v3.32.3 */
    const file$8 = "src/MiniCalendar/Year.svelte";

    function create_fragment$9(ctx) {
    	let div4;
    	let form;
    	let div3;
    	let div2;
    	let div0;
    	let label;
    	let t1;
    	let div1;
    	let input;
    	let t2;
    	let firstdayoftheweek;
    	let t3;
    	let dateformat;
    	let t4;
    	let localeselector;
    	let t5;
    	let hr;
    	let t6;
    	let calendarcss;
    	let t7;
    	let div5;
    	let output;
    	let current;
    	let mounted;
    	let dispose;

    	firstdayoftheweek = new FirstDayOfTheWeek({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1]
    			},
    			$$inline: true
    		});

    	firstdayoftheweek.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[6]);

    	dateformat = new DateFormat({
    			props: { dateFormat: /*dateFormat*/ ctx[0] },
    			$$inline: true
    		});

    	dateformat.$on("dateFormatChange", /*onDateFormatChange*/ ctx[7]);

    	localeselector = new LocaleSelector({
    			props: { locale: /*locale*/ ctx[2] },
    			$$inline: true
    		});

    	localeselector.$on("localeChange", /*onLocaleChange*/ ctx[8]);
    	calendarcss = new CalendarCss({ $$inline: true });

    	output = new Output({
    			props: { calendarHtml: /*calendarHtml*/ ctx[4] },
    			$$inline: true
    		});

    	output.$on("click", /*onCopyButtonClick*/ ctx[9]);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			form = element("form");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Year:";
    			t1 = space();
    			div1 = element("div");
    			input = element("input");
    			t2 = space();
    			create_component(firstdayoftheweek.$$.fragment);
    			t3 = space();
    			create_component(dateformat.$$.fragment);
    			t4 = space();
    			create_component(localeselector.$$.fragment);
    			t5 = space();
    			hr = element("hr");
    			t6 = space();
    			create_component(calendarcss.$$.fragment);
    			t7 = space();
    			div5 = element("div");
    			create_component(output.$$.fragment);
    			attr_dev(label, "for", "year");
    			attr_dev(label, "class", "col-form-label");
    			add_location(label, file$8, 54, 20, 1834);
    			attr_dev(div0, "class", "col-auto");
    			add_location(div0, file$8, 53, 16, 1791);
    			attr_dev(input, "id", "year");
    			attr_dev(input, "class", "form-control");
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", "1971");
    			attr_dev(input, "max", "2050");
    			add_location(input, file$8, 57, 20, 1971);
    			attr_dev(div1, "class", "col-auto");
    			add_location(div1, file$8, 56, 16, 1928);
    			attr_dev(div2, "class", "row g-2 align-items-center");
    			add_location(div2, file$8, 52, 12, 1734);
    			attr_dev(div3, "class", "row");
    			add_location(div3, file$8, 50, 8, 1703);
    			attr_dev(form, "class", "mt-1 mb-3 mx-3");
    			add_location(form, file$8, 48, 4, 1664);
    			add_location(hr, file$8, 71, 4, 2425);
    			attr_dev(div4, "class", "col-xs-12 col-md-6");
    			add_location(div4, file$8, 46, 0, 1626);
    			attr_dev(div5, "class", "col-xs-12 col-md-6");
    			add_location(div5, file$8, 77, 0, 2460);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, form);
    			append_dev(form, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, label);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*year*/ ctx[3]);
    			append_dev(div3, t2);
    			mount_component(firstdayoftheweek, div3, null);
    			append_dev(div3, t3);
    			mount_component(dateformat, div3, null);
    			append_dev(div3, t4);
    			mount_component(localeselector, div3, null);
    			append_dev(div4, t5);
    			append_dev(div4, hr);
    			append_dev(div4, t6);
    			mount_component(calendarcss, div4, null);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			mount_component(output, div5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[10]),
    					listen_dev(input, "change", /*onYearChange*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*year*/ 8 && to_number(input.value) !== /*year*/ ctx[3]) {
    				set_input_value(input, /*year*/ ctx[3]);
    			}

    			const firstdayoftheweek_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) firstdayoftheweek_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			firstdayoftheweek.$set(firstdayoftheweek_changes);
    			const dateformat_changes = {};
    			if (dirty & /*dateFormat*/ 1) dateformat_changes.dateFormat = /*dateFormat*/ ctx[0];
    			dateformat.$set(dateformat_changes);
    			const localeselector_changes = {};
    			if (dirty & /*locale*/ 4) localeselector_changes.locale = /*locale*/ ctx[2];
    			localeselector.$set(localeselector_changes);
    			const output_changes = {};
    			if (dirty & /*calendarHtml*/ 16) output_changes.calendarHtml = /*calendarHtml*/ ctx[4];
    			output.$set(output_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(firstdayoftheweek.$$.fragment, local);
    			transition_in(dateformat.$$.fragment, local);
    			transition_in(localeselector.$$.fragment, local);
    			transition_in(calendarcss.$$.fragment, local);
    			transition_in(output.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(firstdayoftheweek.$$.fragment, local);
    			transition_out(dateformat.$$.fragment, local);
    			transition_out(localeselector.$$.fragment, local);
    			transition_out(calendarcss.$$.fragment, local);
    			transition_out(output.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(firstdayoftheweek);
    			destroy_component(dateformat);
    			destroy_component(localeselector);
    			destroy_component(calendarcss);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			destroy_component(output);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Year", slots, []);

    	let { dateFormat } = $$props,
    		{ firstDayOfTheWeek } = $$props,
    		{ locale } = $$props;

    	const dispatch = createEventDispatcher();
    	let year = new Date().getFullYear();

    	const onYearChange = event => {
    		updateCalendarHtml();
    	};

    	let calendarHtml = buildCalendarMonths(new Date(year, 0, 1), new Date(year, 11, 1), dateFormat, firstDayOfTheWeek, locale);

    	const updateCalendarHtml = () => {
    		$$invalidate(4, calendarHtml = buildCalendarMonths(new Date(year, 0, 1), new Date(year, 11, 1), dateFormat, firstDayOfTheWeek, locale));
    	};

    	const onFirstDayOfTheWeekChange = event => {
    		$$invalidate(1, firstDayOfTheWeek = event.detail.firstDayOfTheWeek);
    		dispatch("firstDayOfTheWeekChange", { firstDayOfTheWeek });
    		updateCalendarHtml();
    	};

    	const onDateFormatChange = event => {
    		$$invalidate(0, dateFormat = event.detail.dateFormat);
    		dispatch("dateFormatChange", { dateFormat });
    		updateCalendarHtml();
    	};

    	const onLocaleChange = event => {
    		$$invalidate(2, locale = event.detail.locale);
    		dispatch("localeChange", { locale });
    		updateCalendarHtml();
    	};

    	const onCopyButtonClick = () => {
    		copyToClipboard(buildCalendarMonths(new Date(year, 0, 1), new Date(year, 11, 1), dateFormat, firstDayOfTheWeek, locale));
    	};

    	const writable_props = ["dateFormat", "firstDayOfTheWeek", "locale"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Year> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		year = to_number(this.value);
    		$$invalidate(3, year);
    	}

    	$$self.$$set = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		copyToClipboard,
    		buildCalendarMonths,
    		CalendarCss,
    		Output,
    		FirstDayOfTheWeek,
    		DateFormat,
    		LocaleSelector,
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		dispatch,
    		year,
    		onYearChange,
    		calendarHtml,
    		updateCalendarHtml,
    		onFirstDayOfTheWeekChange,
    		onDateFormatChange,
    		onLocaleChange,
    		onCopyButtonClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("dateFormat" in $$props) $$invalidate(0, dateFormat = $$props.dateFormat);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
    		if ("year" in $$props) $$invalidate(3, year = $$props.year);
    		if ("calendarHtml" in $$props) $$invalidate(4, calendarHtml = $$props.calendarHtml);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dateFormat,
    		firstDayOfTheWeek,
    		locale,
    		year,
    		calendarHtml,
    		onYearChange,
    		onFirstDayOfTheWeekChange,
    		onDateFormatChange,
    		onLocaleChange,
    		onCopyButtonClick,
    		input_input_handler
    	];
    }

    class Year extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			dateFormat: 0,
    			firstDayOfTheWeek: 1,
    			locale: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Year",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dateFormat*/ ctx[0] === undefined && !("dateFormat" in props)) {
    			console.warn("<Year> was created without expected prop 'dateFormat'");
    		}

    		if (/*firstDayOfTheWeek*/ ctx[1] === undefined && !("firstDayOfTheWeek" in props)) {
    			console.warn("<Year> was created without expected prop 'firstDayOfTheWeek'");
    		}

    		if (/*locale*/ ctx[2] === undefined && !("locale" in props)) {
    			console.warn("<Year> was created without expected prop 'locale'");
    		}
    	}

    	get dateFormat() {
    		throw new Error("<Year>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateFormat(value) {
    		throw new Error("<Year>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get firstDayOfTheWeek() {
    		throw new Error("<Year>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstDayOfTheWeek(value) {
    		throw new Error("<Year>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get locale() {
    		throw new Error("<Year>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set locale(value) {
    		throw new Error("<Year>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/MiniCalendar.svelte generated by Svelte v3.32.3 */
    const file$9 = "src/MiniCalendar.svelte";

    // (67:8) {:else}
    function create_else_block$2(ctx) {
    	let year;
    	let current;

    	year = new Year({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1],
    				dateFormat: /*dateFormat*/ ctx[2],
    				locale: /*locale*/ ctx[3]
    			},
    			$$inline: true
    		});

    	year.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[5]);
    	year.$on("dateFormatChange", /*onDateFormatChange*/ ctx[6]);
    	year.$on("localeChange", /*onLocaleChange*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(year.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(year, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const year_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) year_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			if (dirty & /*dateFormat*/ 4) year_changes.dateFormat = /*dateFormat*/ ctx[2];
    			if (dirty & /*locale*/ 8) year_changes.locale = /*locale*/ ctx[3];
    			year.$set(year_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(year.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(year.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(year, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(67:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:55) 
    function create_if_block_1(ctx) {
    	let multiplemonths;
    	let current;

    	multiplemonths = new MultipleMonths({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1],
    				dateFormat: /*dateFormat*/ ctx[2],
    				locale: /*locale*/ ctx[3]
    			},
    			$$inline: true
    		});

    	multiplemonths.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[5]);
    	multiplemonths.$on("dateFormatChange", /*onDateFormatChange*/ ctx[6]);
    	multiplemonths.$on("localeChange", /*onLocaleChange*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(multiplemonths.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(multiplemonths, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiplemonths_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) multiplemonths_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			if (dirty & /*dateFormat*/ 4) multiplemonths_changes.dateFormat = /*dateFormat*/ ctx[2];
    			if (dirty & /*locale*/ 8) multiplemonths_changes.locale = /*locale*/ ctx[3];
    			multiplemonths.$set(multiplemonths_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiplemonths.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiplemonths.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(multiplemonths, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(58:55) ",
    		ctx
    	});

    	return block;
    }

    // (49:8) {#if calendarOption === 'month'}
    function create_if_block$3(ctx) {
    	let month;
    	let current;

    	month = new Month({
    			props: {
    				firstDayOfTheWeek: /*firstDayOfTheWeek*/ ctx[1],
    				dateFormat: /*dateFormat*/ ctx[2],
    				locale: /*locale*/ ctx[3]
    			},
    			$$inline: true
    		});

    	month.$on("firstDayOfTheWeekChange", /*onFirstDayOfTheWeekChange*/ ctx[5]);
    	month.$on("dateFormatChange", /*onDateFormatChange*/ ctx[6]);
    	month.$on("localeChange", /*onLocaleChange*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(month.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(month, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const month_changes = {};
    			if (dirty & /*firstDayOfTheWeek*/ 2) month_changes.firstDayOfTheWeek = /*firstDayOfTheWeek*/ ctx[1];
    			if (dirty & /*dateFormat*/ 4) month_changes.dateFormat = /*dateFormat*/ ctx[2];
    			if (dirty & /*locale*/ 8) month_changes.locale = /*locale*/ ctx[3];
    			month.$set(month_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(month.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(month.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(month, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(49:8) {#if calendarOption === 'month'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div1;
    	let h4;
    	let t1;
    	let ul;
    	let li0;
    	let span0;
    	let t2;
    	let span0_class_value;
    	let t3;
    	let li1;
    	let span1;
    	let t4;
    	let span1_class_value;
    	let t5;
    	let li2;
    	let span2;
    	let t6;
    	let span2_class_value;
    	let t7;
    	let div0;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$3, create_if_block_1, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*calendarOption*/ ctx[0] === "month") return 0;
    		if (/*calendarOption*/ ctx[0] === "multiple months") return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "I want to generate...";
    			t1 = space();
    			ul = element("ul");
    			li0 = element("li");
    			span0 = element("span");
    			t2 = text("a month");
    			t3 = space();
    			li1 = element("li");
    			span1 = element("span");
    			t4 = text("multiple months");
    			t5 = space();
    			li2 = element("li");
    			span2 = element("span");
    			t6 = text("a year");
    			t7 = space();
    			div0 = element("div");
    			if_block.c();
    			attr_dev(h4, "class", "mb-4");
    			add_location(h4, file$9, 33, 4, 1315);
    			attr_dev(span0, "class", span0_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "month" ? "active" : ""}`) + " svelte-88iv36"));
    			add_location(span0, file$9, 37, 12, 1481);
    			attr_dev(li0, "class", "nav-item svelte-88iv36");
    			add_location(li0, file$9, 36, 8, 1398);

    			attr_dev(span1, "class", span1_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "multiple months"
			? "active"
			: ""}`) + " svelte-88iv36"));

    			add_location(span1, file$9, 40, 12, 1682);
    			attr_dev(li1, "class", "nav-item svelte-88iv36");
    			add_location(li1, file$9, 39, 8, 1589);
    			attr_dev(span2, "class", span2_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "year" ? "active" : ""}`) + " svelte-88iv36"));
    			add_location(span2, file$9, 43, 12, 1890);
    			attr_dev(li2, "class", "nav-item svelte-88iv36");
    			add_location(li2, file$9, 42, 8, 1808);
    			attr_dev(ul, "class", "nav nav-tabs");
    			add_location(ul, file$9, 35, 4, 1364);
    			attr_dev(div0, "class", "row");
    			add_location(div0, file$9, 47, 4, 2003);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$9, 31, 0, 1286);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h4);
    			append_dev(div1, t1);
    			append_dev(div1, ul);
    			append_dev(ul, li0);
    			append_dev(li0, span0);
    			append_dev(span0, t2);
    			append_dev(ul, t3);
    			append_dev(ul, li1);
    			append_dev(li1, span1);
    			append_dev(span1, t4);
    			append_dev(ul, t5);
    			append_dev(ul, li2);
    			append_dev(li2, span2);
    			append_dev(span2, t6);
    			append_dev(div1, t7);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(li0, "click", /*click_handler*/ ctx[8], false, false, false),
    					listen_dev(li1, "click", /*click_handler_1*/ ctx[9], false, false, false),
    					listen_dev(li2, "click", /*click_handler_2*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*calendarOption*/ 1 && span0_class_value !== (span0_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "month" ? "active" : ""}`) + " svelte-88iv36"))) {
    				attr_dev(span0, "class", span0_class_value);
    			}

    			if (!current || dirty & /*calendarOption*/ 1 && span1_class_value !== (span1_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "multiple months"
			? "active"
			: ""}`) + " svelte-88iv36"))) {
    				attr_dev(span1, "class", span1_class_value);
    			}

    			if (!current || dirty & /*calendarOption*/ 1 && span2_class_value !== (span2_class_value = "" + (null_to_empty(`nav-link ${/*calendarOption*/ ctx[0] === "year" ? "active" : ""}`) + " svelte-88iv36"))) {
    				attr_dev(span2, "class", span2_class_value);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MiniCalendar", slots, []);

    	let calendarOption = localStorage.getItem("calendarOption")
    	? localStorage.getItem("calendarOption")
    	: "month";

    	const onCalendarOptionChange = option => {
    		$$invalidate(0, calendarOption = option);
    		localStorage.setItem("calendarOption", calendarOption);
    	};

    	let firstDayOfTheWeek = localStorage.getItem("firstDayOfTheWeek")
    	? parseInt(localStorage.getItem("firstDayOfTheWeek"))
    	: 1; // 0: sunday; 1: monday

    	const onFirstDayOfTheWeekChange = event => {
    		$$invalidate(1, firstDayOfTheWeek = event.detail.firstDayOfTheWeek);
    		localStorage.setItem("firstDayOfTheWeek", firstDayOfTheWeek);
    	};

    	let dateFormat = localStorage.getItem("dateFormat")
    	? localStorage.getItem("dateFormat")
    	: "MMM do, yyyy";

    	const onDateFormatChange = event => {
    		$$invalidate(2, dateFormat = event.detail.dateFormat);
    		localStorage.setItem("dateFormat", dateFormat);
    	};

    	let locale = localStorage.getItem("locale")
    	? localStorage.getItem("locale")
    	: "en-US";

    	const onLocaleChange = event => {
    		$$invalidate(3, locale = event.detail.locale);
    		localStorage.setItem("locale", locale);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MiniCalendar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => onCalendarOptionChange("month");
    	const click_handler_1 = () => onCalendarOptionChange("multiple months");
    	const click_handler_2 = () => onCalendarOptionChange("year");

    	$$self.$capture_state = () => ({
    		Month,
    		MultipleMonths,
    		Year,
    		calendarOption,
    		onCalendarOptionChange,
    		firstDayOfTheWeek,
    		onFirstDayOfTheWeekChange,
    		dateFormat,
    		onDateFormatChange,
    		locale,
    		onLocaleChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("calendarOption" in $$props) $$invalidate(0, calendarOption = $$props.calendarOption);
    		if ("firstDayOfTheWeek" in $$props) $$invalidate(1, firstDayOfTheWeek = $$props.firstDayOfTheWeek);
    		if ("dateFormat" in $$props) $$invalidate(2, dateFormat = $$props.dateFormat);
    		if ("locale" in $$props) $$invalidate(3, locale = $$props.locale);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		calendarOption,
    		firstDayOfTheWeek,
    		dateFormat,
    		locale,
    		onCalendarOptionChange,
    		onFirstDayOfTheWeekChange,
    		onDateFormatChange,
    		onLocaleChange,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class MiniCalendar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MiniCalendar",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/BujoThemes.svelte generated by Svelte v3.32.3 */
    const file$a = "src/BujoThemes.svelte";

    // (183:20) {:else}
    function create_else_block$3(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Click here to copy this to clipboard";
    			add_location(span, file$a, 183, 24, 8222);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(183:20) {:else}",
    		ctx
    	});

    	return block;
    }

    // (181:20) {#if copied}
    function create_if_block$4(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "🎉 Copied! Now you can paste it to your css file";
    			add_location(span, file$a, 181, 24, 8108);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(181:20) {#if copied}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div10;
    	let h40;
    	let t1;
    	let div8;
    	let div3;
    	let div2;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let div1;
    	let div0;
    	let input0;
    	let t3;
    	let label0;
    	let t5;
    	let div7;
    	let div6;
    	let img1;
    	let img1_src_value;
    	let t6;
    	let div5;
    	let div4;
    	let input1;
    	let t7;
    	let label1;
    	let t9;
    	let div9;
    	let input2;
    	let t10;
    	let label2;
    	let t12;
    	let div21;
    	let h41;
    	let t14;
    	let div19;
    	let div14;
    	let div13;
    	let img2;
    	let img2_src_value;
    	let t15;
    	let div12;
    	let div11;
    	let input3;
    	let t16;
    	let label3;
    	let t18;
    	let div18;
    	let div17;
    	let img3;
    	let img3_src_value;
    	let t19;
    	let div16;
    	let div15;
    	let input4;
    	let t20;
    	let label4;
    	let t22;
    	let div20;
    	let input5;
    	let t23;
    	let label5;
    	let t25;
    	let div28;
    	let div27;
    	let div24;
    	let p;
    	let t27;
    	let div22;
    	let input6;
    	let t28;
    	let label6;
    	let t30;
    	let div23;
    	let input7;
    	let t31;
    	let label7;
    	let t33;
    	let div26;
    	let div25;
    	let button;
    	let t34;
    	let pre;
    	let t35;
    	let t36;
    	let div31;
    	let div30;
    	let div29;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*copied*/ ctx[9]) return create_if_block$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Light theme I like the most...";
    			t1 = space();
    			div8 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			img0 = element("img");
    			t2 = space();
    			div1 = element("div");
    			div0 = element("div");
    			input0 = element("input");
    			t3 = space();
    			label0 = element("label");
    			label0.textContent = "White";
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			img1 = element("img");
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			input1 = element("input");
    			t7 = space();
    			label1 = element("label");
    			label1.textContent = "Sepia";
    			t9 = space();
    			div9 = element("div");
    			input2 = element("input");
    			t10 = space();
    			label2 = element("label");
    			label2.textContent = "With dots in background?";
    			t12 = space();
    			div21 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Dark theme I like the most...";
    			t14 = space();
    			div19 = element("div");
    			div14 = element("div");
    			div13 = element("div");
    			img2 = element("img");
    			t15 = space();
    			div12 = element("div");
    			div11 = element("div");
    			input3 = element("input");
    			t16 = space();
    			label3 = element("label");
    			label3.textContent = "Black";
    			t18 = space();
    			div18 = element("div");
    			div17 = element("div");
    			img3 = element("img");
    			t19 = space();
    			div16 = element("div");
    			div15 = element("div");
    			input4 = element("input");
    			t20 = space();
    			label4 = element("label");
    			label4.textContent = "Coffee";
    			t22 = space();
    			div20 = element("div");
    			input5 = element("input");
    			t23 = space();
    			label5 = element("label");
    			label5.textContent = "With dots in background?";
    			t25 = space();
    			div28 = element("div");
    			div27 = element("div");
    			div24 = element("div");
    			p = element("p");
    			p.textContent = "There are two ways to get these themes. You can either copy entire styles to your custom css file, or copy only links to styles. Use first option if you're sometimes offline and you want to have these themes always available. Use the second if you're always online - you'll get automatically all updates and fixes.";
    			t27 = space();
    			div22 = element("div");
    			input6 = element("input");
    			t28 = space();
    			label6 = element("label");
    			label6.textContent = "I'm working offline";
    			t30 = space();
    			div23 = element("div");
    			input7 = element("input");
    			t31 = space();
    			label7 = element("label");
    			label7.textContent = "I'm always online";
    			t33 = space();
    			div26 = element("div");
    			div25 = element("div");
    			button = element("button");
    			if_block.c();
    			t34 = space();
    			pre = element("pre");
    			t35 = text(/*css*/ ctx[8]);
    			t36 = space();
    			div31 = element("div");
    			div30 = element("div");
    			div29 = element("div");
    			add_location(h40, file$a, 75, 4, 3285);
    			if (img0.src !== (img0_src_value = "images/logseq-light-white.jpg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "class", "card-img-top svelte-1m96ld5");
    			attr_dev(img0, "alt", "White theme");
    			add_location(img0, file$a, 80, 16, 3448);
    			attr_dev(input0, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input0, "type", "radio");
    			attr_dev(input0, "name", "white");
    			attr_dev(input0, "id", "white");
    			input0.__value = "white";
    			input0.value = input0.__value;
    			/*$$binding_groups*/ ctx[15][0].push(input0);
    			add_location(input0, file$a, 83, 24, 3680);
    			attr_dev(label0, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label0, "for", "white");
    			add_location(label0, file$a, 84, 24, 3830);
    			attr_dev(div0, "class", "form-check");
    			add_location(div0, file$a, 82, 20, 3631);
    			attr_dev(div1, "class", "card-body");
    			add_location(div1, file$a, 81, 16, 3587);
    			attr_dev(div2, "class", "card");
    			set_style(div2, "width", "22rem");
    			add_location(div2, file$a, 79, 12, 3391);
    			attr_dev(div3, "class", "col-auto");
    			add_location(div3, file$a, 78, 8, 3356);
    			if (img1.src !== (img1_src_value = "images/logseq-light-sepia.jpg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "class", "card-img-top svelte-1m96ld5");
    			attr_dev(img1, "alt", "Sepia theme");
    			add_location(img1, file$a, 93, 16, 4126);
    			attr_dev(input1, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input1, "type", "radio");
    			attr_dev(input1, "name", "sepia");
    			attr_dev(input1, "id", "sepia");
    			input1.__value = "sepia";
    			input1.value = input1.__value;
    			/*$$binding_groups*/ ctx[15][0].push(input1);
    			add_location(input1, file$a, 96, 24, 4358);
    			attr_dev(label1, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label1, "for", "sepia");
    			add_location(label1, file$a, 97, 24, 4508);
    			attr_dev(div4, "class", "form-check");
    			add_location(div4, file$a, 95, 20, 4309);
    			attr_dev(div5, "class", "card-body");
    			add_location(div5, file$a, 94, 16, 4265);
    			attr_dev(div6, "class", "card");
    			set_style(div6, "width", "22rem");
    			add_location(div6, file$a, 92, 12, 4069);
    			attr_dev(div7, "class", "col-auto");
    			add_location(div7, file$a, 91, 8, 4034);
    			attr_dev(div8, "class", "row");
    			add_location(div8, file$a, 77, 4, 3330);
    			attr_dev(input2, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "id", "lightDots");
    			add_location(input2, file$a, 108, 8, 4771);
    			attr_dev(label2, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label2, "for", "lightDots");
    			add_location(label2, file$a, 109, 8, 4889);
    			attr_dev(div9, "class", "form-check form-switch my-3");
    			add_location(div9, file$a, 107, 4, 4721);
    			attr_dev(div10, "class", "mb-5");
    			add_location(div10, file$a, 73, 0, 3261);
    			add_location(h41, file$a, 116, 4, 5014);
    			if (img2.src !== (img2_src_value = "images/logseq-dark-black.jpg")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "class", "card-img-top svelte-1m96ld5");
    			attr_dev(img2, "alt", "Black theme");
    			add_location(img2, file$a, 121, 16, 5176);
    			attr_dev(input3, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input3, "type", "radio");
    			attr_dev(input3, "name", "black");
    			attr_dev(input3, "id", "black");
    			input3.__value = "black";
    			input3.value = input3.__value;
    			/*$$binding_groups*/ ctx[15][1].push(input3);
    			add_location(input3, file$a, 124, 24, 5406);
    			attr_dev(label3, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label3, "for", "black");
    			add_location(label3, file$a, 125, 24, 5555);
    			attr_dev(div11, "class", "form-check");
    			add_location(div11, file$a, 123, 20, 5357);
    			attr_dev(div12, "class", "card-body");
    			add_location(div12, file$a, 122, 16, 5313);
    			attr_dev(div13, "class", "card");
    			set_style(div13, "width", "22rem");
    			add_location(div13, file$a, 120, 12, 5119);
    			attr_dev(div14, "class", "col-auto");
    			add_location(div14, file$a, 119, 8, 5084);
    			if (img3.src !== (img3_src_value = "images/logseq-dark-coffee.jpg")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "class", "card-img-top svelte-1m96ld5");
    			attr_dev(img3, "alt", "Coffee theme");
    			add_location(img3, file$a, 134, 16, 5851);
    			attr_dev(input4, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input4, "type", "radio");
    			attr_dev(input4, "name", "coffee");
    			attr_dev(input4, "id", "coffee");
    			input4.__value = "coffee";
    			input4.value = input4.__value;
    			/*$$binding_groups*/ ctx[15][1].push(input4);
    			add_location(input4, file$a, 137, 24, 6084);
    			attr_dev(label4, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label4, "for", "coffee");
    			add_location(label4, file$a, 138, 24, 6236);
    			attr_dev(div15, "class", "form-check");
    			add_location(div15, file$a, 136, 20, 6035);
    			attr_dev(div16, "class", "card-body");
    			add_location(div16, file$a, 135, 16, 5991);
    			attr_dev(div17, "class", "card");
    			set_style(div17, "width", "22rem");
    			add_location(div17, file$a, 133, 12, 5794);
    			attr_dev(div18, "class", "col-auto");
    			add_location(div18, file$a, 132, 8, 5759);
    			attr_dev(div19, "class", "row");
    			add_location(div19, file$a, 118, 4, 5058);
    			attr_dev(input5, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input5, "type", "checkbox");
    			attr_dev(input5, "id", "darkDots");
    			add_location(input5, file$a, 148, 8, 6500);
    			attr_dev(label5, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label5, "for", "darkDots");
    			add_location(label5, file$a, 149, 8, 6616);
    			attr_dev(div20, "class", "form-check form-switch my-3");
    			add_location(div20, file$a, 147, 4, 6450);
    			attr_dev(div21, "class", "mb-5");
    			add_location(div21, file$a, 114, 0, 4990);
    			add_location(p, file$a, 161, 12, 6834);
    			attr_dev(input6, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input6, "type", "radio");
    			attr_dev(input6, "name", "offlineOrOnline");
    			attr_dev(input6, "id", "offline");
    			input6.__value = "offline";
    			input6.value = input6.__value;
    			/*$$binding_groups*/ ctx[15][2].push(input6);
    			add_location(input6, file$a, 164, 16, 7210);
    			attr_dev(label6, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label6, "for", "offline");
    			add_location(label6, file$a, 165, 16, 7376);
    			attr_dev(div22, "class", "form-check");
    			add_location(div22, file$a, 163, 12, 7169);
    			attr_dev(input7, "class", "form-check-input svelte-1m96ld5");
    			attr_dev(input7, "type", "radio");
    			attr_dev(input7, "name", "offlineOrOnline");
    			attr_dev(input7, "id", "online");
    			input7.__value = "online";
    			input7.value = input7.__value;
    			/*$$binding_groups*/ ctx[15][2].push(input7);
    			add_location(input7, file$a, 170, 16, 7560);
    			attr_dev(label7, "class", "form-check-label svelte-1m96ld5");
    			attr_dev(label7, "for", "online");
    			add_location(label7, file$a, 171, 16, 7724);
    			attr_dev(div23, "class", "form-check");
    			add_location(div23, file$a, 169, 12, 7519);
    			attr_dev(div24, "class", "col-xs-12 col-sm-12 col-md-6");
    			add_location(div24, file$a, 160, 8, 6779);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "btn btn-info mb-3");
    			add_location(button, file$a, 179, 16, 7986);
    			attr_dev(pre, "class", "svelte-1m96ld5");
    			add_location(pre, file$a, 186, 16, 8340);
    			attr_dev(div25, "class", "css-to-copy d-grid gap-1 svelte-1m96ld5");
    			add_location(div25, file$a, 178, 12, 7931);
    			attr_dev(div26, "class", "col-xs-12 col-sm-12 col-md-6");
    			add_location(div26, file$a, 177, 8, 7876);
    			attr_dev(div27, "class", "row");
    			add_location(div27, file$a, 158, 4, 6752);
    			attr_dev(div28, "class", "output-wrapper");
    			add_location(div28, file$a, 156, 0, 6718);
    			attr_dev(div29, "class", "modal-content modal-theme-preview");
    			add_location(div29, file$a, 200, 8, 8647);
    			attr_dev(div30, "class", "modal-dialog modal-xl modal-dialog-centered");
    			add_location(div30, file$a, 199, 4, 8581);
    			attr_dev(div31, "class", "modal fade");
    			attr_dev(div31, "id", "modal");
    			attr_dev(div31, "tabindex", "-1");
    			attr_dev(div31, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div31, "aria-hidden", "true");
    			add_location(div31, file$a, 198, 0, 8452);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, h40);
    			append_dev(div10, t1);
    			append_dev(div10, div8);
    			append_dev(div8, div3);
    			append_dev(div3, div2);
    			append_dev(div2, img0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, input0);
    			input0.checked = input0.__value === /*light*/ ctx[0];
    			append_dev(div0, t3);
    			append_dev(div0, label0);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, img1);
    			append_dev(div6, t6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, input1);
    			input1.checked = input1.__value === /*light*/ ctx[0];
    			append_dev(div4, t7);
    			append_dev(div4, label1);
    			append_dev(div10, t9);
    			append_dev(div10, div9);
    			append_dev(div9, input2);
    			input2.checked = /*lightDots*/ ctx[2];
    			append_dev(div9, t10);
    			append_dev(div9, label2);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div21, anchor);
    			append_dev(div21, h41);
    			append_dev(div21, t14);
    			append_dev(div21, div19);
    			append_dev(div19, div14);
    			append_dev(div14, div13);
    			append_dev(div13, img2);
    			append_dev(div13, t15);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, input3);
    			input3.checked = input3.__value === /*dark*/ ctx[1];
    			append_dev(div11, t16);
    			append_dev(div11, label3);
    			append_dev(div19, t18);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, img3);
    			append_dev(div17, t19);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, input4);
    			input4.checked = input4.__value === /*dark*/ ctx[1];
    			append_dev(div15, t20);
    			append_dev(div15, label4);
    			append_dev(div21, t22);
    			append_dev(div21, div20);
    			append_dev(div20, input5);
    			input5.checked = /*darkDots*/ ctx[3];
    			append_dev(div20, t23);
    			append_dev(div20, label5);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div28, anchor);
    			append_dev(div28, div27);
    			append_dev(div27, div24);
    			append_dev(div24, p);
    			append_dev(div24, t27);
    			append_dev(div24, div22);
    			append_dev(div22, input6);
    			input6.checked = input6.__value === /*offlineOrOnline*/ ctx[4];
    			append_dev(div22, t28);
    			append_dev(div22, label6);
    			append_dev(div24, t30);
    			append_dev(div24, div23);
    			append_dev(div23, input7);
    			input7.checked = input7.__value === /*offlineOrOnline*/ ctx[4];
    			append_dev(div23, t31);
    			append_dev(div23, label7);
    			append_dev(div27, t33);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, button);
    			if_block.m(button, null);
    			append_dev(div25, t34);
    			append_dev(div25, pre);
    			append_dev(pre, t35);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, div31, anchor);
    			append_dev(div31, div30);
    			append_dev(div30, div29);
    			div29.innerHTML = /*modalContent*/ ctx[7];
    			/*div31_binding*/ ctx[27](div31);

    			if (!mounted) {
    				dispose = [
    					listen_dev(img0, "click", /*click_handler*/ ctx[13], false, false, false),
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[14]),
    					listen_dev(input0, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(img1, "click", /*click_handler_1*/ ctx[16], false, false, false),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[17]),
    					listen_dev(input1, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[18]),
    					listen_dev(input2, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(img2, "click", /*click_handler_2*/ ctx[19], false, false, false),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[20]),
    					listen_dev(input3, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(img3, "click", /*click_handler_3*/ ctx[21], false, false, false),
    					listen_dev(input4, "change", /*input4_change_handler*/ ctx[22]),
    					listen_dev(input4, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(input5, "change", /*input5_change_handler*/ ctx[23]),
    					listen_dev(input5, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(input6, "change", /*input6_change_handler*/ ctx[24]),
    					listen_dev(input6, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(input7, "change", /*input7_change_handler*/ ctx[25]),
    					listen_dev(input7, "change", /*buildCss*/ ctx[11], false, false, false),
    					listen_dev(button, "click", /*copy*/ ctx[12], false, false, false),
    					listen_dev(div29, "click", /*click_handler_4*/ ctx[26], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*light*/ 1) {
    				input0.checked = input0.__value === /*light*/ ctx[0];
    			}

    			if (dirty[0] & /*light*/ 1) {
    				input1.checked = input1.__value === /*light*/ ctx[0];
    			}

    			if (dirty[0] & /*lightDots*/ 4) {
    				input2.checked = /*lightDots*/ ctx[2];
    			}

    			if (dirty[0] & /*dark*/ 2) {
    				input3.checked = input3.__value === /*dark*/ ctx[1];
    			}

    			if (dirty[0] & /*dark*/ 2) {
    				input4.checked = input4.__value === /*dark*/ ctx[1];
    			}

    			if (dirty[0] & /*darkDots*/ 8) {
    				input5.checked = /*darkDots*/ ctx[3];
    			}

    			if (dirty[0] & /*offlineOrOnline*/ 16) {
    				input6.checked = input6.__value === /*offlineOrOnline*/ ctx[4];
    			}

    			if (dirty[0] & /*offlineOrOnline*/ 16) {
    				input7.checked = input7.__value === /*offlineOrOnline*/ ctx[4];
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (dirty[0] & /*css*/ 256) set_data_dev(t35, /*css*/ ctx[8]);
    			if (dirty[0] & /*modalContent*/ 128) div29.innerHTML = /*modalContent*/ ctx[7];		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			/*$$binding_groups*/ ctx[15][0].splice(/*$$binding_groups*/ ctx[15][0].indexOf(input0), 1);
    			/*$$binding_groups*/ ctx[15][0].splice(/*$$binding_groups*/ ctx[15][0].indexOf(input1), 1);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div21);
    			/*$$binding_groups*/ ctx[15][1].splice(/*$$binding_groups*/ ctx[15][1].indexOf(input3), 1);
    			/*$$binding_groups*/ ctx[15][1].splice(/*$$binding_groups*/ ctx[15][1].indexOf(input4), 1);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div28);
    			/*$$binding_groups*/ ctx[15][2].splice(/*$$binding_groups*/ ctx[15][2].indexOf(input6), 1);
    			/*$$binding_groups*/ ctx[15][2].splice(/*$$binding_groups*/ ctx[15][2].indexOf(input7), 1);
    			if_block.d();
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(div31);
    			/*div31_binding*/ ctx[27](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("BujoThemes", slots, []);

    	let mainCss,
    		lightWhiteCss,
    		lightSepiaCss,
    		darkBlackCss,
    		darkCoffeeCss,
    		lightWhiteDotsCss,
    		lightSepiaDotsCss,
    		darkBlackDotsCss,
    		darkCoffeeDotsCss;

    	loadCss("bujo-css/main.css", data => mainCss = data);
    	loadCss("bujo-css/light-white.css", data => lightWhiteCss = data);
    	loadCss("bujo-css/light-sepia.css", data => lightSepiaCss = data);
    	loadCss("bujo-css/dark-black.css", data => darkBlackCss = data);
    	loadCss("bujo-css/dark-coffee.css", data => darkCoffeeCss = data);
    	loadCss("bujo-css/light-white-dots.css", data => lightWhiteDotsCss = data);
    	loadCss("bujo-css/light-sepia-dots.css", data => lightSepiaDotsCss = data);
    	loadCss("bujo-css/dark-black-dots.css", data => darkBlackDotsCss = data);
    	loadCss("bujo-css/dark-coffee-dots.css", data => darkCoffeeDotsCss = data);
    	let light = "white";
    	let dark = "black";
    	let lightDots = true;
    	let darkDots = true;
    	let offlineOrOnline = "online";
    	let modal, modalEl;

    	onMount(() => {
    		$$invalidate(5, modal = new window.bootstrap.Modal(modalEl));
    	});

    	let modalContent = "";

    	const showImage = img => {
    		$$invalidate(7, modalContent = `<img src="images/logseq-${img}.jpg" alt="White theme">`);
    		modal.show();
    	};

    	let css = "";

    	const buildCss = () => {
    		$$invalidate(8, css = offlineOrOnline === "online"
    		? `@import url('${location.origin}/bujo-css/main.css');\n`
    		: mainCss + "\n\n\n");

    		switch (dark) {
    			case "black":
    				$$invalidate(8, css += offlineOrOnline === "online"
    				? `@import url('${location.origin}/bujo-css/dark-black.css');\n`
    				: darkBlackCss + "\n\n\n");
    				darkDots
    				? $$invalidate(8, css += offlineOrOnline === "online"
    					? `@import url('${location.origin}/bujo-css/dark-black-dots.css');\n`
    					: darkBlackDotsCss + "\n\n\n")
    				: "";
    				break;
    			case "coffee":
    				$$invalidate(8, css += offlineOrOnline === "online"
    				? `@import url('${location.origin}/bujo-css/dark-coffee.css');\n`
    				: darkCoffeeCss + "\n\n\n");
    				darkDots
    				? $$invalidate(8, css += offlineOrOnline === "online"
    					? `@import url('${location.origin}/bujo-css/dark-coffee-dots.css');\n`
    					: darkCoffeeDotsCss + "\n\n\n")
    				: "";
    				break;
    		}

    		switch (light) {
    			case "white":
    				$$invalidate(8, css += offlineOrOnline === "online"
    				? `@import url('${location.origin}/bujo-css/light-white.css');\n`
    				: lightWhiteCss + "\n\n\n");
    				lightDots
    				? $$invalidate(8, css += offlineOrOnline === "online"
    					? `@import url('${location.origin}/bujo-css/light-white-dots.css');\n`
    					: lightWhiteDotsCss + "\n\n\n")
    				: "";
    				break;
    			case "sepia":
    				$$invalidate(8, css += offlineOrOnline === "online"
    				? `@import url('${location.origin}/bujo-css/light-sepia.css');\n`
    				: lightSepiaCss + "\n\n\n");
    				lightDots
    				? $$invalidate(8, css += offlineOrOnline === "online"
    					? `@import url('${location.origin}/bujo-css/light-sepia-dots.css');\n`
    					: lightSepiaDotsCss + "\n\n\n")
    				: "";
    				break;
    		}

    		return css;
    	};

    	buildCss();
    	let copied = false;

    	const copy = () => {
    		copyToClipboard(buildCss());
    		$$invalidate(9, copied = true);

    		setTimeout(
    			() => {
    				$$invalidate(9, copied = false);
    			},
    			4000
    		);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BujoThemes> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[], [], []];
    	const click_handler = () => showImage("light-white");

    	function input0_change_handler() {
    		light = this.__value;
    		$$invalidate(0, light);
    	}

    	const click_handler_1 = () => showImage("light-sepia");

    	function input1_change_handler() {
    		light = this.__value;
    		$$invalidate(0, light);
    	}

    	function input2_change_handler() {
    		lightDots = this.checked;
    		$$invalidate(2, lightDots);
    	}

    	const click_handler_2 = () => showImage("dark-black");

    	function input3_change_handler() {
    		dark = this.__value;
    		$$invalidate(1, dark);
    	}

    	const click_handler_3 = () => showImage("dark-coffee");

    	function input4_change_handler() {
    		dark = this.__value;
    		$$invalidate(1, dark);
    	}

    	function input5_change_handler() {
    		darkDots = this.checked;
    		$$invalidate(3, darkDots);
    	}

    	function input6_change_handler() {
    		offlineOrOnline = this.__value;
    		$$invalidate(4, offlineOrOnline);
    	}

    	function input7_change_handler() {
    		offlineOrOnline = this.__value;
    		$$invalidate(4, offlineOrOnline);
    	}

    	const click_handler_4 = () => modal.hide();

    	function div31_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			modalEl = $$value;
    			$$invalidate(6, modalEl);
    		});
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		copyToClipboard,
    		loadCss,
    		mainCss,
    		lightWhiteCss,
    		lightSepiaCss,
    		darkBlackCss,
    		darkCoffeeCss,
    		lightWhiteDotsCss,
    		lightSepiaDotsCss,
    		darkBlackDotsCss,
    		darkCoffeeDotsCss,
    		light,
    		dark,
    		lightDots,
    		darkDots,
    		offlineOrOnline,
    		modal,
    		modalEl,
    		modalContent,
    		showImage,
    		css,
    		buildCss,
    		copied,
    		copy
    	});

    	$$self.$inject_state = $$props => {
    		if ("mainCss" in $$props) mainCss = $$props.mainCss;
    		if ("lightWhiteCss" in $$props) lightWhiteCss = $$props.lightWhiteCss;
    		if ("lightSepiaCss" in $$props) lightSepiaCss = $$props.lightSepiaCss;
    		if ("darkBlackCss" in $$props) darkBlackCss = $$props.darkBlackCss;
    		if ("darkCoffeeCss" in $$props) darkCoffeeCss = $$props.darkCoffeeCss;
    		if ("lightWhiteDotsCss" in $$props) lightWhiteDotsCss = $$props.lightWhiteDotsCss;
    		if ("lightSepiaDotsCss" in $$props) lightSepiaDotsCss = $$props.lightSepiaDotsCss;
    		if ("darkBlackDotsCss" in $$props) darkBlackDotsCss = $$props.darkBlackDotsCss;
    		if ("darkCoffeeDotsCss" in $$props) darkCoffeeDotsCss = $$props.darkCoffeeDotsCss;
    		if ("light" in $$props) $$invalidate(0, light = $$props.light);
    		if ("dark" in $$props) $$invalidate(1, dark = $$props.dark);
    		if ("lightDots" in $$props) $$invalidate(2, lightDots = $$props.lightDots);
    		if ("darkDots" in $$props) $$invalidate(3, darkDots = $$props.darkDots);
    		if ("offlineOrOnline" in $$props) $$invalidate(4, offlineOrOnline = $$props.offlineOrOnline);
    		if ("modal" in $$props) $$invalidate(5, modal = $$props.modal);
    		if ("modalEl" in $$props) $$invalidate(6, modalEl = $$props.modalEl);
    		if ("modalContent" in $$props) $$invalidate(7, modalContent = $$props.modalContent);
    		if ("css" in $$props) $$invalidate(8, css = $$props.css);
    		if ("copied" in $$props) $$invalidate(9, copied = $$props.copied);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		light,
    		dark,
    		lightDots,
    		darkDots,
    		offlineOrOnline,
    		modal,
    		modalEl,
    		modalContent,
    		css,
    		copied,
    		showImage,
    		buildCss,
    		copy,
    		click_handler,
    		input0_change_handler,
    		$$binding_groups,
    		click_handler_1,
    		input1_change_handler,
    		input2_change_handler,
    		click_handler_2,
    		input3_change_handler,
    		click_handler_3,
    		input4_change_handler,
    		input5_change_handler,
    		input6_change_handler,
    		input7_change_handler,
    		click_handler_4,
    		div31_binding
    	];
    }

    class BujoThemes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {}, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BujoThemes",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.32.3 */
    const file$b = "src/App.svelte";

    // (40:3) <Route path="/mini-calendar">
    function create_default_slot_3(ctx) {
    	let minicalendar;
    	let current;
    	minicalendar = new MiniCalendar({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(minicalendar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(minicalendar, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(minicalendar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(minicalendar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(minicalendar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(40:3) <Route path=\\\"/mini-calendar\\\">",
    		ctx
    	});

    	return block;
    }

    // (43:3) <Route path="/bujo-themes">
    function create_default_slot_2(ctx) {
    	let bujothemes;
    	let current;
    	bujothemes = new BujoThemes({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(bujothemes.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bujothemes, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bujothemes.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bujothemes.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bujothemes, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(43:3) <Route path=\\\"/bujo-themes\\\">",
    		ctx
    	});

    	return block;
    }

    // (46:3) <Route path="/clean-themes">
    function create_default_slot_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Soon ;)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(46:3) <Route path=\\\"/clean-themes\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:2) <Transition>
    function create_default_slot(ctx) {
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let current;
    	route0 = new Route({ props: { path: "/" }, $$inline: true });

    	route1 = new Route({
    			props: {
    				path: "/mini-calendar",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/bujo-themes",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: {
    				path: "/clean-themes",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(37:2) <Transition>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div2;
    	let header;
    	let h1;
    	let a0;
    	let t1;
    	let p;
    	let t2;
    	let a1;
    	let t4;
    	let nav;
    	let div1;
    	let button;
    	let span;
    	let t5;
    	let div0;
    	let ul;
    	let li0;
    	let a2;
    	let t7;
    	let li1;
    	let a3;
    	let t9;
    	let li2;
    	let a4;
    	let t11;
    	let main;
    	let transition;
    	let t12;
    	let footer;
    	let t13;
    	let a5;
    	let t15;
    	let current;
    	let mounted;
    	let dispose;

    	transition = new Transition({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			header = element("header");
    			h1 = element("h1");
    			a0 = element("a");
    			a0.textContent = "Logseq Tools";
    			t1 = space();
    			p = element("p");
    			t2 = text("A couple of (hopefully!) useful utilities to help us to work with ");
    			a1 = element("a");
    			a1.textContent = "Logseq";
    			t4 = space();
    			nav = element("nav");
    			div1 = element("div");
    			button = element("button");
    			span = element("span");
    			t5 = space();
    			div0 = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			a2 = element("a");
    			a2.textContent = "Mini Calendar";
    			t7 = space();
    			li1 = element("li");
    			a3 = element("a");
    			a3.textContent = "BuJo Themes";
    			t9 = space();
    			li2 = element("li");
    			a4 = element("a");
    			a4.textContent = "Clean Themes";
    			t11 = space();
    			main = element("main");
    			create_component(transition.$$.fragment);
    			t12 = space();
    			footer = element("footer");
    			t13 = text("If you'd like to support my work: ");
    			a5 = element("a");
    			a5.textContent = "https://paypal.me/piotrsss";
    			t15 = text(" :)");
    			attr_dev(a0, "href", "/");
    			attr_dev(a0, "class", "svelte-1ank0ll");
    			add_location(a0, file$b, 11, 6, 303);
    			attr_dev(h1, "class", "svelte-1ank0ll");
    			add_location(h1, file$b, 11, 2, 299);
    			attr_dev(a1, "href", "https://logseq.com");
    			add_location(a1, file$b, 12, 71, 408);
    			add_location(p, file$b, 12, 2, 339);
    			attr_dev(header, "class", "svelte-1ank0ll");
    			add_location(header, file$b, 10, 1, 288);
    			attr_dev(span, "class", "navbar-toggler-icon");
    			add_location(span, file$b, 17, 4, 766);
    			attr_dev(button, "class", "navbar-toggler");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "data-bs-toggle", "collapse");
    			attr_dev(button, "data-bs-target", "#navbarSupportedContent");
    			attr_dev(button, "aria-controls", "navbarSupportedContent");
    			attr_dev(button, "aria-expanded", "false");
    			attr_dev(button, "aria-label", "Toggle navigation");
    			add_location(button, file$b, 16, 3, 557);
    			attr_dev(a2, "class", "nav-link");
    			attr_dev(a2, "aria-current", "page");
    			attr_dev(a2, "href", "/mini-calendar");
    			add_location(a2, file$b, 22, 6, 978);
    			attr_dev(li0, "class", "nav-item mx-2");
    			add_location(li0, file$b, 21, 5, 945);
    			attr_dev(a3, "class", "nav-link");
    			attr_dev(a3, "href", "/bujo-themes");
    			add_location(a3, file$b, 25, 6, 1118);
    			attr_dev(li1, "class", "nav-item mx-2");
    			add_location(li1, file$b, 24, 5, 1085);
    			attr_dev(a4, "class", "nav-link");
    			attr_dev(a4, "href", "/clean-themes");
    			add_location(a4, file$b, 28, 6, 1234);
    			attr_dev(li2, "class", "nav-item mx-2");
    			add_location(li2, file$b, 27, 5, 1201);
    			attr_dev(ul, "class", "navbar-nav mb-2 mb-lg-0 mx-auto");
    			add_location(ul, file$b, 20, 4, 895);
    			attr_dev(div0, "class", "collapse navbar-collapse");
    			attr_dev(div0, "id", "navbarSupportedContent");
    			add_location(div0, file$b, 19, 3, 824);
    			attr_dev(div1, "class", "container-fluid");
    			add_location(div1, file$b, 15, 2, 524);
    			attr_dev(nav, "class", "navbar navbar-expand-lg navbar-dark bg-dark");
    			add_location(nav, file$b, 14, 1, 464);
    			attr_dev(main, "class", "my-5");
    			add_location(main, file$b, 35, 1, 1353);
    			attr_dev(a5, "href", "https://paypal.me/piotrsss");
    			add_location(a5, file$b, 52, 36, 1676);
    			attr_dev(footer, "class", "svelte-1ank0ll");
    			add_location(footer, file$b, 51, 1, 1631);
    			attr_dev(div2, "class", "container");
    			add_location(div2, file$b, 9, 0, 263);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, header);
    			append_dev(header, h1);
    			append_dev(h1, a0);
    			append_dev(header, t1);
    			append_dev(header, p);
    			append_dev(p, t2);
    			append_dev(p, a1);
    			append_dev(div2, t4);
    			append_dev(div2, nav);
    			append_dev(nav, div1);
    			append_dev(div1, button);
    			append_dev(button, span);
    			append_dev(div1, t5);
    			append_dev(div1, div0);
    			append_dev(div0, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a2);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, a3);
    			append_dev(ul, t9);
    			append_dev(ul, li2);
    			append_dev(li2, a4);
    			append_dev(div2, t11);
    			append_dev(div2, main);
    			mount_component(transition, main, null);
    			append_dev(div2, t12);
    			append_dev(div2, footer);
    			append_dev(footer, t13);
    			append_dev(footer, a5);
    			append_dev(footer, t15);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(A.call(null, a2)),
    					action_destroyer(A.call(null, a3)),
    					action_destroyer(A.call(null, a4))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const transition_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				transition_changes.$$scope = { dirty, ctx };
    			}

    			transition.$set(transition_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(transition.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(transition.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(transition);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	m.mode.hash();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Route,
    		active: A,
    		router: m,
    		Transition,
    		MiniCalendar,
    		BujoThemes
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
        props: {
            name: 'world'
        }
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
